unit mailgraph_class;

{$MODE DELPHI}
{$LONGSTRINGS ON}

interface

uses
    Classes, SysUtils,variants,strutils,IniFiles, Process,md5,logs,unix,RegExpr in 'RegExpr.pas',zsystem,postfix_class;

  type
  tmailgraph=class


private
     LOGS:Tlogs;
     D:boolean;
     GLOBAL_INI:TiniFIle;
     SYS:TSystem;
     artica_path:string;
     dbg:boolean;
     postfix:Tpostfix;

public
    procedure   Free;
    constructor Create;
    procedure   Build_binary();
    procedure   mailgraphcgi();
END;

implementation

constructor tmailgraph.Create;
begin
       forcedirectories('/etc/artica-postfix');
       forcedirectories('/opt/artica/tmp');
       LOGS:=tlogs.Create();
       SYS:=Tsystem.Create;
       dbg:=LOGS.COMMANDLINE_PARAMETERS('debug');
       postfix:=Tpostfix.Create(SYS);

       if not DirectoryExists('/usr/share/artica-postfix') then begin
              artica_path:=ParamStr(0);
              artica_path:=ExtractFilePath(artica_path);
              artica_path:=AnsiReplaceText(artica_path,'/bin/','');

      end else begin
          artica_path:='/usr/share/artica-postfix';
      end;
end;
//##############################################################################
procedure tmailgraph.free();
begin
    logs.Free;
    SYS.Free;
end;
//##############################################################################

procedure tmailgraph.Build_binary();
var
l:TstringList;
begin
l:=TstringList.Create;

l.Add('#!/usr/bin/perl -w');
l.Add('');
l.Add('# mailgraph -- an rrdtool frontend for mail statistics');
l.Add('# copyright (c) 2000-2007 ETH Zurich');
l.Add('# copyright (c) 2000-2007 David Schweikert <david@schweikert.ch>');
l.Add('# released under the GNU General Public License');
l.Add('');
l.Add('######## Parse::Syslog 1.09 (automatically embedded) ########');
l.Add('package Parse::Syslog;');
l.Add('use Carp;');
l.Add('use Symbol;');
l.Add('use Time::Local;');
l.Add('use IO::File;');
l.Add('use strict;');
l.Add('use vars qw($VERSION);');
l.Add('my %months_map = (');
l.Add('    ''Jan'' => 0, ''Feb'' => 1, ''Mar'' => 2,');
l.Add('    ''Apr'' => 3, ''May'' => 4, ''Jun'' => 5,');
l.Add('    ''Jul'' => 6, ''Aug'' => 7, ''Sep'' => 8,');
l.Add('    ''Oct'' => 9, ''Nov'' =>10, ''Dec'' =>11,');
l.Add('    ''jan'' => 0, ''feb'' => 1, ''mar'' => 2,');
l.Add('    ''apr'' => 3, ''may'' => 4, ''jun'' => 5,');
l.Add('    ''jul'' => 6, ''aug'' => 7, ''sep'' => 8,');
l.Add('    ''oct'' => 9, ''nov'' =>10, ''dec'' =>11,');
l.Add(');');
l.Add('sub is_dst_switch($$$)');
l.Add('{');
l.Add('    my ($self, $t, $time) = @_;');
l.Add('    # calculate the time in one hour and see if the difference is 3600 seconds.');
l.Add('    # if not, we are in a dst-switch hour');
l.Add('    # note that right now we only support 1-hour dst offsets');
l.Add('    # cache the result');
l.Add('    if(defined $self->{is_dst_switch_last_hour} and');
l.Add('        $self->{is_dst_switch_last_hour} == $t->[3]<<5+$t->[2]) {');
l.Add('        return @{$self->{is_dst_switch_result}};');
l.Add('    }');
l.Add('    # calculate a number out of the day and hour to identify the hour');
l.Add('    $self->{is_dst_switch_last_hour} = $t->[3]<<5+$t->[2];');
l.Add('    # calculating hour+1 (below) is a problem if the hour is 23. as far as I');
l.Add('    # know, nobody does the DST switch at this time, so just assume it isn''t');
l.Add('    # DST switch if the hour is 23.');
l.Add('    if($t->[2]==23) {');
l.Add('        @{$self->{is_dst_switch_result}} = (0, undef);');
l.Add('        return @{$self->{is_dst_switch_result}};');
l.Add('    }');
l.Add('    # let''s see the timestamp in one hour');
l.Add('    # 0: sec, 1: min, 2: h, 3: day, 4: month, 5: year');
l.Add('    my $time_plus_1h = timelocal($t->[0], $t->[1], $t->[2]+1, $t->[3], $t->[4], $t->[5]);');
l.Add('    if($time_plus_1h - $time > 4000) {');
l.Add('        @{$self->{is_dst_switch_result}} = (3600, $time-$time%3600+3600);');
l.Add('    }');
l.Add('    else {');
l.Add('        @{$self->{is_dst_switch_result}} = (0, undef);');
l.Add('    }');
l.Add('    return @{$self->{is_dst_switch_result}};');
l.Add('}');
l.Add('# fast timelocal, cache minute''s timestamp');
l.Add('# don''t cache more than minute because of daylight saving time switch');
l.Add('# 0: sec, 1: min, 2: h, 3: day, 4: month, 5: year');
l.Add('sub str2time($$$$$$$$)');
l.Add('{');
l.Add('    my $self = shift @_;');
l.Add('    my $GMT = pop @_;');
l.Add('    my $lastmin = $self->{str2time_lastmin};');
l.Add('    if(defined $lastmin and');
l.Add('        $lastmin->[0] == $_[1] and');
l.Add('        $lastmin->[1] == $_[2] and');
l.Add('        $lastmin->[2] == $_[3] and');
l.Add('        $lastmin->[3] == $_[4] and');
l.Add('        $lastmin->[4] == $_[5])');
l.Add('    {');
l.Add('        $self->{last_time} = $self->{str2time_lastmin_time} + $_[0];');
l.Add('        return $self->{last_time} + ($self->{dst_comp}||0);');
l.Add('    }');
l.Add('    my $time;');
l.Add('    if($GMT) {');
l.Add('        $time = timegm(@_);');
l.Add('    }');
l.Add('    else {');
l.Add('        $time = timelocal(@_);');
l.Add('    }');
l.Add('    # compensate for DST-switch');
l.Add('    # - if a timewarp is detected (1:00 -> 1:30 -> 1:00):');
l.Add('    # - test if we are in a DST-switch-hour');
l.Add('    # - compensate if yes');
l.Add('    # note that we assume that the DST-switch goes like this:');
l.Add('    # time   1:00  1:30  2:00  2:30  2:00  2:30  3:00  3:30');
l.Add('    # stamp   1     2     3     4     3     3     7     8  ');
l.Add('    # comp.   0     0     0     0     2     2     0     0');
l.Add('    # result  1     2     3     4     5     6     7     8');
l.Add('    # old Time::Local versions behave differently (1 2  5 6 5 6 7 8)');
l.Add('    if(!$GMT and !defined $self->{dst_comp} and');
l.Add('        defined $self->{last_time} and');
l.Add('        $self->{last_time}-$time > 1200 and');
l.Add('        $self->{last_time}-$time < 3600)');
l.Add('    {');
l.Add('        my ($off, $until) = $self->is_dst_switch(\@_, $time);');
l.Add('        if($off) {');
l.Add('            $self->{dst_comp} = $off;');
l.Add('            $self->{dst_comp_until} = $until;');
l.Add('        }');
l.Add('    }');
l.Add('    if(defined $self->{dst_comp_until} and $time > $self->{dst_comp_until}) {');
l.Add('        delete $self->{dst_comp};');
l.Add('        delete $self->{dst_comp_until};');
l.Add('    }');
l.Add('    $self->{str2time_lastmin} = [ @_[1..5] ];');
l.Add('    $self->{str2time_lastmin_time} = $time-$_[0];');
l.Add('    $self->{last_time} = $time;');
l.Add('    return $time+($self->{dst_comp}||0);');
l.Add('}');
l.Add('sub _use_locale($)');
l.Add('{');
l.Add('    use POSIX qw(locale_h strftime);');
l.Add('    my $old_locale = setlocale(LC_TIME);');
l.Add('    for my $locale (@_) {');
l.Add('        croak "new(): wrong ''locale'' value: ''$locale''" unless setlocale(LC_TIME, $locale);');
l.Add('        for my $month (0..11) {');
l.Add('            $months_map{strftime("%b", 0, 0, 0, 1, $month, 96)} = $month;');
l.Add('        }');
l.Add('    }');
l.Add('    setlocale(LC_TIME, $old_locale);');
l.Add('}');
l.Add('sub new($$;%)');
l.Add('{');
l.Add('    my ($class, $file, %data) = @_;');
l.Add('    croak "new() requires one argument: file" unless defined $file;');
l.Add('    %data = () unless %data;');
l.Add('    if(not defined $data{year}) {');
l.Add('        $data{year} = (localtime(time))[5]+1900;');
l.Add('    }');
l.Add('    $data{type} = ''syslog'' unless defined $data{type};');
l.Add('    $data{_repeat}=0;');
l.Add('    if(UNIVERSAL::isa($file, ''IO::Handle'')) {');
l.Add('        $data{file} = $file;');
l.Add('    }');
l.Add('    elsif(UNIVERSAL::isa($file, ''File::Tail'')) {');
l.Add('        $data{file} = $file;');
l.Add('        $data{filetail}=1;');
l.Add('    }');
l.Add('    elsif(! ref $file) {');
l.Add('        if($file eq ''-'') {');
l.Add('            my $io = new IO::Handle;');
l.Add('            $data{file} = $io->fdopen(fileno(STDIN),"r");');
l.Add('        }');
l.Add('        else {');
l.Add('            $data{file} = new IO::File($file, "<");');
l.Add('            defined $data{file} or croak "can''t open $file: $!";');
l.Add('        }');
l.Add('    }');
l.Add('    else {');
l.Add('        croak "argument must be either a file-name or an IO::Handle object.";');
l.Add('    }');
l.Add('    if(defined $data{locale}) {');
l.Add('        if(ref $data{locale} eq ''ARRAY'') {');
l.Add('            _use_locale @{$data{locale}};');
l.Add('        }');
l.Add('        elsif(ref $data{locale} eq '''') {');
l.Add('            _use_locale $data{locale};');
l.Add('        }');
l.Add('        else {');
l.Add('            croak "''locale'' parameter must be scalar or array of scalars";');
l.Add('        }');
l.Add('    }');
l.Add('    return bless \%data, $class;');
l.Add('}');
l.Add('sub _year_increment($$)');
l.Add('{');
l.Add('    my ($self, $mon) = @_;');
l.Add('    # year change');
l.Add('    if($mon==0) {');
l.Add('        $self->{year}++ if defined $self->{_last_mon} and $self->{_last_mon} == 11;');
l.Add('        $self->{enable_year_decrement} = 1;');
l.Add('    }');
l.Add('    elsif($mon == 11) {');
l.Add('        if($self->{enable_year_decrement}) {');
l.Add('            $self->{year}-- if defined $self->{_last_mon} and $self->{_last_mon} != 11;');
l.Add('        }');
l.Add('    }');
l.Add('    else {');
l.Add('        $self->{enable_year_decrement} = 0;');
l.Add('    }');
l.Add('    $self->{_last_mon} = $mon;');
l.Add('}');
l.Add('sub _next_line($)');
l.Add('{');
l.Add('    my $self = shift;');
l.Add('    my $f = $self->{file};');
l.Add('    if(defined $self->{filetail}) {');
l.Add('        return $f->read;');
l.Add('    }');
l.Add('    else {');
l.Add('        return $f->getline;');
l.Add('    }');
l.Add('}');
l.Add('sub _next_syslog($)');
l.Add('{');
l.Add('    my ($self) = @_;');
l.Add('    while($self->{_repeat}>0) {');
l.Add('        $self->{_repeat}--;');
l.Add('        return $self->{_repeat_data};');
l.Add('    }');
l.Add('    my $file = $self->{file};');
l.Add('    line: while(defined (my $str = $self->_next_line)) {');
l.Add('        # date, time and host ');
l.Add('        $str =~ /^');
l.Add('            (\S{3})\s+(\d+)      # date  -- 1, 2');
l.Add('            \s');
l.Add('            (\d+):(\d+):(\d+)    # time  -- 3, 4, 5');
l.Add('            (?:\s<\w+\.\w+>)?    # FreeBSD''s verbose-mode');
l.Add('            \s');
l.Add('            ([-\w\.\@:]+)        # host  -- 6');
l.Add('            \s+');
l.Add('            (?:\[LOG_[A-Z]+\]\s+)?  # FreeBSD');
l.Add('            (.*)                 # text  -- 7');
l.Add('            $/x or do');
l.Add('        {');
l.Add('            warn "WARNING: line not in syslog format: $str";');
l.Add('            next line;');
l.Add('        };');
l.Add('        my $mon = $months_map{$1};');
l.Add('        defined $mon or croak "unknown month $1\n";');
l.Add('        $self->_year_increment($mon);');
l.Add('        # convert to unix time');
l.Add('        my $time = $self->str2time($5,$4,$3,$2,$mon,$self->{year}-1900,$self->{GMT});');
l.Add('        if(not $self->{allow_future}) {');
l.Add('            # accept maximum one day in the present future');
l.Add('            if($time - time > 86400) {');
l.Add('                warn "WARNING: ignoring future date in syslog line: $str";');
l.Add('                next line;');
l.Add('            }');
l.Add('        }');
l.Add('        my ($host, $text) = ($6, $7);');
l.Add('        # last message repeated ... times');
l.Add('        if($text =~ /^(?:last message repeated|above message repeats) (\d+) time/) {');
l.Add('            next line if defined $self->{repeat} and not $self->{repeat};');
l.Add('            next line if not defined $self->{_last_data}{$host};');
l.Add('            $1 > 0 or do {');
l.Add('                warn "WARNING: last message repeated 0 or less times??\n";');
l.Add('                next line;');
l.Add('            };');
l.Add('            $self->{_repeat}=$1-1;');
l.Add('            $self->{_repeat_data}=$self->{_last_data}{$host};');
l.Add('            return $self->{_last_data}{$host};');
l.Add('        }');
l.Add('        # marks');
l.Add('        next if $text eq ''-- MARK --'';');
l.Add('        # some systems send over the network their');
l.Add('        # hostname prefixed to the text. strip that.');
l.Add('        $text =~ s/^$host\s+//;');
l.Add('        # discard '':'' in HP-UX ''su'' entries like this:');
l.Add('        # Apr 24 19:09:40 remedy : su : + tty?? root-oracle');
l.Add('        $text =~ s/^:\s+//;');
l.Add('        $text =~ /^');
l.Add('            ([^:]+?)        # program   -- 1');
l.Add('            (?:\[(\d+)\])?  # PID       -- 2');
l.Add('            :\s+');
l.Add('            (?:\[ID\ (\d+)\ ([a-z0-9]+)\.([a-z]+)\]\ )?   # Solaris 8 "message id" -- 3, 4, 5');
l.Add('            (.*)            # text      -- 6');
l.Add('            $/x or do');
l.Add('        {');
l.Add('            warn "WARNING: line not in syslog format: $str";');
l.Add('            next line;');
l.Add('        };');
l.Add('        if($self->{arrayref}) {');
l.Add('            $self->{_last_data}{$host} = [');
l.Add('                $time,  # 0: timestamp ');
l.Add('                $host,  # 1: host      ');
l.Add('                $1,     # 2: program   ');
l.Add('                $2,     # 3: pid       ');
l.Add('                $6,     # 4: text      ');
l.Add('                ];');
l.Add('        }');
l.Add('        else {');
l.Add('            $self->{_last_data}{$host} = {');
l.Add('                timestamp => $time,');
l.Add('                host      => $host,');
l.Add('                program   => $1,');
l.Add('                pid       => $2,');
l.Add('                msgid     => $3,');
l.Add('                facility  => $4,');
l.Add('                level     => $5,');
l.Add('                text      => $6,');
l.Add('            };');
l.Add('        }');
l.Add('        return $self->{_last_data}{$host};');
l.Add('    }');
l.Add('    return undef;');
l.Add('}');
l.Add('sub _next_metalog($)');
l.Add('{');
l.Add('    my ($self) = @_;');
l.Add('    my $file = $self->{file};');
l.Add('    line: while(my $str = $self->_next_line) {');
l.Add('	# date, time and host ');
l.Add('	$str =~ /^');
l.Add('            (\S{3})\s+(\d+)   # date  -- 1, 2');
l.Add('            \s');
l.Add('            (\d+):(\d+):(\d+) # time  -- 3, 4, 5');
l.Add('	                      # host is not logged');
l.Add('            \s+');
l.Add('            (.*)              # text  -- 6');
l.Add('            $/x or do');
l.Add('        {');
l.Add('            warn "WARNING: line not in metalog format: $str";');
l.Add('            next line;');
l.Add('        };');
l.Add('        my $mon = $months_map{$1};');
l.Add('        defined $mon or croak "unknown month $1\n";');
l.Add('        $self->_year_increment($mon);');
l.Add('        # convert to unix time');
l.Add('        my $time = $self->str2time($5,$4,$3,$2,$mon,$self->{year}-1900,$self->{GMT});');
l.Add('	my $text = $6;');
l.Add('        $text =~ /^');
l.Add('            \[(.*?)\]        # program   -- 1');
l.Add('           	             # no PID');
l.Add('	    \s+');
l.Add('            (.*)             # text      -- 2');
l.Add('            $/x or do');
l.Add('        {');
l.Add('	    warn "WARNING: text line not in metalog format: $text ($str)";');
l.Add('            next line;');
l.Add('        };');
l.Add('        if($self->{arrayref}) {');
l.Add('            return [');
l.Add('                $time,  # 0: timestamp ');
l.Add('                ''localhost'',  # 1: host      ');
l.Add('                $1,     # 2: program   ');
l.Add('                undef,  # 3: (no) pid');
l.Add('                $2,     # 4: text');
l.Add('                ];');
l.Add('        }');
l.Add('        else {');
l.Add('            return {');
l.Add('                timestamp => $time,');
l.Add('                host      => ''localhost'',');
l.Add('                program   => $1,');
l.Add('                text      => $2,');
l.Add('            };');
l.Add('        }');
l.Add('    }');
l.Add('    return undef;');
l.Add('}');
l.Add('sub next($)');
l.Add('{');
l.Add('    my ($self) = @_;');
l.Add('    if($self->{type} eq ''syslog'') {');
l.Add('        return $self->_next_syslog();');
l.Add('    }');
l.Add('    elsif($self->{type} eq ''metalog'') {');
l.Add('        return $self->_next_metalog();');
l.Add('    }');
l.Add('    croak "Internal error: unknown type: $self->{type}";');
l.Add('}');
l.Add('');
l.Add('#####################################################################');
l.Add('#####################################################################');
l.Add('#####################################################################');
l.Add('');
l.Add('use RRDs;');
l.Add('');
l.Add('use strict;');
l.Add('use File::Tail;');
l.Add('use Getopt::Long;');
l.Add('use POSIX ''setsid'';');
l.Add('');
l.Add('my $VERSION = "1.13";');
l.Add('');
l.Add('# config');
l.Add('my $rrdstep = 60;');
l.Add('my $xpoints = 540;');
l.Add('my $points_per_sample = 3;');
l.Add('');
l.Add('my $daemon_logfile = ''/var/log/mailgraph.log'';');
l.Add('my $daemon_pidfile = ''/var/run/mailgraph.pid'';');
l.Add('my $daemon_rrd_dir = ''/var/log'';');
l.Add('');
l.Add('# global variables');
l.Add('my $logfile;');
l.Add('my $rrd ="/var/lib/mailgraph/mailgraph.rrd";');
l.Add('my $rrd_virus = ''/var/lib/mailgraph/mailgraph_virus.rrd'';');
l.Add('my $year;');
l.Add('my $this_minute;');
l.Add('my %sum = ( sent => 0, received => 0, bounced => 0, rejected => 0, virus => 0, spam => 0 );');
l.Add('my $rrd_inited=0;');
l.Add('');
l.Add('my %opt = ();');
l.Add('');
l.Add('# prototypes');
l.Add('sub daemonize();');
l.Add('sub process_line($);');
l.Add('sub event_sent($);');
l.Add('sub event_received($);');
l.Add('sub event_bounced($);');
l.Add('sub event_rejected($);');
l.Add('sub event_virus($);');
l.Add('sub event_spam($);');
l.Add('sub init_rrd($);');
l.Add('sub update($);');
l.Add('');
l.Add('sub usage');
l.Add('{');
l.Add('	print "usage: mailgraph [*options*]\n\n";');
l.Add('	print "  -h, --help         display this help and exit\n";');
l.Add('	print "  -v, --verbose      be verbose about what you do\n";');
l.Add('	print "  -V, --version      output version information and exit\n";');
l.Add('	print "  -c, --cat          causes the logfile to be only read and not monitored\n";');
l.Add('	print "  -l, --logfile f    monitor logfile f instead of /var/log/syslog\n";');
l.Add('	print "  -t, --logtype t    set logfile''s type (default: syslog)\n";');
l.Add('	print "  -y, --year         starting year of the log file (default: current year)\n";');
l.Add('	print "      --host=HOST    use only entries for HOST (regexp) in syslog\n";');
l.Add('	print "  -d, --daemon       start in the background\n";');
l.Add('	print "  --daemon-pid=FILE  write PID to FILE instead of /var/run/mailgraph.pid\n";');
l.Add('	print "  --daemon-rrd=DIR   write RRDs to DIR instead of /var/log\n";');
l.Add('	print "  --daemon-log=FILE  write verbose-log to FILE instead of /var/log/mailgraph.log\n";');
l.Add('	print "  --ignore-localhost ignore mail to/from localhost (used for virus scanner)\n";');
l.Add('	print "  --ignore-host=HOST ignore mail to/from HOST regexp (used for virus scanner)\n";');
l.Add('	print "  --only-mail-rrd    update only the mail rrd\n";');
l.Add('	print "  --only-virus-rrd   update only the virus rrd\n";');
l.Add('	print "  --rrd-name=NAME    use NAME.rrd and NAME_virus.rrd for the rrd files\n";');
l.Add('	print "  --rbl-is-spam      count rbl rejects as spam\n";');
l.Add('	print "  --virbl-is-virus   count virbl rejects as viruses\n";');
l.Add('');
l.Add('	exit;');
l.Add('}');
l.Add('');
l.Add('sub main');
l.Add('{');
l.Add('	Getopt::Long::Configure(''no_ignore_case'');');
l.Add('	GetOptions(\%opt, ''help|h'', ''cat|c'', ''logfile|l=s'', ''logtype|t=s'', ''version|V'',');
l.Add('		''year|y=i'', ''host=s'', ''verbose|v'', ''daemon|d!'',');
l.Add('		''daemon_pid|daemon-pid=s'', ''daemon_rrd|daemon-rrd=s'',');
l.Add('		''daemon_log|daemon-log=s'', ''ignore-localhost!'', ''ignore-host=s'',');
l.Add('		''only-mail-rrd'', ''only-virus-rrd'', ''rrd_name|rrd-name=s'',');
l.Add('		''rbl-is-spam'', ''virbl-is-virus''');
l.Add('		) or exit(1);');
l.Add('	usage if $opt{help};');
l.Add('');
l.Add('	if($opt{version}) {');
l.Add('		print "mailgraph $VERSION by david\@schweikert.ch\n";');
l.Add('		exit;');
l.Add('	}');
l.Add('');
l.Add('	$daemon_pidfile = $opt{daemon_pid} if defined $opt{daemon_pid};');
l.Add('	$daemon_logfile = $opt{daemon_log} if defined $opt{daemon_log};');
l.Add('	$daemon_rrd_dir = $opt{daemon_rrd} if defined $opt{daemon_rrd};');
l.Add('	$rrd		= $opt{rrd_name}.".rrd" if defined $opt{rrd_name};');
l.Add('	$rrd_virus	= $opt{rrd_name}."_virus.rrd" if defined $opt{rrd_name};');
l.Add('');
l.Add('	if($opt{daemon} or $opt{daemon_rrd}) {');
l.Add('		chdir $daemon_rrd_dir or die "mailgraph: can''t chdir to $daemon_rrd_dir: $!";');
l.Add('		-w $daemon_rrd_dir or die "mailgraph: can''t write to $daemon_rrd_dir\n";');
l.Add('	}');
l.Add('');
l.Add('	daemonize if $opt{daemon};');
l.Add('');
l.Add('	my $logfile = defined $opt{logfile} ? $opt{logfile} : ''/var/log/syslog'';');
l.Add('	my $file;');
l.Add('	if($opt{cat}) {');
l.Add('		$file = $logfile;');
l.Add('	}');
l.Add('	else {');
l.Add('		$file = File::Tail->new(name=>$logfile, tail=>-1);');
l.Add('	}');
l.Add('	my $parser = new Parse::Syslog($file, year => $opt{year}, arrayref => 1,');
l.Add('		type => defined $opt{logtype} ? $opt{logtype} : ''syslog'');');
l.Add('');
l.Add('	if(not defined $opt{host}) {');
l.Add('		while(my $sl = $parser->next) {');
l.Add('			process_line($sl);');
l.Add('		}');
l.Add('	}');
l.Add('	else {');
l.Add('		my $host = qr/^$opt{host}$/i;');
l.Add('		while(my $sl = $parser->next) {');
l.Add('			process_line($sl) if $sl->[1] =~ $host;');
l.Add('		}');
l.Add('	}');
l.Add('}');
l.Add('');
l.Add('sub daemonize()');
l.Add('{');
l.Add('	open STDIN, ''/dev/null'' or die "mailgraph: can''t read /dev/null: $!";');
l.Add('	if($opt{verbose}) {');
l.Add('		open STDOUT, ">>$daemon_logfile"');
l.Add('			or die "mailgraph: can''t write to $daemon_logfile: $!";');
l.Add('	}');
l.Add('	else {');
l.Add('		open STDOUT, ''>/dev/null''');
l.Add('			or die "mailgraph: can''t write to /dev/null: $!";');
l.Add('	}');
l.Add('	defined(my $pid = fork) or die "mailgraph: can''t fork: $!";');
l.Add('	if($pid) {');
l.Add('		# parent');
l.Add('		open PIDFILE, ">$daemon_pidfile"');
l.Add('			or die "mailgraph: can''t write to $daemon_pidfile: $!\n";');
l.Add('		print PIDFILE "$pid\n";');
l.Add('		close(PIDFILE);');
l.Add('		exit;');
l.Add('	}');
l.Add('	# child');
l.Add('	setsid			or die "mailgraph: can''t start a new session: $!";');
l.Add('	open STDERR, ''>&STDOUT'' or die "mailgraph: can''t dup stdout: $!";');
l.Add('}');
l.Add('');
l.Add('sub init_rrd($)');
l.Add('{');
l.Add('	my $m = shift;');
l.Add('	my $rows = $xpoints/$points_per_sample;');
l.Add('	my $realrows = int($rows*1.1); # ensure that the full range is covered');
l.Add('	my $day_steps = int(3600*24 / ($rrdstep*$rows));');
l.Add('	# use multiples, otherwise rrdtool could choose the wrong RRA');
l.Add('	my $week_steps = $day_steps*7;');
l.Add('	my $month_steps = $week_steps*5;');
l.Add('	my $year_steps = $month_steps*12;');
l.Add('');
l.Add('	# mail rrd');
l.Add('	if(! -f $rrd and ! $opt{''only-virus-rrd''}) {');
l.Add('		RRDs::create($rrd, ''--start'', $m, ''--step'', $rrdstep,');
l.Add('				''DS:sent:ABSOLUTE:''.($rrdstep*2).'':0:U'',');
l.Add('				''DS:recv:ABSOLUTE:''.($rrdstep*2).'':0:U'',');
l.Add('				''DS:bounced:ABSOLUTE:''.($rrdstep*2).'':0:U'',');
l.Add('				''DS:rejected:ABSOLUTE:''.($rrdstep*2).'':0:U'',');
l.Add('				"RRA:AVERAGE:0.5:$day_steps:$realrows",   # day');
l.Add('				"RRA:AVERAGE:0.5:$week_steps:$realrows",  # week');
l.Add('				"RRA:AVERAGE:0.5:$month_steps:$realrows", # month');
l.Add('				"RRA:AVERAGE:0.5:$year_steps:$realrows",  # year');
l.Add('				"RRA:MAX:0.5:$day_steps:$realrows",   # day');
l.Add('				"RRA:MAX:0.5:$week_steps:$realrows",  # week');
l.Add('				"RRA:MAX:0.5:$month_steps:$realrows", # month');
l.Add('				"RRA:MAX:0.5:$year_steps:$realrows",  # year');
l.Add('				);');
l.Add('		$this_minute = $m;');
l.Add('	}');
l.Add('	elsif(-f $rrd) {');
l.Add('		$this_minute = RRDs::last($rrd) + $rrdstep;');
l.Add('	}');
l.Add('');
l.Add('	# virus rrd');
l.Add('	if(! -f $rrd_virus and ! $opt{''only-mail-rrd''}) {');
l.Add('		RRDs::create($rrd_virus, ''--start'', $m, ''--step'', $rrdstep,');
l.Add('				''DS:virus:ABSOLUTE:''.($rrdstep*2).'':0:U'',');
l.Add('				''DS:spam:ABSOLUTE:''.($rrdstep*2).'':0:U'',');
l.Add('				"RRA:AVERAGE:0.5:$day_steps:$realrows",   # day');
l.Add('				"RRA:AVERAGE:0.5:$week_steps:$realrows",  # week');
l.Add('				"RRA:AVERAGE:0.5:$month_steps:$realrows", # month');
l.Add('				"RRA:AVERAGE:0.5:$year_steps:$realrows",  # year');
l.Add('				"RRA:MAX:0.5:$day_steps:$realrows",   # day');
l.Add('				"RRA:MAX:0.5:$week_steps:$realrows",  # week');
l.Add('				"RRA:MAX:0.5:$month_steps:$realrows", # month');
l.Add('				"RRA:MAX:0.5:$year_steps:$realrows",  # year');
l.Add('				);');
l.Add('	}');
l.Add('	elsif(-f $rrd_virus and ! defined $rrd_virus) {');
l.Add('		$this_minute = RRDs::last($rrd_virus) + $rrdstep;');
l.Add('	}');
l.Add('');
l.Add('	$rrd_inited=1;');
l.Add('}');
l.Add('');
l.Add('sub process_line($)');
l.Add('{');
l.Add('	my $sl = shift;');
l.Add('	my $time = $sl->[0];');
l.Add('	my $prog = $sl->[2];');
l.Add('	my $text = $sl->[4];');
l.Add('');
l.Add('	if($prog =~ /^postfix\/(.*)/) {');
l.Add('		my $prog = $1;');
l.Add('		if($prog eq ''smtp'') {');
l.Add('			if($text =~ /\bstatus=sent\b/) {');
l.Add('				return if $opt{''ignore-localhost''} and');
l.Add('					$text =~ /\brelay=[^\s\[]*\[127\.0\.0\.1\]/;');
l.Add('				return if $opt{''ignore-host''} and');
l.Add('					$text =~ /\brelay=[^\s,]*$opt{''ignore-host''}/oi;');
l.Add('				event($time, ''sent'');');
l.Add('			}');
l.Add('			elsif($text =~ /\bstatus=bounced\b/) {');
l.Add('				event($time, ''bounced'');');
l.Add('			}');
l.Add('		}');
l.Add('		elsif($prog eq ''local'') {');
l.Add('			if($text =~ /\bstatus=bounced\b/) {');
l.Add('				event($time, ''bounced'');');
l.Add('			}');
l.Add('		}');
l.Add('		elsif($prog eq ''smtpd'') {');
l.Add('			if($text =~ /^[0-9A-Z]+: client=(\S+)/) {');
l.Add('				my $client = $1;');
l.Add('				return if $opt{''ignore-localhost''} and');
l.Add('					$client =~ /\[127\.0\.0\.1\]$/;');
l.Add('				return if $opt{''ignore-host''} and');
l.Add('					$client =~ /$opt{''ignore-host''}/oi;');
l.Add('				event($time, ''received'');');
l.Add('			}');
l.Add('			elsif($opt{''virbl-is-virus''} and $text =~ /^(?:[0-9A-Z]+: |NOQUEUE: )?reject: .*: 554.* blocked using virbl.dnsbl.bit.nl/) {');
l.Add('				event($time, ''virus'');');
l.Add('			}');
l.Add('			elsif($opt{''rbl-is-spam''} and $text    =~ /^(?:[0-9A-Z]+: |NOQUEUE: )?reject: .*: 554.* blocked using/) {');
l.Add('				event($time, ''spam'');');
l.Add('			}');
l.Add('			elsif($text =~ /^(?:[0-9A-Z]+: |NOQUEUE: )?reject: /) {');
l.Add('				event($time, ''rejected'');');
l.Add('			}');
l.Add('		}');
l.Add('		elsif($prog eq ''error'') {');
l.Add('			if($text =~ /\bstatus=bounced\b/) {');
l.Add('				event($time, ''bounced'');');
l.Add('			}');
l.Add('		}');
l.Add('		elsif($prog eq ''cleanup'') {');
l.Add('			if($text =~ /^[0-9A-Z]+: (?:reject|discard): /) {');
l.Add('				event($time, ''rejected'');');
l.Add('			}');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''sendmail'' or $prog eq ''sm-mta'') {');
l.Add('		if($text =~ /\bmailer=local\b/ ) {');
l.Add('			event($time, ''received'');');
l.Add('		}');
l.Add('                elsif($text =~ /\bmailer=relay\b/) {');
l.Add('                        event($time, ''received'');');
l.Add('                }');
l.Add('		elsif($text =~ /\bstat=Sent\b/ ) {');
l.Add('			event($time, ''sent'');');
l.Add('		}');
l.Add('                elsif($text =~ /\bmailer=esmtp\b/ ) {');
l.Add('                        event($time, ''sent'');');
l.Add('                }');
l.Add('		elsif($text =~ /\bruleset=check_XS4ALL\b/ ) {');
l.Add('			event($time, ''rejected'');');
l.Add('		}');
l.Add('		elsif($text =~ /\blost input channel\b/ ) {');
l.Add('			event($time, ''rejected'');');
l.Add('		}');
l.Add('		elsif($text =~ /\bruleset=check_rcpt\b/ ) {');
l.Add('			event($time, ''rejected'');');
l.Add('		}');
l.Add('                elsif($text =~ /\bstat=virus\b/ ) {');
l.Add('                        event($time, ''virus'');');
l.Add('                }');
l.Add('		elsif($text =~ /\bruleset=check_relay\b/ ) {');
l.Add('			if (($opt{''virbl-is-virus''}) and ($text =~ /\bivirbl\b/ )) {');
l.Add('				event($time, ''virus'');');
l.Add('			} elsif ($opt{''rbl-is-spam''}) {');
l.Add('				event($time, ''spam'');');
l.Add('			} else {');
l.Add('				event($time, ''rejected'');');
l.Add('			}');
l.Add('		}');
l.Add('		elsif($text =~ /\bsender blocked\b/ ) {');
l.Add('			event($time, ''rejected'');');
l.Add('		}');
l.Add('		elsif($text =~ /\bsender denied\b/ ) {');
l.Add('			event($time, ''rejected'');');
l.Add('		}');
l.Add('		elsif($text =~ /\brecipient denied\b/ ) {');
l.Add('			event($time, ''rejected'');');
l.Add('		}');
l.Add('		elsif($text =~ /\brecipient unknown\b/ ) {');
l.Add('			event($time, ''rejected'');');
l.Add('		}');
l.Add('		elsif($text =~ /\bUser unknown$/i ) {');
l.Add('			event($time, ''bounced'');');
l.Add('		}');
l.Add('		elsif($text =~ /\bMilter:.*\breject=55/ ) {');
l.Add('			event($time, ''rejected'');');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''amavis'' || $prog eq ''amavisd'') {');
l.Add('		if(   $text =~ /^\([0-9-]+\) (Passed|Blocked) SPAM(?:MY)?\b/) {');
l.Add('			event($time, ''spam''); # since amavisd-new-2004xxxx');
l.Add('		}');
l.Add('		elsif($text =~ /^\([0-9-]+\) (Passed|Not-Delivered)\b.*\bquarantine spam/) {');
l.Add('			event($time, ''spam''); # amavisd-new-20030616 and earlier');
l.Add('		}');
l.Add('		### UNCOMMENT IF YOU USE AMAVISD-NEW <= 20030616 WITHOUT QUARANTINE: ');
l.Add('		#elsif($text =~ /^\([0-9-]+\) Passed, .*, Hits: (\d*\.\d*)/) {');
l.Add('		#	if ($1 >= 5.0) {      # amavisd-new-20030616 without quarantine');
l.Add('		#		event($time, ''spam'');');
l.Add('		#	}');
l.Add('		#}');
l.Add('		elsif($text =~ /^\([0-9-]+\) (Passed |Blocked )?INFECTED\b/) {');
l.Add('			if($text !~ /\btag2=/) { # ignore new per-recipient log entry (2.2.0)');
l.Add('				event($time, ''virus'');# Passed|Blocked inserted since 2004xxxx');
l.Add('			}');
l.Add('		}');
l.Add('		elsif($text =~ /^\([0-9-]+\) (Passed |Blocked )?BANNED\b/) {');
l.Add('			if($text !~ /\btag2=/) {');
l.Add('			       event($time, ''virus'');');
l.Add('			}');
l.Add('		}');
l.Add('#		elsif($text =~ /^\([0-9-]+\) Passed|Blocked BAD-HEADER\b/) {');
l.Add('#		       event($time, ''badh'');');
l.Add('#		}');
l.Add('		elsif($text =~ /^Virus found\b/) {');
l.Add('			event($time, ''virus'');# AMaViS 0.3.12 and amavisd-0.1');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''vagatefwd'') {');
l.Add('		# Vexira antivirus (old)');
l.Add('		if($text =~ /^VIRUS/) {');
l.Add('			event($time, ''virus'');');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''hook'') {');
l.Add('		# Vexira antivirus');
l.Add('		if($text =~ /^\*+ Virus\b/) {');
l.Add('			event($time, ''virus'');');
l.Add('		}');
l.Add('		# Vexira antispam');
l.Add('		elsif($text =~ /\bcontains spam\b/) {');
l.Add('			event($time, ''spam'');');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''avgatefwd'' or $prog eq ''avmailgate.bin'') {');
l.Add('		# AntiVir MailGate');
l.Add('		if($text =~ /^Alert!/) {');
l.Add('			event($time, ''virus'');');
l.Add('		}');
l.Add('		elsif($text =~ /blocked\.$/) {');
l.Add('			event($time, ''virus'');');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''avcheck'') {');
l.Add('		# avcheck');
l.Add('		if($text =~ /^infected/) {');
l.Add('			event($time, ''virus'');');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''spamd'') {');
l.Add('		if($text =~ /^(?:spamd: )?identified spam/) {');
l.Add('			event($time, ''spam'');');
l.Add('		}');
l.Add('		# ClamAV SpamAssassin-plugin');
l.Add('		elsif($text =~ /(?:result: )?CLAMAV/) {');
l.Add('			event($time, ''virus'');');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''dspam'') {');
l.Add('		if($text =~ /spam detected from/) {');
l.Add('			event($time, ''spam'');');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''spamproxyd'') {');
l.Add('		if($text =~ /^\s*SPAM/ or $text =~ /^identified spam/) {');
l.Add('			event($time, ''spam'');');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''drweb-postfix'') {');
l.Add('		# DrWeb');
l.Add('		if($text =~ /infected/) {');
l.Add('			event($time, ''virus'');');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''BlackHole'') {');
l.Add('		if($text =~ /Virus/) {');
l.Add('			event($time, ''virus'');');
l.Add('		}');
l.Add('		if($text =~ /(?:RBL|Razor|Spam)/) {');
l.Add('			event($time, ''spam'');');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''MailScanner'') {');
l.Add('		if($text =~ /(Virus Scanning: Found)/ ) {');
l.Add('			event($time, ''virus'');');
l.Add('		}');
l.Add('		elsif($text =~ /Bounce to/ ) {');
l.Add('			event($time, ''bounced'');');
l.Add('		}');
l.Add('		elsif($text =~ /^Spam Checks: Found ([0-9]+) spam messages/) {');
l.Add('			my $cnt = $1;');
l.Add('			for (my $i=0; $i<$cnt; $i++) {');
l.Add('				event($time, ''spam'');');
l.Add('			}');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''clamsmtpd'') {');
l.Add('		if($text =~ /status=VIRUS/) {');
l.Add('			event($time, ''virus'');');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''clamav-milter'') {');
l.Add('		if($text =~ /Intercepted/) {');
l.Add('			event($time, ''virus'');');
l.Add('		}');
l.Add('	}');
l.Add('	# uncommment for clamassassin:');
l.Add('	#elsif($prog eq ''clamd'') {');
l.Add('	#	if($text =~ /^stream: .* FOUND$/) {');
l.Add('	#		event($time, ''virus'');');
l.Add('	#	}');
l.Add('	#}');
l.Add('	elsif ($prog eq ''smtp-vilter'') {');
l.Add('		if ($text =~ /clamd: found/) {');
l.Add('			event($time, ''virus'');');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''avmilter'') {');
l.Add('		# AntiVir Milter');
l.Add('		if($text =~ /^Alert!/) {');
l.Add('			event($time, ''virus'');');
l.Add('		}');
l.Add('		elsif($text =~ /blocked\.$/) {');
l.Add('			event($time, ''virus'');');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''bogofilter'') {');
l.Add('		if($text =~ /Spam/) {');
l.Add('			event($time, ''spam'');');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''filter-module'') {');
l.Add('		if($text =~ /\bspam_status\=(?:yes|spam)/) {');
l.Add('			event($time, ''spam'');');
l.Add('		}');
l.Add('	}');
l.Add('	elsif($prog eq ''sta_scanner'') {');
l.Add('		if($text =~ /^[0-9A-F]+: virus/) {');
l.Add('			event($time, ''virus'');');
l.Add('		}');
l.Add('	}');
l.Add('}');
l.Add('');
l.Add('sub event($$)');
l.Add('{');
l.Add('	my ($t, $type) = @_;');
l.Add('	update($t) and $sum{$type}++;');
l.Add('}');
l.Add('');
l.Add('# returns 1 if $sum should be updated');
l.Add('sub update($)');
l.Add('{');
l.Add('	my $t = shift;');
l.Add('	my $m = $t - $t%$rrdstep;');
l.Add('	init_rrd($m) unless $rrd_inited;');
l.Add('	return 1 if $m == $this_minute;');
l.Add('	return 0 if $m < $this_minute;');
l.Add('');
l.Add('	print "update $this_minute:$sum{sent}:$sum{received}:$sum{bounced}:$sum{rejected}:$sum{virus}:$sum{spam}\n" if $opt{verbose};');
l.Add('	RRDs::update $rrd, "$this_minute:$sum{sent}:$sum{received}:$sum{bounced}:$sum{rejected}" unless $opt{''only-virus-rrd''};');
l.Add('	RRDs::update $rrd_virus, "$this_minute:$sum{virus}:$sum{spam}" unless $opt{''only-mail-rrd''};');
l.Add('	if($m > $this_minute+$rrdstep) {');
l.Add('		for(my $sm=$this_minute+$rrdstep;$sm<$m;$sm+=$rrdstep) {');
l.Add('			print "update $sm:0:0:0:0:0:0 (SKIP)\n" if $opt{verbose};');
l.Add('			RRDs::update $rrd, "$sm:0:0:0:0" unless $opt{''only-virus-rrd''};');
l.Add('			RRDs::update $rrd_virus, "$sm:0:0" unless $opt{''only-mail-rrd''};');
l.Add('		}');
l.Add('	}');
l.Add('	$this_minute = $m;');
l.Add('	$sum{sent}=0;');
l.Add('	$sum{received}=0;');
l.Add('	$sum{bounced}=0;');
l.Add('	$sum{rejected}=0;');
l.Add('	$sum{virus}=0;');
l.Add('	$sum{spam}=0;');
l.Add('	return 1;');
l.Add('}');
l.Add('');
l.Add('main;');
l.Add('');
l.Add('__END__');
l.Add('');
l.Add('=head1 NAME');
l.Add('');
l.Add('mailgraph.pl - rrdtool frontend for mail statistics');
l.Add('');
l.Add('=head1 SYNOPSIS');
l.Add('');
l.Add('B<mailgraph> [I<options>...]');
l.Add('');
l.Add('     --man          show man-page and exit');
l.Add(' -h, --help         display this help and exit');
l.Add('     --version      output version information and exit');
l.Add(' -h, --help         display this help and exit');
l.Add(' -v, --verbose      be verbose about what you do');
l.Add(' -V, --version      output version information and exit');
l.Add(' -c, --cat          causes the logfile to be only read and not monitored');
l.Add(' -l, --logfile f    monitor logfile f instead of /var/log/syslog');
l.Add(' -t, --logtype t    set logfile''s type (default: syslog)');
l.Add(' -y, --year         starting year of the log file (default: current year)');
l.Add('     --host=HOST    use only entries for HOST (regexp) in syslog');
l.Add(' -d, --daemon       start in the background');
l.Add(' --daemon-pid=FILE  write PID to FILE instead of /var/run/mailgraph.pid');
l.Add(' --daemon-rrd=DIR   write RRDs to DIR instead of /var/log');
l.Add(' --daemon-log=FILE  write verbose-log to FILE instead of /var/log/mailgraph.log');
l.Add(' --ignore-localhost ignore mail to/from localhost (used for virus scanner)');
l.Add(' --ignore-host=HOST ignore mail to/from HOST regexp (used for virus scanner)');
l.Add(' --only-mail-rrd    update only the mail rrd');
l.Add(' --only-virus-rrd   update only the virus rrd');
l.Add(' --rrd-name=NAME    use NAME.rrd and NAME_virus.rrd for the rrd files');
l.Add(' --rbl-is-spam      count rbl rejects as spam');
l.Add(' --virbl-is-virus   count virbl rejects as viruses');
l.Add('');
l.Add('=head1 DESCRIPTION');
l.Add('');
l.Add('This script does parse syslog and updates the RRD database (mailgraph.rrd) in');
l.Add('the current directory.');
l.Add('');
l.Add('=head2 Log-Types');
l.Add('');
l.Add('The following types can be given to --logtype:');
l.Add('');
l.Add('=over 10');
l.Add('');
l.Add('=item syslog');
l.Add('');
l.Add('Traditional "syslog" (default)');
l.Add('');
l.Add('=item metalog');
l.Add('');
l.Add('Metalog (see http://metalog.sourceforge.net/)');
l.Add('');
l.Add('=back');
l.Add('');
l.Add('=head1 COPYRIGHT');
l.Add('');
l.Add('Copyright (c) 2000-2007 by ETH Zurich');
l.Add('Copyright (c) 2000-2007 by David Schweikert');
l.Add('');
l.Add('=head1 LICENSE');
l.Add('');
l.Add('This program is free software; you can redistribute it and/or modify');
l.Add('it under the terms of the GNU General Public License as published by');
l.Add('the Free Software Foundation; either version 2 of the License, or');
l.Add('(at your option) any later version.');
l.Add('');
l.Add('This program is distributed in the hope that it will be useful,');
l.Add('but WITHOUT ANY WARRANTY; without even the implied warranty of');
l.Add('MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the');
l.Add('GNU General Public License for more details.');
l.Add('');
l.Add('You should have received a copy of the GNU General Public License');
l.Add('along with this program; if not, write to the Free Software');
l.Add('Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.');
l.Add('');
l.Add('=head1 AUTHOR');
l.Add('');
l.Add('S<David Schweikert E<lt>david@schweikert.chE<gt>>');
l.Add('');
l.Add('=cut');
l.Add('');
l.Add('# vi: sw=8');
l.SaveToFile('/usr/sbin/mailgraph');
logs.OutputCmd('/bin/chmod 755 /usr/sbin/mailgraph');
l.free;
end;
//##############################################################################
procedure tmailgraph.mailgraphcgi();
var
l:TstringList;
begin
l:=TstringList.Create;
   l.Add('#!/usr/bin/perl');
l.Add('');
l.Add('# mailgraph -- a postfix statistics rrdtool frontend');
l.Add('# copyright (c) 2000-2005 David Schweikert <dws@ee.ethz.ch>');
l.Add('# released under the GNU General Public License');
l.Add('');
l.Add('use RRDs;');
l.Add('use POSIX qw(uname);');
l.Add('');
l.Add('my $VERSION = "1.12.01";');
l.Add('');
l.Add('my $host = (POSIX::uname())[1];');
l.Add('my $scriptname = ''mailgraph1.cgi'';');
l.Add('my $xpoints = 540;');
l.Add('my $points_per_sample = 3;');
l.Add('my $ypoints = 160;');
l.Add('my $ypoints_err = 96;');
l.Add('my $rrd ="/var/lib/mailgraph/mailgraph.rrd";');
l.Add('my $rrd_virus = ''/var/lib/mailgraph/mailgraph_virus.rrd'';');
l.Add('my $tmp_dir = ''/opt/artica/share/www/mailgraph'';');
l.Add('');
l.Add('my @graphs = (');
l.Add('	{ title => ''Day Graphs'',   seconds => 3600*24,        },');
l.Add('	{ title => ''Week Graphs'',  seconds => 3600*24*7,      },');
l.Add('	{ title => ''Month Graphs'', seconds => 3600*24*31,     },');
l.Add('	{ title => ''Year Graphs'',  seconds => 3600*24*365, },');
l.Add(');');
l.Add('');
l.Add('my %color = (');
l.Add('	sent     => ''000099'', # rrggbb in hex');
l.Add('	received => ''009900'',');
l.Add('	rejected => ''AA0000'', ');
l.Add('	bounced  => ''000000'',');
l.Add('	virus    => ''DDBB00'',');
l.Add('	spam     => ''999999'',');
l.Add(');');
l.Add('');
l.Add('sub rrd_graph(@)');
l.Add('{');
l.Add('	my ($range, $file, $ypoints, @rrdargs) = @_;');
l.Add('	my $step = $range*$points_per_sample/$xpoints;');
l.Add('	# choose carefully the end otherwise rrd will maybe pick the wrong RRA:');
l.Add('	my $end  = time; $end -= $end % $step;');
l.Add('	my $date = localtime(time);');
l.Add('	$date =~ s|:|\\:|g unless $RRDs::VERSION < 1.199908;');
l.Add('');
l.Add('	my ($graphret,$xs,$ys) = RRDs::graph($file,');
l.Add('		''--imgformat'', ''PNG'',');
l.Add('		''--width'', $xpoints,');
l.Add('		''--height'', $ypoints,');
l.Add('		''--start'', "-$range",');
l.Add('		''--end'', $end,');
l.Add('		''--vertical-label'', ''msgs/min'',');
l.Add('		''--lower-limit'', 0,');
l.Add('		''--units-exponent'', 0, # don''t show milli-messages/s');
l.Add('		''--lazy'',');
l.Add('		''--color'', ''SHADEA#ffffff'',');
l.Add('		''--color'', ''SHADEB#ffffff'',');
l.Add('		''--color'', ''BACK#ffffff'',');
l.Add('');
l.Add('		$RRDs::VERSION < 1.2002 ? () : (');
l.Add('			''--slope-mode''');
l.Add('		),');
l.Add('');
l.Add('		@rrdargs,');
l.Add('');
l.Add('		''COMMENT:[''.$date.'']\r'',');
l.Add('	);');
l.Add('');
l.Add('	my $ERR=RRDs::error;');
l.Add('	die "ERROR: $ERR\n" if $ERR;');
l.Add('}');
l.Add('');
l.Add('sub graph($$)');
l.Add('{');
l.Add('	my ($range, $file) = @_;');
l.Add('	my $step = $range*$points_per_sample/$xpoints;');
l.Add('	rrd_graph($range, $file, $ypoints,');
l.Add('		"DEF:sent=$rrd:sent:AVERAGE",');
l.Add('		"DEF:msent=$rrd:sent:MAX",');
l.Add('		"CDEF:rsent=sent,60,*",');
l.Add('		"CDEF:rmsent=msent,60,*",');
l.Add('		"CDEF:dsent=sent,UN,0,sent,IF,$step,*",');
l.Add('		"CDEF:ssent=PREV,UN,dsent,PREV,IF,dsent,+",');
l.Add('		"AREA:rsent#$color{sent}:Sent    ",');
l.Add('		''GPRINT:ssent:MAX:total\: %8.0lf msgs'',');
l.Add('		''GPRINT:rsent:AVERAGE:avg\: %5.2lf msgs/min'',');
l.Add('		''GPRINT:rmsent:MAX:max\: %4.0lf msgs/min\l'',');
l.Add('');
l.Add('		"DEF:recv=$rrd:recv:AVERAGE",');
l.Add('		"DEF:mrecv=$rrd:recv:MAX",');
l.Add('		"CDEF:rrecv=recv,60,*",');
l.Add('		"CDEF:rmrecv=mrecv,60,*",');
l.Add('		"CDEF:drecv=recv,UN,0,recv,IF,$step,*",');
l.Add('		"CDEF:srecv=PREV,UN,drecv,PREV,IF,drecv,+",');
l.Add('		"LINE2:rrecv#$color{received}:Received",');
l.Add('		''GPRINT:srecv:MAX:total\: %8.0lf msgs'',');
l.Add('		''GPRINT:rrecv:AVERAGE:avg\: %5.2lf msgs/min'',');
l.Add('		''GPRINT:rmrecv:MAX:max\: %4.0lf msgs/min\l'',');
l.Add('	);');
l.Add('}');
l.Add('');
l.Add('sub graph_err($$)');
l.Add('{');
l.Add('	my ($range, $file) = @_;');
l.Add('	my $step = $range*$points_per_sample/$xpoints;');
l.Add('	rrd_graph($range, $file, $ypoints_err,');
l.Add('		"DEF:rejected=$rrd:rejected:AVERAGE",');
l.Add('		"DEF:mrejected=$rrd:rejected:MAX",');
l.Add('		"CDEF:rrejected=rejected,60,*",');
l.Add('		"CDEF:drejected=rejected,UN,0,rejected,IF,$step,*",');
l.Add('		"CDEF:srejected=PREV,UN,drejected,PREV,IF,drejected,+",');
l.Add('		"CDEF:rmrejected=mrejected,60,*",');
l.Add('		"LINE2:rrejected#$color{rejected}:Rejected",');
l.Add('		''GPRINT:srejected:MAX:total\: %8.0lf msgs'',');
l.Add('		''GPRINT:rrejected:AVERAGE:avg\: %5.2lf msgs/min'',');
l.Add('		''GPRINT:rmrejected:MAX:max\: %4.0lf msgs/min\l'',');
l.Add('');
l.Add('		"DEF:bounced=$rrd:bounced:AVERAGE",');
l.Add('		"DEF:mbounced=$rrd:bounced:MAX",');
l.Add('		"CDEF:rbounced=bounced,60,*",');
l.Add('		"CDEF:dbounced=bounced,UN,0,bounced,IF,$step,*",');
l.Add('		"CDEF:sbounced=PREV,UN,dbounced,PREV,IF,dbounced,+",');
l.Add('		"CDEF:rmbounced=mbounced,60,*",');
l.Add('		"AREA:rbounced#$color{bounced}:Bounced ",');
l.Add('		''GPRINT:sbounced:MAX:total\: %8.0lf msgs'',');
l.Add('		''GPRINT:rbounced:AVERAGE:avg\: %5.2lf msgs/min'',');
l.Add('		''GPRINT:rmbounced:MAX:max\: %4.0lf msgs/min\l'',');
l.Add('');
l.Add('		"DEF:virus=$rrd_virus:virus:AVERAGE",');
l.Add('		"DEF:mvirus=$rrd_virus:virus:MAX",');
l.Add('		"CDEF:rvirus=virus,60,*",');
l.Add('		"CDEF:dvirus=virus,UN,0,virus,IF,$step,*",');
l.Add('		"CDEF:svirus=PREV,UN,dvirus,PREV,IF,dvirus,+",');
l.Add('		"CDEF:rmvirus=mvirus,60,*",');
l.Add('		"STACK:rvirus#$color{virus}:Viruses ",');
l.Add('		''GPRINT:svirus:MAX:total\: %8.0lf msgs'',');
l.Add('		''GPRINT:rvirus:AVERAGE:avg\: %5.2lf msgs/min'',');
l.Add('		''GPRINT:rmvirus:MAX:max\: %4.0lf msgs/min\l'',');
l.Add('');
l.Add('		"DEF:spam=$rrd_virus:spam:AVERAGE",');
l.Add('		"DEF:mspam=$rrd_virus:spam:MAX",');
l.Add('		"CDEF:rspam=spam,60,*",');
l.Add('		"CDEF:dspam=spam,UN,0,spam,IF,$step,*",');
l.Add('		"CDEF:sspam=PREV,UN,dspam,PREV,IF,dspam,+",');
l.Add('		"CDEF:rmspam=mspam,60,*",');
l.Add('		"STACK:rspam#$color{spam}:Spam    ",');
l.Add('		''GPRINT:sspam:MAX:total\: %8.0lf msgs'',');
l.Add('		''GPRINT:rspam:AVERAGE:avg\: %5.2lf msgs/min'',');
l.Add('		''GPRINT:rmspam:MAX:max\: %4.0lf msgs/min\l'',');
l.Add('	);');
l.Add('}');
l.Add('');
l.Add('');
l.Add('');
l.Add('');
l.Add('sub main()');
l.Add('{');
l.Add('');
l.Add('if(!-e $rrd){');
l.Add('	exit(0);');
l.Add('}');
l.Add('');
l.Add('my $uri = ''0-n'';');
l.Add('	$uri =~ s/\/[^\/]+$//;');
l.Add('	$uri =~ s/\//,/g;');
l.Add('	$uri =~ s/(\~|\%7E)/tilde,/g;');
l.Add('	mkdir $tmp_dir, 0777 unless -d $tmp_dir;');
l.Add('	mkdir "$tmp_dir", 0777 unless -d "$tmp_dir";');
l.Add('');
l.Add('	my $img = ''0-n'';');
l.Add('	if(defined $img and $img =~ /\S/) {');
l.Add('		if($img =~ /^(\d+)-n$/) {');
l.Add('			my $file = "$tmp_dir/mailgraph_$1.png";');
l.Add('			graph($graphs[$1]{seconds}, $file);');
l.Add('		}');
l.Add('		elsif($img =~ /^(\d+)-e$/) {');
l.Add('			my $file = "$tmp_dir/mailgraph_$1_err.png";');
l.Add('			graph_err($graphs[$1]{seconds}, $file);');
l.Add('		}');
l.Add('		else {');
l.Add('			die "ERROR: invalid argument\n";');
l.Add('		}');
l.Add('	}');
l.Add('main1();');
l.Add('main2();');
l.Add('main3();');
l.Add('main4();');
l.Add('main5();');
l.Add('}');
l.Add('');
l.Add('');
l.Add('');
l.Add('sub main1()');
l.Add('{');
l.Add('	my $uri = ''0-e'';');
l.Add('	$uri =~ s/\/[^\/]+$//;');
l.Add('	$uri =~ s/\//,/g;');
l.Add('	$uri =~ s/(\~|\%7E)/tilde,/g;');
l.Add('	mkdir $tmp_dir, 0777 unless -d $tmp_dir;');
l.Add('	mkdir "$tmp_dir", 0777 unless -d "$tmp_dir";');
l.Add('');
l.Add('	my $img = ''0-e'';');
l.Add('	if(defined $img and $img =~ /\S/) {');
l.Add('		if($img =~ /^(\d+)-n$/) {');
l.Add('			my $file = "$tmp_dir/mailgraph_$1.png";');
l.Add('			graph($graphs[$1]{seconds}, $file);');
l.Add('		}');
l.Add('		elsif($img =~ /^(\d+)-e$/) {');
l.Add('			my $file = "$tmp_dir/mailgraph_$1_err.png";');
l.Add('			graph_err($graphs[$1]{seconds}, $file);');
l.Add('		}');
l.Add('		else {');
l.Add('			die "ERROR: invalid argument\n";');
l.Add('		}');
l.Add('	}');
l.Add('}');
l.Add('');
l.Add('sub main2()');
l.Add('{');
l.Add('	my $uri = ''1-n'';');
l.Add('	$uri =~ s/\/[^\/]+$//;');
l.Add('	$uri =~ s/\//,/g;');
l.Add('	$uri =~ s/(\~|\%7E)/tilde,/g;');
l.Add('	mkdir $tmp_dir, 0777 unless -d $tmp_dir;');
l.Add('	mkdir "$tmp_dir", 0777 unless -d "$tmp_dir";');
l.Add('');
l.Add('	my $img = ''1-n'';');
l.Add('	if(defined $img and $img =~ /\S/) {');
l.Add('		if($img =~ /^(\d+)-n$/) {');
l.Add('			my $file = "$tmp_dir/mailgraph_$1.png";');
l.Add('			graph($graphs[$1]{seconds}, $file);');
l.Add('		}');
l.Add('		elsif($img =~ /^(\d+)-e$/) {');
l.Add('			my $file = "$tmp_dir/mailgraph_$1_err.png";');
l.Add('			graph_err($graphs[$1]{seconds}, $file);');
l.Add('		}');
l.Add('		else {');
l.Add('			die "ERROR: invalid argument\n";');
l.Add('		}');
l.Add('	}');
l.Add('}');
l.Add('');
l.Add('sub main4()');
l.Add('{');
l.Add('	my $uri = ''2-n'';');
l.Add('	$uri =~ s/\/[^\/]+$//;');
l.Add('	$uri =~ s/\//,/g;');
l.Add('	$uri =~ s/(\~|\%7E)/tilde,/g;');
l.Add('	mkdir $tmp_dir, 0777 unless -d $tmp_dir;');
l.Add('	mkdir "$tmp_dir", 0777 unless -d "$tmp_dir";');
l.Add('');
l.Add('	my $img = ''2-n'';');
l.Add('	if(defined $img and $img =~ /\S/) {');
l.Add('		if($img =~ /^(\d+)-n$/) {');
l.Add('			my $file = "$tmp_dir/mailgraph_$1.png";');
l.Add('			graph($graphs[$1]{seconds}, $file);');
l.Add('		}');
l.Add('		elsif($img =~ /^(\d+)-e$/) {');
l.Add('			my $file = "$tmp_dir/mailgraph_$1_err.png";');
l.Add('			graph_err($graphs[$1]{seconds}, $file);');
l.Add('		}');
l.Add('		else {');
l.Add('			die "ERROR: invalid argument\n";');
l.Add('		}');
l.Add('	}');
l.Add('}');
l.Add('sub main5()');
l.Add('{');
l.Add('	my $uri = ''3-n'';');
l.Add('	$uri =~ s/\/[^\/]+$//;');
l.Add('	$uri =~ s/\//,/g;');
l.Add('	$uri =~ s/(\~|\%7E)/tilde,/g;');
l.Add('	mkdir $tmp_dir, 0777 unless -d $tmp_dir;');
l.Add('	mkdir "$tmp_dir", 0777 unless -d "$tmp_dir";');
l.Add('');
l.Add('	my $img = ''3-n'';');
l.Add('	if(defined $img and $img =~ /\S/) {');
l.Add('		if($img =~ /^(\d+)-n$/) {');
l.Add('			my $file = "$tmp_dir/mailgraph_$1.png";');
l.Add('			graph($graphs[$1]{seconds}, $file);');
l.Add('		}');
l.Add('		elsif($img =~ /^(\d+)-e$/) {');
l.Add('			my $file = "$tmp_dir/mailgraph_$1_err.png";');
l.Add('			graph_err($graphs[$1]{seconds}, $file);');
l.Add('		}');
l.Add('		else {');
l.Add('			die "ERROR: invalid argument\n";');
l.Add('		}');
l.Add('	}');
l.Add('}');
l.Add('');
l.Add('sub main3()');
l.Add('{');
l.Add('	my $uri = ''1-e'';');
l.Add('	$uri =~ s/\/[^\/]+$//;');
l.Add('	$uri =~ s/\//,/g;');
l.Add('	$uri =~ s/(\~|\%7E)/tilde,/g;');
l.Add('	mkdir $tmp_dir, 0777 unless -d $tmp_dir;');
l.Add('	mkdir "$tmp_dir", 0777 unless -d "$tmp_dir";');
l.Add('');
l.Add('	my $img = ''1-e'';');
l.Add('	if(defined $img and $img =~ /\S/) {');
l.Add('		if($img =~ /^(\d+)-n$/) {');
l.Add('			my $file = "$tmp_dir/mailgraph_$1.png";');
l.Add('			graph($graphs[$1]{seconds}, $file);');
l.Add('		}');
l.Add('		elsif($img =~ /^(\d+)-e$/) {');
l.Add('			my $file = "$tmp_dir/mailgraph_$1_err.png";');
l.Add('			graph_err($graphs[$1]{seconds}, $file);');
l.Add('		}');
l.Add('		else {');
l.Add('			die "ERROR: invalid argument\n";');
l.Add('		}');
l.Add('	}');
l.Add('}');
l.Add('');
l.Add('main;');
l.Add('');
logs.OutputCmd('/bin/chmod 755 '+artica_path + '/bin/install/rrd/mailgraph1.cgi');
l.SaveToFile(artica_path + '/bin/install/rrd/mailgraph1.cgi');
end;
//##############################################################################
end.
