<?php
$GLOBALS["VERBOSE"]=false;
if(preg_match("#--verbose#",implode(" ",$argv))){$GLOBALS["VERBOSE"]=true;}if($GLOBALS["VERBOSE"]){ini_set('display_errors', 1);	ini_set('html_errors',0);ini_set('display_errors', 1);ini_set('error_reporting', E_ALL);}
if(posix_getuid()<>0){die("Cannot be used in web server mode\n\n");}
include_once(dirname(__FILE__).'/ressources/class.ldap.inc');
include_once(dirname(__FILE__)."/framework/frame.class.inc");

if($argv[1]=="syslog-deb"){checkDebSyslog();die();}
if($argv[1]=="dnsmasq"){dnsmasq_init_debian();die();}
if($argv[1]=="nscd"){nscd_init_debian();die();}

buildscript();
MONIT();
checkDebSyslog();
dnsmasq_init_debian();
nscd_init_debian();
function buildscript(){
if($GLOBALS["VERBOSE"]){echo "starting init.d config...\n";}
$sock=new sockets();
$LockLdapConfig=$sock->GET_INFO("LockLdapConfig");
if(!is_numeric($LockLdapConfig)){$LockLdapConfig=0;}
$OpenLDAPLogLevelCmdline=null;
if($LockLdapConfig==1){
	echo "slapd: [INFO] LockLdapConfig is set to 1, aborting..\n";
	return;
}
$ldaps=array();
$unix=new unix();
$slapd=$unix->find_program("slapd");
if(!is_file($slapd)){if(is_file('/usr/lib/openldap/slapd')){$slapd='/usr/lib/openldap/slapd';}} 

$slapadd=$unix->find_program("slapadd");
$slapcat=$unix->find_program("slapcat");
$slapindex=$unix->find_program("slapindex");
$slaptest=$unix->find_program("slaptest");
$OpenLDAPLogLevel=$sock->GET_INFO("OpenLDAPLogLevel");
$EnableNonEncryptedLdapSession=$sock->GET_INFO("EnableNonEncryptedLdapSession");
$OpenLDAPDisableSSL=$sock->GET_INFO("OpenLDAPDisableSSL");
if(!is_numeric($EnableNonEncryptedLdapSession)){$EnableNonEncryptedLdapSession=1;}
$phpldapadmin=null;
if(!is_numeric($OpenLDAPDisableSSL)){$OpenLDAPDisableSSL=0;}
$ZARAFA_INSTALLED=0;
if($GLOBALS["VERBOSE"]){echo "users=new usersMenus();\n";}
$users=new usersMenus();
if($GLOBALS["VERBOSE"]){echo "users=new usersMenus() done...;\n";}
if(!is_dir("/var/lib/ldap")){@mkdir("/var/lib/ldap",0755,true);}
if(!is_dir("/var/run/slapd")){@mkdir("/var/run/slapd",0755,true);}

if(!is_numeric($OpenLDAPLogLevel)){$OpenLDAPLogLevel=0;}
if($OpenLDAPLogLevel<>0){
	$OpenLDAPLogLevelCmdline=" -d $OpenLDAPLogLevel";
}

if(!$unix->IS_IPADDR_EXISTS("127.0.0.1")){
	shell_exec($unix->find_program("ifconfig")." lo 127.0.0.1 netmask 255.0.0.0 up >/dev/null 2>&1");
}
$ldap[]="ldap://127.0.0.1:389/";
if(is_file("/etc/artica-postfix/settings/Daemons/LdapListenIPAddr")){
	$LdapListenIPAddr=explode("\n",@file_get_contents("/etc/artica-postfix/settings/Daemons/LdapListenIPAddr"));
	 while (list ($num, $ipaddr) = each ($LdapListenIPAddr)){
	 	$ipaddr=trim($ipaddr);
	 	if($ipaddr==null){continue;}
	 	echo "slapd: [INFO] slapd listen `$ipaddr`n";
	 	if($EnableNonEncryptedLdapSession==0){$ldaps[]="ldaps://$ipaddr/";}
	 	$ldap[]="ldap://$ipaddr:389/";  
	 }
	
	
	
}
if(count($ldaps)>0){
	$SLAPD_SERVICESSSL=" ".@implode(" ", $ldaps);
}
$SLAPD_SERVICES=@implode(" ", $ldap).$SLAPD_SERVICESSSL;
if($users->ZARAFA_INSTALLED){$ZARAFA_INSTALLED=1;}
$DB_RECOVER_BIN=$unix->LOCATE_DB_RECOVER();
$DB_ARCHIVE_BIN=$unix->LOCATE_DB_ARCHIVE();
$rm=$unix->find_program("rm");
$SLAPD_CONF=$unix->SLAPD_CONF_PATH();
$SLAPD_PID_FILE=$unix->SLAPD_PID_PATH();
$php5=$unix->LOCATE_PHP5_BIN();
$tar=$unix->find_program("tar");
$pidofbin=$unix->find_program("pidof");
$mebin=__FILE__;
$suffix=@trim(@file_get_contents("/etc/artica-postfix/ldap_settings/suffix"));
echo "slapd: [INFO] slapd `$slapd`\n";
echo "slapd: [INFO] db_recover `$DB_RECOVER_BIN`\n";
echo "slapd: [INFO] db_archive `$DB_ARCHIVE_BIN`\n";
echo "slapd: [INFO] config `$SLAPD_CONF`\n";
echo "slapd: [INFO] pid `$SLAPD_PID_FILE`\n";
echo "slapd: [INFO] services `$SLAPD_SERVICES`\n";
echo "slapd: [INFO] pidof `$pidofbin`\n";

if(is_dir("/usr/share/phpldapadmin/config")){
	$phpldapadmin="	$php5 ".dirname(__FILE__)."/exec.phpldapadmin.php --build >/dev/null 2>&1";
}

$kernel_tuning="$php5 ".dirname(__FILE__)."/exec.kernel-tuning.php >/dev/null 2>&1";

if($GLOBALS["VERBOSE"]){echo "-> ARRAY;\n";}

$f[]="#!/bin/sh";
$f[]="";
$f[]="#====================================================================";
$f[]="# Start/stop script for OpenLDAP (2.2 minimum)";
$f[]="# (http://www.openldap.org).";
$f[]="# Use BerkeleyDB utilities and save data in LDIF format.";
$f[]="# ";
$f[]="# chkconfig: 2345 27 73";
$f[]="# description: OpenLDAP";
$f[]="#";
$f[]="### BEGIN INIT INFO";
$f[]="# Provides:          slapd";
$f[]="# Required-Start:    \$remote_fs \$syslog";
$f[]="# Required-Stop:     \$remote_fs \$syslog";
$f[]="# Should-Start:      \$network \$time";
$f[]="# Should-Stop:       \$network \$time";
$f[]="# Default-Start:     2 3 4 5";
$f[]="# Default-Stop:      0 1 6";
$f[]="# Short-Description: OpenLDAP";
$f[]="# Description:       OpenLDAP init script provided by LTB-project.org";
$f[]="### END INIT INFO";
$f[]="#";
$f[]="# Copyright (C) 2008 Jonathan CLARKE";
$f[]="# Copyright (C) 2007 Olivier LI-KIANG-CHEONG";
$f[]="# Copyright (C) 2007 Thomas CHEMINEAU";
$f[]="# Copyright (C) 2005 Sebastien BAHLOUL ";
$f[]="# Copyright (C) 2005 Raphael OUAZANA ";
$f[]="# Copyright (C) 2005 Clement OUDOT";
$f[]="# Copyright (C) 2010 LTB-project.org";
$f[]="#";
$f[]="# This program is free software; you can redistribute it and/or";
$f[]="# modify it under the terms of the GNU General Public License";
$f[]="# as published by the Free Software Foundation; either version 2";
$f[]="# of the License, or (at your option) any later version.";
$f[]="#";
$f[]="# This program is distributed in the hope that it will be useful,";
$f[]="# but WITHOUT ANY WARRANTY; without even the implied warranty of";
$f[]="# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the";
$f[]="# GNU General Public License for more details.";
$f[]="#";
$f[]="# GPL License: http://www.gnu.org/licenses/gpl.txt";
$f[]="#";
$f[]="#====================================================================";
$f[]="";
$f[]="#====================================================================";
$f[]="# Version";
$f[]="#====================================================================";
$f[]="VERSION=\"1.8\"";
$f[]="";
$f[]="#====================================================================";
$f[]="# Default parameters (if /etc/default/{script_name} is not present)";
$f[]="#====================================================================";
$f[]="# IP and port to listen (use wildcard * in IP to listen on all interfaces)";
$f[]="IP=\"*\"";
$f[]="SSLIP=\"*\"";
$f[]="PORT=\"389\"";
$f[]="SSLPORT=\"636\"";
$f[]="";
$f[]="# OpenLDAP directory and files";
$f[]="SLAPD_PATH=\"/usr/local/openldap\"";
$f[]="SLAPD_PID_FILE=\"$SLAPD_PID_FILE\"";
$f[]="SLAPD_CONF=\"$SLAPD_CONF\"";
$f[]="SLAPD_CONF_DIR=\"\"";
$f[]="SLAPD_SERVICES=\"$SLAPD_SERVICES\"";
$f[]="SLAPD_PARAMS=\"\"";
$f[]="SLAPD_BIN=\"$slapd\"";
$f[]="SLAPD_USER=\"root\"";
$f[]="SLAPD_GROUP=\"root\"";
$f[]="SLAPD_SYSLOG_LOCAL_USER=\"local4\"";
$f[]="";
$f[]="DATA_PATH=\"/var/lib/ldap\"";
$f[]="";
$f[]="SLAPADD_BIN=\"$slapadd\"";
$f[]="SLAPCAT_BIN=\"$slapcat\"";
$f[]="SLAPINDEX_BIN=\"$slapindex\"";
$f[]="SLAPTEST_BIN=\"$slaptest\"";
$f[]="PIDOF_BIN=\"$pidofbin\"";
$f[]="";
$f[]="SLURPD_ACTIVATE=\"0\"";
$f[]="SLURPD_PID_FILE=\"\$SLAPD_PATH/var/run/slurpd.pid\"";
$f[]="SLURPD_PARAMS=\"\"";
$f[]="SLURPD_BIN=\"\$SLAPD_PATH/libexec/slurpd\"";
$f[]="";
$f[]="# BerkeleyDB directory and files";
$f[]="BDB_PATH=\"/usr/local/berkeleydb\"";
$f[]="DB_ARCHIVE_BIN=\"$DB_ARCHIVE_BIN\"";
$f[]="DB_RECOVER_BIN=\"$DB_RECOVER_BIN\"";
$f[]="RECOVER_AT_STARTUP=\"0\" # 0 for OpenLDAP 2.3.x";
$f[]="";
$f[]="# Backup";
$f[]="BACKUP_AT_SHUTDOWN=\"0\"";

$f[]="BACKUP_PATH=\"/opt/artica/ldap-backup\"";
$f[]="BACKUP_SUFFIX=\"`date +%Y-%m-%d-%H`.ldif\"";
$f[]="BACKUP_CONTAINER=\"`date +%Y-%m-%d-%H`.tar.gz\"";
$f[]="BACKUP_COMPRESS_EXT=\"tar.gz\" # gz, bz2, ...";
$f[]="BACKUP_COMPRESS_BIN=\"$tar\" # /bin/gzip, /bin/bzip2, ...";
$f[]="BACKUP_UNCOMPRESS_BIN=\"echo\" # /bin/gunzip, /bin/bunzip2, ...";
$f[]="";
$f[]="# Other";
$f[]="TIMEOUT=\"60\"      # Max time to stop process";
$f[]="FD_LIMIT=\"2048\"   # Max file descriptor";
$f[]="DEBUG_LEVEL=\"$OpenLDAPLogLevel\" # Debug loglevel";
$f[]="SPECIAL_QUOTE=\"1\" # Quote some command line parameters (eg: LDAP filters)";
$f[]="ZARAFA_INSTALLED=\"$ZARAFA_INSTALLED\"";
$f[]="";
$f[]="# Script specific";
$f[]="PROG_NAME=`basename \$0 | sed 's/^[KS][0-9][0-9]//'` # For nice messages";
$f[]="OS=`uname -s`   # To adapt message printing";
$f[]="MYUID=`id -u`     # For UNIX compatibility => modify this command";
$f[]="MYGID=`id -g`     # For UNIX compatibility => modify this command";
$f[]="PS_COMMAND=\"ps -efww\"	# This ensures full width for ps output but doesn't work on Solaris - use \"ps -ef\"";
$f[]="";
$f[]="# Return functions' value";
$f[]="RETVAL=\"\"";
$f[]="";
$f[]="#====================================================================";
$f[]="# Message function";
$f[]="#====================================================================";
$f[]="message() {";
$f[]="	# \$1: syslog level";
$f[]="	# \$2: message";
$f[]="";
$f[]="	# Log to syslog";
$f[]="	logger -p \"\$SLAPD_SYSLOG_LOCAL_USER.\$1\" -t \$PROG_NAME -i \"\$2\"";
$f[]="";
$f[]="	# Output to console";
$f[]="	if [ \"\$1\" = \"alert\" ]";
$f[]="	then";
$f[]="		echo \"\$PROG_NAME: \$2\">&2";
$f[]="	else";
$f[]="		echo \"\$PROG_NAME: \$2\">&1";
$f[]="	fi";
$f[]="}";
$f[]="";
$f[]="#====================================================================";
$f[]="# Specific functions";
$f[]="#====================================================================";
$f[]="";
$f[]="get_confvalues() {";
$f[]="	# \$1: parameter";
$f[]="	# \$RETVAL: list of values";
$f[]="";
$f[]="        # Search in conffile or backconfig";
$f[]="	if [ -n \"\$SLAPD_CONF_DIR\" ]; then";
$f[]="        case \$1 in";
$f[]="	directory)";
$f[]="		backconfig_get_values \"olcDbDirectory\"";
$f[]="	;;";
$f[]="	suffix)";
$f[]="		backconfig_get_values \"olcSuffix\" \"(|(objectclass=olcBdbConfig)(objectclass=olcHdbConfig)(objectclass=olcMdbConfig))\"";
$f[]="	;;";
$f[]="        *)";
$f[]="		RETVAL=\"\"";
$f[]="	;;";
$f[]="	esac";
$f[]="        else";
$f[]="		conffile_get_values \$1";
$f[]="	fi";
$f[]="}";
$f[]="";
$f[]="conffile_get_values() {";
$f[]="	# \$1: parameter in slapd.conf";
$f[]="	# \$RETVAL: list of values";
$f[]="";
$f[]="	list=`sed \"s/\r//\" \$SLAPD_CONF | grep \"^\$1[[:space:]]\" | grep -v '^#' | sed \"s/\$1[[:space:]]*//\" | sed \"s/ /#20/g\"| sed -e 's/\"//g'`";
$f[]="";
$f[]="	if [ \"\$list\" ]; then";
$f[]="		RETVAL=\"\$list\"";
$f[]="	else";
$f[]="		RETVAL=\"\"";
$f[]="	fi";
$f[]="}";
$f[]="";
$f[]="backconfig_get_values() {";
$f[]="	# \$1: parameter";
$f[]="	# \$2: LDAP filter (optional)";
$f[]="	# \$RETVAL: list of returned values";
$f[]="";
$f[]="	if [ -z \"\$SLAPD_CONF_DIR\" -o ! -d \"\$SLAPD_CONF_DIR\" ]";
$f[]="	then";
$f[]="		message \"alert\" \"[ALERT] Could not parse configuration directory\"";
$f[]="		RETVAL=\"\"";
$f[]="		return";
$f[]="	fi";
$f[]="";
$f[]="	slapcat_cmd=\"\$SLAPCAT_BIN -F \$SLAPD_CONF_DIR -b cn=config\"";
$f[]="	if [ -n \"\$2\" ]";
$f[]="	then";
$f[]="		if [ \$SPECIAL_QUOTE -eq 1 ]; then";
$f[]="			slapcat_cmd=\"\$slapcat_cmd -a '\$2'\"";
$f[]="		else";
$f[]="			slapcat_cmd=\"\$slapcat_cmd -a \$2\"";
$f[]="		fi";
$f[]="	fi";
$f[]="	if [ -z \"\$SU\" ]";
$f[]="	then";
$f[]="		list=`\$slapcat_cmd | perl -p0e 's/\n //g' | grep \"^\$1:\" | sed \"s/\$1: //\" | sed \"s/ /#20/g\"`";
$f[]="	else";
$f[]="		list=`\$SU \"\$slapcat_cmd\" | perl -p0e 's/\n //g' | grep \"^\$1:\" | sed \"s/\$1: //\" | sed \"s/ /#20/g\"`";
$f[]="	fi";
$f[]="";
$f[]="	if [ -n \"\$list\" ]; then";
$f[]="		RETVAL=\"\$list\"";
$f[]="	else";
$f[]="		RETVAL=\"\"";
$f[]="	fi";
$f[]="}";
$f[]="";
$f[]="";
$f[]="#====================================================================";
$f[]="# Load specific parameters";
$f[]="#====================================================================";
$f[]="if [ -f /etc/default/\$PROG_NAME ]";
$f[]="then";
$f[]="$rm /etc/default/\$PROG_NAME";
$f[]="fi";
$f[]="if [ -f /etc/default/\$PROG_NAME ]";
$f[]="then";
$f[]="	. /etc/default/\$PROG_NAME";
$f[]="	message \"info\" \"[INFO] Using /etc/default/\$PROG_NAME for configuration\"";
$f[]="else";
$f[]="	message \"info\" \"[INFO] Using built-in configuration\"";
$f[]="fi";
$f[]="";
$f[]="#====================================================================";
$f[]="# Initiate 'su' command";
$f[]="#====================================================================";
$f[]="if [ \"\$SLAPD_USER\" -a \$MYUID -eq 0 ]";
$f[]="then";
$f[]="	SU=\"su -s /bin/bash - \$SLAPD_USER -c \"";
$f[]="fi";
$f[]="";
$f[]="#====================================================================";
$f[]="# Initial checks";
$f[]="#====================================================================";
$f[]="";
$f[]="# Make sure the pidfile directory exists with correct permissions";
$f[]="piddir=`dirname \"\$SLAPD_PID_FILE\"`";
$f[]="if [ ! -d \"\$piddir\" ]; then";
$f[]="	mkdir -p \"\$piddir\"";
$f[]="	[ -z \"\$SLAPD_USER\" ] || chown -R \"\$SLAPD_USER\" \"\$piddir\"";
$f[]="	[ -z \"\$SLAPD_GROUP\" ] || chgrp -R \"\$SLAPD_GROUP\" \"\$piddir\"";
$f[]="fi";
$f[]="";
$f[]="# Rights to execute binaries";
$f[]="for i in \"\$SLAPD_BIN\" \"\$SLAPCAT_BIN\" \"\$SLAPINDEX_BIN\" \"\$SLAPTEST_BIN\"";
$f[]="do";
$f[]="	if [ ! -x \$i ]";
$f[]="	then";
$f[]="		message \"alert\" \"[ALERT] Can't execute \$i\"";
$f[]="		exit 1";
$f[]="	fi";
$f[]="done";
$f[]="";
$f[]="# Rights to read configuration";

$f[]="if [ \"\$SLAPD_CONF\" -a ! -r \"\$SLAPD_CONF\" ]";
$f[]="then";
$f[]="	/usr/share/artica-postfix/bin/artica-install --slapdconf";
$f[]="fi";
$f[]="";
$f[]="if [ \"\$SLAPD_CONF\" -a ! -r \"\$SLAPD_CONF\" ]";
$f[]="then";
$f[]="	message \"alert\" \"[ALERT] Can't read \$SLAPD_CONF\"";
$f[]="	exit 1";
$f[]="fi";
$f[]="";
$f[]="# Activate slurpd? (get from configuration file)";
$f[]="if [ -n \"\$SLAPD_CONF\" -a ! -d \"\$SLAPD_CONF_DIR\" ]; then";
$f[]="	SLURPD_ACTIVATE=`grep \"^replica\" \$SLAPD_CONF | wc -l`";
$f[]="fi";
$f[]="";
$f[]="# Right to execute slurpd, if used";
$f[]="if [ \$SLURPD_ACTIVATE -ne 0 -a ! -x \"\$SLURPD_BIN\" ]";
$f[]="then";
$f[]="	message \"alert\" \"[ALERT] Can't execute \$SLURPD_BIN\"";
$f[]="	exit 1";
$f[]="fi";
$f[]="";
$f[]="# Is there a configuration directory ?";
$f[]="if [ \"\$SLAPD_CONF_DIR\" -a ! -w \"\$SLAPD_CONF_DIR\" ]";
$f[]="then";
$f[]="	message \"alert\" \"[ALERT] Can't write to configuration directory \$SLAPD_CONF_DIR\"";
$f[]="	exit 1";
$f[]="fi";
$f[]="";
$f[]="# Are you root (for port < 1024)?";
$f[]="if [ \$PORT -lt 1024 -a \$MYUID -ne 0 ]";
$f[]="then";
$f[]="	message \"alert\" \"[ALERT] Only root can launch OpenLDAP on port \$PORT\"";
$f[]="	exit 1";
$f[]="fi";
$f[]="";
$f[]="#====================================================================";
$f[]="# Functions";
$f[]="#====================================================================";
$f[]="start_slapd() {";
$f[]="";
$f[]="	# \$1: debug level";
$f[]="	";
$f[]="	if [ -f /etc/artica-postfix/STOP-LDAP ]";
$f[]="	then";
$f[]="		message \"info\" \"[ALERT] OpenLDAP /etc/artica-postfix/STOP-LDAP exists, stopping\"";
$f[]="		exit 0";
$f[]="	fi   ";
$f[]="	# Exit 0 if slapd is already running";
$f[]="	# LSB compliance";
$f[]="	slapd_status";
$f[]="	";
$f[]="	if [ \$? -eq 0 ]";
$f[]="	then ";
$f[]="		message \"info\" \"[ OK ] OpenLDAP is already running\"";
$f[]="		exit 0";
$f[]="	fi   ";
$f[]="";
$f[]="	# Check if db_recover is required";
$f[]="	if [ \$RECOVER_AT_STARTUP -eq 1 ]";
$f[]="	then";
$f[]="		db_recover";
$f[]="	else";
$f[]="		message \"info\" \"[INFO] No db_recover done\"	";
$f[]="	fi";
$f[]="";
$f[]="	# Start message";
$f[]="	message \"info\" \"[INFO] Tuning the kernel...\"";
$f[]="$kernel_tuning";
if($phpldapadmin<>null){
	$f[]="	message \"info\" \"[INFO] Configuring phpldapadmin...\"";	
	$f[]=$phpldapadmin;
}

$f[]="	message \"info\" \"[INFO] setup nsswitch\"";	
$f[]="	/usr/share/artica-postfix/bin/artica-install --nsswitch >/dev/null 2>&1 &";
$f[]="	message \"info\" \"[INFO] setup slapd\"";
$f[]="	/usr/share/artica-postfix/bin/artica-install --slapdconf";
$f[]="	message \"info\" \"[INFO] setup init.d\"";
$f[]="	$php5 $mebin";
$f[]="	message \"info\" \"[INFO] Launching OpenLDAP...\"";
$f[]="";
$f[]="	# File descriptor limit, only for root";
$f[]="	if [ \$MYUID -eq 0 ]";
$f[]="	then";
$f[]="		ulimit -HSd unlimited";
$f[]="		if [ \$? -eq 0 ]";
$f[]="		then";
$f[]="			message \"info\" \"[ OK ] File descriptor limit set to unlimited\"";
$f[]="		else";
$f[]="			message \"warning\" \"[WARNING] Fail to set file descriptor limit to \$FD_LIMIT, going to next step\"";
$f[]="		fi";
$f[]="	else";
$f[]="		message \"info\" \"[INFO] File descriptor limit not modified (require root privileges)\"";
$f[]="	fi";
$f[]="";
$f[]="	# Parameters";
$f[]="	if [ \"\$SLAPD_CONF_DIR\" ]";
$f[]="	then";
$f[]="		SLAPD_PARAMS=\"\$SLAPD_PARAMS -F \$SLAPD_CONF_DIR\"";
$f[]="	elif [ \"\$SLAPD_CONF\" ]";
$f[]="	then";
$f[]="		SLAPD_PARAMS=\"\$SLAPD_PARAMS -f \$SLAPD_CONF\"";
$f[]="	fi";
$f[]="";
$f[]="	if [  \"\$SLAPD_USER\" -a \$MYUID -eq 0 ]";
$f[]="	then";
$f[]="		SLAPD_PARAMS=\"\$SLAPD_PARAMS -u \$SLAPD_USER\"";
$f[]="	fi";
$f[]="";
$f[]="	if [ \"\$SLAPD_GROUP\" -a \$MYGID -eq 0 ]";
$f[]="	then";
$f[]="		SLAPD_PARAMS=\"\$SLAPD_PARAMS -g \$SLAPD_GROUP\"";
$f[]="	fi";
$f[]="";
$f[]="	if [ \"\$SLAPD_SYSLOG_LOCAL_USER\" ]";
$f[]="	then";
$f[]="		SLAPD_PARAMS=\"\$SLAPD_PARAMS -l \$SLAPD_SYSLOG_LOCAL_USER\" ";
$f[]="	fi";
$f[]="";
$f[]="	# It's time to start slapd";
$f[]="";
$f[]="	if [ -n \"\$1\" ]; then";
$f[]="		message \"info\" \"[ OK ] \$SLAPD_BIN -h \$SLAPD_SERVICES \$SLAPD_PARAMS\"";
$f[]="		\$SLAPD_BIN -h \"\$SLAPD_SERVICES\" \$SLAPD_PARAMS -d \$1";
$f[]="	else";
$f[]="		message \"info\" \"[ OK ] \$SLAPD_BIN -h \$SLAPD_SERVICES \$SLAPD_PARAMS\"";
$f[]="		\$SLAPD_BIN -h \"\$SLAPD_SERVICES\" \$SLAPD_PARAMS";
$f[]="		sleep 1";
$f[]="";
$f[]="		# Presence of PID file";
$f[]="		if [ ! -r \$SLAPD_PID_FILE ]";
$f[]="		then";
$f[]="			message \"alert\" \"[ALERT] No PID file for OpenLDAP\"";
$f[]="			message \"alert\" \"[ALERT] run the command with -d 16383 to see why...\"";
$f[]="			exit 1";
$f[]="		fi";
$f[]="";
$f[]="		# Is slapd launched?";
$f[]="		PID=`cat \$SLAPD_PID_FILE`";
$f[]="		if [ ! -e /proc/\$PID ]";
$f[]="		then";
$f[]="			message \"alert\" \"[ALERT] OpenLDAP not running\"";
$f[]="			message \"alert\" \"[ALERT] run this command `\$SLAPD_BIN -d 16383` to see why...\"";
$f[]="			exit 1";
$f[]="		else";
$f[]="			message \"info\" \"[ OK ] OpenLDAP started\"";
$f[]="			if [ \$ZARAFA_INSTALLED -eq 1 ]";
$f[]="				then";
$f[]="					message \"info\" \"[ OK ] Start Zarafa server\"";
$f[]="					/etc/init.d/artica-postfix start zarafa";
$f[]="			fi";
$f[]="		fi";
$f[]="	fi";
$f[]="}";
$f[]="";
$f[]="#====================================================================";
$f[]="# start_slurpd";
$f[]="#====================================================================";
$f[]="start_slurpd() {";
$f[]="	if [ \$SLURPD_ACTIVATE -eq 0 ]";
$f[]="	then";
$f[]="		return 1";
$f[]="	fi";
$f[]="";
$f[]="	# Start message";
$f[]="	message \"info\" \"[INFO] Launching OpenLDAP replication...\"";
$f[]="";
$f[]="	# Parameters";
$f[]="	if [ \"\$SLAPD_CONF_DIR\" ]";
$f[]="	then";
$f[]="		SLAPD_PARAMS=\"\$SLAPD_PARAMS -F \$SLAPD_CONF_DIR\"";
$f[]="	elif [ \"\$SLAPD_CONF\" ]";
$f[]="	then";
$f[]="		SLAPD_PARAMS=\"\$SLAPD_PARAMS -f \$SLAPD_CONF\"";
$f[]="	fi";
$f[]="";
$f[]="	# It's time to start slurpd";
$f[]="	if [ -z \"\$SU\" ]";
$f[]="	then";
$f[]="		\$SLURPD_BIN \$SLURPD_PARAMS";
$f[]="	else";
$f[]="		\$SU \"\$SLURPD_BIN \$SLURPD_PARAMS\"";
$f[]="	fi";
$f[]="	sleep 1";
$f[]="";
$f[]="	# Presence of PID file";
$f[]="	if [ ! -r \$SLURPD_PID_FILE ]";
$f[]="	then";
$f[]="		message \"alert\" \"[ALERT] No PID file for slurpd\"";
$f[]="		exit 1";
$f[]="	fi";
$f[]="";
$f[]="	# Is slurpd launched?";
$f[]="	PID=`cat \$SLURPD_PID_FILE`";
$f[]="	if [ ! -e /proc/\$PID ]";
$f[]="	then";
$f[]="		message \"alert\" \"[ALERT] slurpd not running\"";
$f[]="		exit 1";
$f[]="	else";
$f[]="		message \"info\" \"[ OK ] OpenLDAP replication started\"";
$f[]="	fi";
$f[]="}";
$f[]="";
$f[]="stop_slapd() {";
$f[]="	# Stop message";
$f[]="	message \"info\" \"[INFO] Halting OpenLDAP...\"";
$f[]="";
$f[]="	# Presence of PID file";
$f[]="	if [ ! -r \$SLAPD_PID_FILE ]";
$f[]="	then";
$f[]="		message \"info\" \"[INFO] Can't read PID file, to stop OpenLDAP try: \$0 forcestop\"";
$f[]="		return 1";
$f[]="	else";
$f[]="		if [ \$ZARAFA_INSTALLED -eq 1 ]";
$f[]="		then";
$f[]="			message \"info\" \"[INFO] Stop Zarafa server\"";
$f[]="			/etc/init.d/artica-postfix stop zarafa";
$f[]="		fi";
$f[]="		PID=`cat \$SLAPD_PID_FILE`";
$f[]="		kill -INT \$PID";
$f[]="";
$f[]="		# Waiting loop";
$f[]="		i=0";
$f[]="		while [ -e /proc/\$PID ]";
$f[]="		do";
$f[]="			if [ \$i -eq \$TIMEOUT ]";
$f[]="			then";
$f[]="				# Timeout";
$f[]="				message \"alert\" \"[ALERT] OpenLDAP still running (PID \$PID), trying: \$0 forcestop\"";
$f[]="				forcestop";
$f[]="				exit 1";
$f[]="			fi";
$f[]="			i=`expr \$i + 1`";
$f[]="			sleep 1";
$f[]="		done";
$f[]="";
$f[]="		message \"info\" \"[ OK ] OpenLDAP stopped after \$i seconds\"";
$f[]="	fi";
$f[]="";
$f[]="	# Backup if necessary";
$f[]="	if [ \$BACKUP_AT_SHUTDOWN -eq 1 ]";
$f[]="	then";
$f[]="		backup";
$f[]="	else";
$f[]="		message \"info\" \"[INFO] No data backup done\"";
$f[]="	fi";
$f[]="}";
$f[]="";
$f[]="#====================================================================";
$f[]="# stop_slurpd";
$f[]="#====================================================================";
$f[]="stop_slurpd() {";
$f[]="	# Desactivate slurpd?";
$f[]="	if [ \$SLURPD_ACTIVATE -eq 0 ]";
$f[]="	then";
$f[]="		return 1";
$f[]="	fi";
$f[]="";
$f[]="	# Stop message";
$f[]="	message \"info\" \"[INFO] Halting OpenLDAP replication...\"";
$f[]="";
$f[]="	# Presence of PID file";
$f[]="	if [ ! -r \$SLURPD_PID_FILE ]";
$f[]="	then";
$f[]="		message \"warning\" \"[WARNING] Can't read PID file, to stop slurpd try: \$0 forcestop\"";
$f[]="	else";
$f[]="		PID=`cat \$SLURPD_PID_FILE`";
$f[]="		kill -INT \$PID";
$f[]="";
$f[]="		# Waiting loop";
$f[]="		i=0";
$f[]="		while [ -e /proc/\$PID ]";
$f[]="		do";
$f[]="			if [ \$i -eq \$TIMEOUT ]";
$f[]="			then";
$f[]="				# Timeout, need to kill";
$f[]="				message \"alert\" \"[ALERT] slurpd still running (PID \$PID), try: \$0 forcestop\"";
$f[]="				return 1";
$f[]="			fi";
$f[]="			i=`expr \$i + 1`";
$f[]="			sleep 1";
$f[]="		done";
$f[]="";
$f[]="		message \"info\" \"[ OK ] OpenLDAP replication stopped after \$i seconds\"";
$f[]="	fi";
$f[]="}";
$f[]="";
$f[]="#====================================================================";
$f[]="# forcestop";
$f[]="#====================================================================";
$f[]="forcestop() {";
$f[]="	# Stop message";
$f[]="	message \"info\" \"[INFO] Killing OpenLDAP with force...\"";
$f[]="";
$f[]="	# Presence of PID file";
$f[]="	if [ ! -r \$SLAPD_PID_FILE ]";
$f[]="	then";
$f[]="		# Escape special characters into \$SLAPD_SERVICES";
$f[]="		slapd_services=\"`echo \"\$SLAPD_SERVICES\" | sed 's/\*/\\\*/g'`\"";
$f[]="";
$f[]="		# Check if any slapd process are running";
$f[]="		if [ `\$PS_COMMAND | grep \$SLAPD_BIN | grep \"\$slapd_services\" | grep -v grep | wc -l` -eq 0 ]";
$f[]="		then";
$f[]="			message \"info\" \"[INFO] Found no OpenLDAP process running with \$SLAPD_SERVICES\"";
$f[]="		else";
$f[]="			# Try a killall";
$f[]="			/usr/bin/killall -KILL \$SLAPD_BIN";
$f[]="";
$f[]="			if [ \$? -eq 0 ]";
$f[]="			then";
$f[]="				message \"info\" \"[ OK ] All OpenLDAP process killed with force\"";
$f[]="			else";
$f[]="				message \"alert\" \"[ALERT] Unable to kill OpenLDAP with force\"";
$f[]="				exit 1";
$f[]="			fi";
$f[]="		fi";
$f[]="	else";
$f[]="		PID=`cat \$SLAPD_PID_FILE`";
$f[]="		kill -KILL \$PID";
$f[]="";
$f[]="		if [ \$? -eq 0 ]";
$f[]="		then";
$f[]="			message \"info\" \"[ OK ] OpenLDAP process killed with force (PID \$PID)\"";
$f[]="		else";
$f[]="			message \"alert\" \"[ALERT] Unable to kill OpenLDAP with force (PID \$PID)\"";
$f[]="			exit 1";
$f[]="		fi";
$f[]="	fi";
$f[]="";
$f[]="	# Stop message";
$f[]="	message \"info\" \"[INFO] Killing OpenLDAP replication with force...\"";
$f[]="";
$f[]="	# Presence of PID file";
$f[]="	if [ ! -r \$SLURPD_PID_FILE ]";
$f[]="	then";
$f[]="		# Check if any slapd process are running";
$f[]="		if [ `\$PS_COMMAND | grep \$SLURPD_BIN | grep -v grep | wc -l` -eq 0 ]";
$f[]="		then";
$f[]="			message \"info\" \"[INFO] Found no slurpd process running\"";
$f[]="		else";
$f[]="			# Try a killall";
$f[]="			/usr/bin/killall -KILL \$SLURPD_BIN";
$f[]="";
$f[]="			if [ \$? -eq 0 ]";
$f[]="			then";
$f[]="				message \"info\" \"[ OK ] slurpd process killed with force\"";
$f[]="			else";
$f[]="				message \"alert\" \"[ALERT] Unable to kill slurpd with force\"";
$f[]="				exit 1";
$f[]="			fi";
$f[]="		fi";
$f[]="	else";
$f[]="		PID=`cat \$SLURPD_PID_FILE`";
$f[]="		kill -KILL \$PID";
$f[]="";
$f[]="		if [ \$? -eq 0 ]";
$f[]="		then";
$f[]="			message \"info\" \"[ OK ] slurpd process killed with force (PID \$PID)\"";
$f[]="		else";
$f[]="			message \"alert\" \"[ALERT] Unable to kill slurpd with force (PID \$PID)\"";
$f[]="			exit 1";
$f[]="		fi";
$f[]="	fi";
$f[]="}";
$f[]="";
$f[]="#====================================================================";
$f[]="# slapd_status";
$f[]="#====================================================================";
$f[]="slapd_status() {";
$f[]="	# Return 0 if slapd is running, 1 if slapd is stopped, 2 if we can't say";
$f[]="	if [ ! -r \$SLAPD_PID_FILE ]";
$f[]="	then";
$f[]="		message \"alert\" \"[ALERT] \$SLAPD_PID_FILE no such file\"";
$f[]="		PID=`$pidofbin \$SLAPD_BIN`";
$f[]="		message \"info\" \"[INFO] pidof:\$PID\"";
$f[]="	else";
$f[]="		PID=`cat \$SLAPD_PID_FILE`";
$f[]="		message \"info\" \"[INFO] \$SLAPD_PID_FILE PID:\$PID\"";
$f[]="	fi";
$f[]="";
$f[]="	if [ ! -e /proc/\$PID ]";
$f[]="	then";
$f[]="		PID=`$pidofbin \$SLAPD_BIN`";
$f[]="		message \"info\" \"[INFO] pidof:\$PID\"";
$f[]="	fi";

$f[]="LEN=\${#PID}";
$f[]="if [ \$LEN -eq 0 ]";
$f[]="		then";
$f[]="		message \"info\" \"[INFO] slapd not running PID is null\"";
$f[]="		return 1";
$f[]="	fi";
$f[]="";
$f[]="	if [ ! -e /proc/\$PID ]";

$f[]="	then";
$f[]="		message \"info\" \"[INFO] slapd not running\"";
$f[]="		return 1";
$f[]="	else";
$f[]="		message \"info\" \"[INFO] slapd running PID:\$PID\"";
$f[]="		return 0";
$f[]="	fi";
$f[]="	message \"info\" \"[INFO] slapd not running\"";
$f[]="	return 1";
$f[]="}";
$f[]="";
$f[]="display_status() {";
$f[]="";
$f[]="	# Print script version";
$f[]="	message \"info\" \"[INFO] LDAP Tool Box OpenLDAP init script version \$VERSION\" ";
$f[]="";
$f[]="	# Get status";
$f[]="	slapd_status";
$f[]="";
$f[]="	status=\$?";
$f[]="";
$f[]="	if [ \$status -eq 0 ]";
$f[]="	then";
$f[]="		message \"info\" \"[INFO] Process OpenLDAP is running\"";
$f[]="		message \"info\" \"[INFO] Listening to services \$SLAPD_SERVICES\"";
$f[]="	fi";
$f[]="";
$f[]="	if [ \$status -eq 1 ]";
$f[]="	then";
$f[]="		message \"info\" \"[INFO] Process OpenLDAP is not running\"";
$f[]="	fi";
$f[]="";
$f[]="	if [ \$status -eq 2 ]";
$f[]="	then";
$f[]="		message \"info\" \"[INFO] Unable to determine OpenLDAP status\"";
$f[]="	fi";
$f[]="";
$f[]="	# Get detected suffix";
$f[]="	get_confvalues \"directory\"";
$f[]="	dbdirs=\$RETVAL";
$f[]="	get_confvalues \"suffix\"";
$f[]="	dbsufs=\$RETVAL";
$f[]="";
$f[]="	if [ ! -z \"\$dbdirs\" -o ! -z \"\$dbsufs\" ]";
$f[]="	then";
$f[]="		i=1";
$f[]="		for dbdir in \$dbdirs";
$f[]="		do";
$f[]="			# Table is not allowed, so we use awk";
$f[]="			suf=`echo \$dbsufs | awk -v j=\"\$i\" 'BEGIN{OFS=\" \"} {print \$j}'`";
$f[]="			sufprint=`echo \$suf | sed \"s/#20/ /\"`";
$f[]="			if [ ! -z \$suf ]";
$f[]="			then";
$f[]="				message \"info\" \"[INFO] Detected suffix: \$sufprint\"";
$f[]="			fi";
$f[]="			i=`expr \$i + 1`";
$f[]="		done";
$f[]="	fi";
$f[]="";
$f[]="	exit \$status";
$f[]="}";
$f[]="";
$f[]="configtest() {";
$f[]="	# Start message";
$f[]="	message \"info\" \"[INFO] Configuring slpad.conf...\"";
$f[]="	/usr/share/artica-postfix/bin/artica-install --slapdconf";
$f[]=" exit 1";	
$f[]="}";
$f[]="";
$f[]="db_recover() {";
$f[]="	# Start message";
$f[]="	message \"info\" \"[INFO] Launching OpenLDAP database recovery...\"";
$f[]="";
$f[]="	if [ ! -x \$DB_RECOVER_BIN ]";
$f[]="	then";
$f[]="		message \"alert\" \"[ALERT] Cannot execute \$DB_RECOVER_BIN, aborting database recovery\"";
$f[]="		exit 1";
$f[]="	fi";
$f[]="";
$f[]="	# slapd must be stopped";
$f[]="	slapd_status";
$f[]="";
$f[]="	if [ \$? -ne 1 ]";
$f[]="	then";
$f[]="		message \"alert\" \"[ALERT] OpenLDAP is running or was not correctly shut down, aborting database recovery\"";
$f[]="		exit 1";
$f[]="	fi";
$f[]="";
$f[]="	dbdirs=\"\$DATA_PATH\"";
$f[]="";
$f[]="	if [ \"\$DATA_PATH\" = \"auto\" ]";
$f[]="	then";
$f[]="		get_confvalues \"directory\"";
$f[]="		dbdirs=\$RETVAL";
$f[]="";
$f[]="		if [ -z \"\$dbdirs\" ]";
$f[]="		then";
$f[]="			message \"alert\" \"[ALERT] No database directories found\"";
$f[]="			exit 1";
$f[]="		fi";
$f[]="	fi";
$f[]="";
$f[]="	for dbdir in \$dbdirs";
$f[]="	do";
$f[]="";
$f[]="		# db_recover";
$f[]="		if [ -z \"\$SU\" ]";
$f[]="		then";
$f[]="			\$DB_RECOVER_BIN -h \"\$dbdir\"";
$f[]="		else";
$f[]="			\$SU \"\$DB_RECOVER_BIN -h \\\"\$dbdir\\\"\"";
$f[]="		fi";
$f[]="";
$f[]="		if [ \$? -eq 0 ]";
$f[]="		then";
$f[]="			message \"info\" \"[ OK ] OpenLDAP \$dbdir database recovery successful\"";
$f[]="		else";
$f[]="			message \"alert\" \"[ALERT] OpenLDAP \$dbdir database recovery failed\"";
$f[]="			exit 1";
$f[]="		fi";
$f[]="";
$f[]="	done";
$f[]="}";
$f[]="";
$f[]="reindex() {";
$f[]="	# Start message";
$f[]="	message \"info\" \"[INFO] Launching OpenLDAP database reindexing...\"";
$f[]="";
$f[]="	if [ \"\$SLAPD_CONF_DIR\" ]";
$f[]="	then";
$f[]="		SLAPINDEX_PARAMS=\"-F \$SLAPD_CONF_DIR\"";
$f[]="	elif [ \"\$SLAPD_CONF\" ]";
$f[]="	then";
$f[]="		SLAPINDEX_PARAMS=\"-f \$SLAPD_CONF\"";
$f[]="	fi";
$f[]="";
$f[]="	# slapd must be stopped";
$f[]="	slapd_status";
$f[]="";
$f[]="	if [ \$? -ne 1 ]";
$f[]="	then";
$f[]="		message \"alert\" \"[ALERT] OpenLDAP is running or was not correctly shut down, aborting reindexing\"";
$f[]="		exit 1";
$f[]="	else";
$f[]="		# slapindex";
$f[]="		if [ -z \"\$SU\" ]";
$f[]="		then";
$f[]="			\$SLAPINDEX_BIN \$SLAPINDEX_PARAMS";
$f[]="		else";
$f[]="			\$SU \"\$SLAPINDEX_BIN \$SLAPINDEX_PARAMS\"";
$f[]="		fi";
$f[]="";
$f[]="		if [ \$? -eq 0 ]";
$f[]="		then";
$f[]="			message \"info\" \"[ OK ] OpenLDAP database reindexing successful\"";
$f[]="		else";
$f[]="			message \"alert\" \"[ALERT] OpenLDAP database reindexing failed\"";
$f[]="			exit 1";
$f[]="		fi";
$f[]="	fi";
$f[]="}";
$f[]="";
$f[]="removelogs() {";
$f[]="	# Start message";
$f[]="	message \"info\" \"[INFO] Launching OpenLDAP database logs archiving...\"";
$f[]="";
$f[]="	if [ ! -x \$DB_ARCHIVE_BIN ]";
$f[]="	then";
$f[]="		message \"alert\" \"[ALERT] Can't execute \$DB_ARCHIVE_BIN, aborting database archiving\"";
$f[]="		exit 1";
$f[]="	fi";
$f[]="";
$f[]="";
$f[]="	# slapd must be stopped";
$f[]="	slapd_status";
$f[]="";
$f[]="	if [ \$? -ne 1 ]";
$f[]="	then";
$f[]="		message \"alert\" \"[ALERT] OpenLDAP is running or was not correctly shut down, aborting archiving\"";
$f[]="		exit 1";
$f[]="	fi";
$f[]="";
$f[]="	dbdirs=\"\$DATA_PATH\"";
$f[]="";
$f[]="	if [ \"\$DATA_PATH\" = \"auto\" ]";
$f[]="	then";
$f[]="		get_confvalues \"directory\"";
$f[]="		dbdirs=\$RETVAL";
$f[]="";
$f[]="		if [ -z \"\$dbdirs\" ]";
$f[]="		then";
$f[]="			message \"alert\" \"[ALERT] No database directories found\"";
$f[]="			exit 1";
$f[]="		fi";
$f[]="	fi";
$f[]="";
$f[]="	for dbdir in \$dbdirs";
$f[]="	do";
$f[]="";
$f[]="		# db_archive";
$f[]="		if [ -z \"\$SU\" ]";
$f[]="		then";
$f[]="			\$DB_ARCHIVE_BIN -h \"\$dbdir\" -d";
$f[]="		else";
$f[]="			\$SU \"\$DB_ARCHIVE_BIN -h \\\"\$dbdir\\\" -d\"";
$f[]="		fi";
$f[]="";
$f[]="		if [ \$? -eq 0 ]";
$f[]="		then";
$f[]="			message \"info\" \"[ OK ] OpenLDAP \$dbdir database logs archiving successful\"";
$f[]="		else";
$f[]="			message \"alert\" \"[ALERT] OpenLDAP \$dbdir database logs archiving failed\"";
$f[]="			exit 1";
$f[]="		fi";
$f[]="";
$f[]="	done";
$f[]="}";
$f[]="";
$f[]="backup() {";
$f[]="	# Start message";
$f[]="	message \"info\" \"[INFO] Launching OpenLDAP database backup...\"";
$f[]="";
$f[]="	# Backup directory";
$f[]="	mkdir -p \"\$BACKUP_PATH\"";
$f[]="";
$f[]="	if [ \"\$SLAPD_CONF_DIR\" ]";
$f[]="	then";
$f[]="		SLAPCAT_PARAMS=\"-F \$SLAPD_CONF_DIR\"";
$f[]="	elif [ \"\$SLAPD_CONF\" ]";
$f[]="	then";
$f[]="		SLAPCAT_PARAMS=\"-f \$SLAPD_CONF\"";
$f[]="	fi";
$f[]="";
$f[]="	# Do backup for all databases";
$f[]="	dbdirs=\"\$DATA_PATH\"";
$f[]="	dbsufs=\"\"";
$f[]="";
$f[]="	if [ \"\$DATA_PATH\" = \"auto\" ]";
$f[]="	then";
$f[]="		get_confvalues \"directory\"";
$f[]="		dbdirs=\$RETVAL";
$f[]="		get_confvalues \"suffix\"";
$f[]="		dbsufs=\$RETVAL";
$f[]="";
$f[]="		if [ -z \"\$dbdirs\" -o -z \"\$dbsufs\" ]";
$f[]="		then";
$f[]="			message \"alert\" \"[ALERT] No database directories found\"";
$f[]="			exit 1";
$f[]="		fi";
$f[]="	fi";
$f[]="";
$f[]="	i=1";
$f[]="	for dbdir in \$dbdirs";
$f[]="	do";
$f[]="		# Table is not allowed, so we use awk";
$f[]="		suf=\"$suffix\"";
$f[]="";
$f[]="		if [ -z \$suf ]; then";
$f[]="			message \"info\" \"[INFO] No suffix for \$dbdir\"";
$f[]="		else";
$f[]="			sufprint=`echo \$suf | sed \"s/#20/ /\"`";
$f[]="			dir=`basename \$dbdir`";
$f[]="			file=\"\$BACKUP_PATH/\$BACKUP_SUFFIX\"";

$f[]="";
$f[]="			# slapcat";
$f[]="			if [ -z \"\$SU\" ]";
$f[]="			then";
$f[]="				message \"info\" \"[ OK ] \$SLAPCAT_BIN -b \"\$sufprint\" \$SLAPCAT_PARAMS -l \"\$file\"\"";
$f[]="				\$SLAPCAT_BIN -b \"\$sufprint\" \$SLAPCAT_PARAMS -l \"\$file\"";
$f[]="			else";
$f[]="				\$SU \"\$SLAPCAT_BIN -b \\\"\$sufprint\\\" \$SLAPCAT_PARAMS\" > \"\$file\"";
$f[]="				chown \$SLAPD_USER:\$SLAPD_GROUP \$file";
$f[]="			fi";
$f[]="";
$f[]="			# alert";
$f[]="			if [ \$? -ne 0 ]";
$f[]="			then";
$f[]="				message \"alert\" \"[ALERT] OpenLDAP database backup failed\"";
$f[]="				exit 1";
$f[]="			fi";
$f[]="";
$f[]="			# compress";
$f[]="			if [ -z \$BACKUP_COMPRESS_EXT ]";
$f[]="			then";
$f[]="				message \"info\" \"[ OK ] data saved in \$file\"";
$f[]="			else";
$f[]="				if [ -z \"\$SU\" ]";
$f[]="				then";
$f[]="					\$BACKUP_COMPRESS_BIN -czf \"\$BACKUP_PATH/\$BACKUP_CONTAINER\" \"\$file\"";
$f[]="				else";				
$f[]="					\$SU \"\$BACKUP_COMPRESS_BIN -czf \$BACKUP_PATH/\$BACKUP_CONTAINER \$file\"";
$f[]="				fi";
$f[]="";
$f[]="				# alert";
$f[]="				if [ \$? -ne 0 ]";
$f[]="				then";
$f[]="					message \"alert\" \"[ALERT] OpenLDAP database backup compression failed\"";
$f[]="					exit 1";
$f[]="				fi";
$f[]="				message \"info\" \"[ OK ] Data saved in \$BACKUP_PATH/\$BACKUP_CONTAINER\"";
$f[]="			fi";
$f[]="		fi";
$f[]="";
$f[]="		i=`expr \$i + 1`";
$f[]="	done";
$f[]="";
$f[]="}";
$f[]="";
$f[]="backupconfig() {";
$f[]="	# Start message";
$f[]="	message \"info\" \"[INFO] Launching OpenLDAP configuration backup...\"";
$f[]="";
$f[]="	# Backup directory";
$f[]="	mkdir -p \"\$BACKUP_PATH\"";
$f[]="";
$f[]="	file=\"\"";
$f[]="";
$f[]="	if [ \"\$SLAPD_CONF_DIR\" ]";
$f[]="	then";
$f[]="		file=\"\$BACKUP_PATH/config-\$BACKUP_SUFFIX\"";
$f[]="";
$f[]="		# slapcat";
$f[]="		if [ -z \"\$SU\" ]";
$f[]="		then";
$f[]="			\$SLAPCAT_BIN -n0 -F \$SLAPD_CONF_DIR -l \"\$file\"";
$f[]="		else";
$f[]="			\$SU \"\$SLAPCAT_BIN -n0 -F \$SLAPD_CONF_DIR\" > \"\$file\"";
$f[]="			chown \$SLAPD_USER:\$SLAPD_GROUP \$file";
$f[]="		fi";
$f[]="";
$f[]="	elif [ \"\$SLAPD_CONF\" ]";
$f[]="	then";
$f[]="		file=\"\$BACKUP_PATH/slapd-`date +%Y%m%d%H%M%S`.conf\"";
$f[]="		cp \$SLAPD_CONF \$file";
$f[]="	fi";
$f[]="";
$f[]="	# alert";
$f[]="	if [ \$? -ne 0 ]";
$f[]="	then";
$f[]="		message \"alert\" \"[ALERT] OpenLDAP configuration backup failed\"";
$f[]="		exit 1";
$f[]="	fi";
$f[]="";
$f[]="	message \"info\" \"[ OK ] Configuration saved in \$file\"";
$f[]="";
$f[]="}";
$f[]="";
$f[]="restore() {";
$f[]="	# Start message";
$f[]="	message \"info\" \"[INFO] Launching OpenLDAP database restore...\"";
$f[]="";
$f[]="	if [ \"\$SLAPD_CONF_DIR\" ]";
$f[]="	then";
$f[]="		SLAPADD_PARAMS=\"-F \$SLAPD_CONF_DIR\"";
$f[]="	elif [ \"\$SLAPD_CONF\" ]";
$f[]="	then";
$f[]="		SLAPADD_PARAMS=\"-f \$SLAPD_CONF\"";
$f[]="	fi";
$f[]="";
$f[]="	# Do restore for all databases";
$f[]="	dbdirs=\"\$DATA_PATH\"";
$f[]="	dbsufs=\"\"";
$f[]="";
$f[]="	if [ \"\$DATA_PATH\" = \"auto\" ]";
$f[]="	then";
$f[]="		get_confvalues \"directory\"";
$f[]="		dbdirs=\$RETVAL";
$f[]="		get_confvalues \"suffix\"";
$f[]="		dbsufs=\$RETVAL";
$f[]="";
$f[]="		if [ -z \"\$dbdirs\" -o -z \"\$dbsufs\" ]";
$f[]="		then";
$f[]="			message \"alert\" \"[ALERT] No database directories found\"";
$f[]="			exit 1";
$f[]="		fi";
$f[]="	fi";
$f[]="";
$f[]="	i=1";
$f[]="	for dbdir in \$dbdirs";
$f[]="	do";
$f[]="		# Table is not allowed, so we use awk";
$f[]="		suf=`echo \$dbsufs | awk -v j=\"\$i\" 'BEGIN{OFS=\" \"} {print \$j}'`";
$f[]="";
$f[]="		if [ -z \$suf ]; then";
$f[]="			message \"info\" \"[INFO] No suffix for \$dbdir\"";
$f[]="		else";
$f[]="			sufprint=`echo \$suf | sed \"s/#20/ /\"`";
$f[]="			dir=`basename \$dbdir`";
$f[]="";
$f[]="			# Get the most recent backup for this database";
$f[]="			file=`ls -1t \"\$BACKUP_PATH/\$dir-\"* 2>/dev/null | head -1`";
$f[]="			";
$f[]="			if [ -z \$file ]; then";
$f[]="				message \"info\" \"[INFO] No backup file for \$sufprint, skipping...\"";
$f[]="			else";
$f[]="				message \"info\" \"[INFO] Restore file \$file for \$sufprint\"";
$f[]="";
$f[]="				# uncompress";
$f[]="				if [ \"\$BACKUP_COMPRESS_EXT\" ]";
$f[]="				then";
$f[]="					if [ -z \"\$SU\" ]";
$f[]="					then";
$f[]="						\$BACKUP_UNCOMPRESS_BIN \"\$file\"";
$f[]="					else";
$f[]="						\$SU \"\$BACKUP_UNCOMPRESS_BIN \$file\"";
$f[]="					fi";
$f[]="";
$f[]="					# alert";
$f[]="					if [ \$? -ne 0 ]";
$f[]="					then";
$f[]="						message \"alert\" \"[ALERT] OpenLDAP database backup uncompression failed\"";
$f[]="						exit 1";
$f[]="					fi";
$f[]="";
$f[]="					file=\${file%\.*}";
$f[]="				fi";
$f[]="";
$f[]="				SLAPADD_PARAMS=\"\$SLAPADD_PARAMS -l \$file\"";
$f[]="";
$f[]="				# Delete current data";
$f[]="				if [ -z \"\$SU\" ]";
$f[]="				then";
$f[]="					rm -rf \"\$dbdir/\"*";
$f[]="				else";
$f[]="					\$SU \"rm -rf \$dbdir/\"*";
$f[]="				fi";
$f[]="";
$f[]="				# Import backup";
$f[]="				if [ -z \"\$SU\" ]";
$f[]="				then";
$f[]="					\$SLAPADD_BIN -b \"\$sufprint\" \$SLAPADD_PARAMS";
$f[]="				else";
$f[]="					\$SU \"\$SLAPADD_BIN -b \\\"\$sufprint\\\" \$SLAPADD_PARAMS\"";
$f[]="				fi";
$f[]="				";
$f[]="				# alert";
$f[]="				if [ \$? -ne 0 ]";
$f[]="				then";
$f[]="					message \"alert\" \"[ALERT] OpenLDAP database restore failed for \$sufprint\"";
$f[]="					exit 1";
$f[]="				fi";
$f[]="				message \"info\" \"[ OK ] Data restored for \$sufprint\"";
$f[]="";
$f[]="				# compress backup again if needed";
$f[]="				if [ \"\$BACKUP_COMPRESS_EXT\" ]";
$f[]="				then";
$f[]="					if [ -z \"\$SU\" ]";
$f[]="					then";
$f[]="						\$BACKUP_COMPRESS_BIN \"\$file\"";
$f[]="					else";
$f[]="						\$SU \"\$BACKUP_COMPRESS_BIN \$file\"";
$f[]="					fi";
$f[]="";
$f[]="					# alert";
$f[]="					if [ \$? -ne 0 ]";
$f[]="						then";
$f[]="						message \"alert\" \"[ALERT] OpenLDAP database backup compression failed\"";
$f[]="						exit 1";
$f[]="					fi";
$f[]="				fi";
$f[]="			fi";
$f[]="		fi";
$f[]="		i=`expr \$i + 1`";
$f[]="	done";
$f[]="";
$f[]="}";
$f[]="";
$f[]="restoreconfig() {";
$f[]="	# Start message";
$f[]="	message \"info\" \"[INFO] Launching OpenLDAP configuration restore...\"";
$f[]="";
$f[]="	if [ \"\$SLAPD_CONF_DIR\" ]";
$f[]="	then";
$f[]="		# Get the most recent backup of cn=config";
$f[]="		file=`ls -1t \"\$BACKUP_PATH/config-\"* 2>/dev/null | head -1`";
$f[]="";
$f[]="		if [ -z \$file ]; then";
$f[]="			message \"info\" \"[INFO] No configuration backup found, skipping...\"";
$f[]="		else";
$f[]="			message \"info\" \"[INFO] Restore configuration file \$file\"";
$f[]="";
$f[]="			# Delete current data";
$f[]="			if [ -z \"\$SU\" ]";
$f[]="			then";
$f[]="				rm -rf \"\$SLAPD_CONF_DIR/\"*";
$f[]="			else";
$f[]="				\$SU \"rm -rf \$SLAPD_CONF_DIR/\"*";
$f[]="			fi";
$f[]="";
$f[]="			# Import backup";
$f[]="			if [ -z \"\$SU\" ]";
$f[]="			then";
$f[]="				\$SLAPADD_BIN -n0 -F \$SLAPD_CONF_DIR -l \$file";
$f[]="			else";
$f[]="				\$SU \"\$SLAPADD_BIN -n0 -F \$SLAPD_CONF_DIR -l \$file\"";
$f[]="			fi";
$f[]="		fi";
$f[]="";
$f[]="	elif [ \"\$SLAPD_CONF\" ]";
$f[]="	then";
$f[]="		# Get the most recent backup of slapd.conf";
$f[]="		file=`ls -1t \"\$BACKUP_PATH/slapd-\"*.conf 2>/dev/null | head -1`";
$f[]="";
$f[]="		if [ -z \$file ]; then";
$f[]="			message \"info\" \"[INFO] No configuration backup found, skipping...\"";
$f[]="		else";
$f[]="			message \"info\" \"[INFO] Restore configuration file \$file\"";
$f[]="			cp -f \$file \$SLAPD_CONF		";
$f[]="		fi";
$f[]="	fi";
$f[]="";
$f[]="	# alert";
$f[]="	if [ \$? -ne 0 ]";
$f[]="	then";
$f[]="		message \"alert\" \"[ALERT] OpenLDAP configuration restore failed\"";
$f[]="		exit 1";
$f[]="	fi";
$f[]="	message \"info\" \"[ OK ] Configuration restored\"";
$f[]="}";
$f[]="";
$f[]="#====================================================================";
$f[]="# Action switch";
$f[]="#====================================================================";
$f[]="case \$1 in";
$f[]="	start)";
$f[]="	start_slurpd";
$f[]="	start_slapd";
$f[]="	;;";
$f[]="	stop)";
$f[]="	stop_slapd";
$f[]="	stop_slurpd";
$f[]="	;;";
$f[]="	forcestop)";
$f[]="	forcestop";
$f[]="	;;";
$f[]="	restart)";
$f[]="	stop_slapd";
$f[]="	stop_slurpd";
$f[]="	start_slurpd";
$f[]="	start_slapd";
$f[]="	;;";
$f[]="	debug)";
$f[]="	stop_slapd";
$f[]="	stop_slurpd";
$f[]="	start_slurpd";
$f[]="	start_slapd \$DEBUG_LEVEL";
$f[]="	;;";
$f[]="	force-reload)";
$f[]="	forcestop";
$f[]="	start_slurpd";
$f[]="	start_slapd";
$f[]="	;;";
$f[]="	status)";
$f[]="	display_status";
$f[]="	;;";
$f[]="	db_recover)";
$f[]="	db_recover";
$f[]="	;;";
$f[]="	reindex)";
$f[]="	reindex";
$f[]="	;;";
$f[]="	removelogs)";
$f[]="	removelogs";
$f[]="	;;";
$f[]="	backup)";
$f[]="	backup";
$f[]="	;;";
$f[]="	restore)";
$f[]="	stop_slapd";
$f[]="	stop_slurpd";
$f[]="	restore";
$f[]="	start_slurpd";
$f[]="	start_slapd";
$f[]="	;;";
$f[]="	backupconfig)";
$f[]="	backupconfig";
$f[]="	;;";
$f[]="	restoreconfig)";
$f[]="	stop_slapd";
$f[]="	stop_slurpd";
$f[]="	restoreconfig";
$f[]="	configtest";
$f[]="	start_slurpd";
$f[]="	start_slapd";
$f[]="	;;";
$f[]="	*)";
$f[]="	echo \"Usage: \$0 {start|stop|forcestop|restart|debug|force-reload|status|configtest|db_recover|reindex|removelogs|backup|restore|backupconfig|restoreconfig}\"";
$f[]="	exit 1";
$f[]="	;;";
$f[]="esac";
$f[]="";
$f[]="#====================================================================";
$f[]="# Exit";
$f[]="#====================================================================";
$f[]="exit 0";
$f[]="";
$INITD_PATH=$unix->SLAPD_INITD_PATH();
echo "slapd: [INFO] Writing $INITD_PATH with new config\n";
@file_put_contents($INITD_PATH, @implode("\n", $f));

}

function MONIT(){
	$unix=new unix();
	$INITD_PATH=$unix->SLAPD_INITD_PATH();
	$SLAPD_PID_FILE=$unix->SLAPD_PID_PATH();	
	
	$f[]="check process slapd with pidfile $SLAPD_PID_FILE";
	$f[]="start program = \"$INITD_PATH start\"";
	$f[]="stop program  = \"$INITD_PATH stop\"";
	$f[]="if cpu is greater than 80% for 3 cycles then alert";
	$f[]="if cpu usage > 95% for 5 cycles then restart";
	$f[]="if 3 restarts within 3 cycles then timeout";
	$f[]="if failed port 389 then restart";	
	$f[]="";
	@file_put_contents("/etc/monit/conf.d/APP_OPENLDAP.monitrc", @implode("\n", $f));
	
	
	$f[]=array();
	
	if(is_file("/etc/init.d/sysklogd")){
		$f[]="check process syslogd with pidfile /var/run/syslogd.pid";
		$f[]="start program = \"/etc/init.d/sysklogd start\"";
		$f[]="stop program = \"/etc/init.d/sysklogd stop\"";
		$f[]="if 5 restarts within 5 cycles then timeout";
		$f[]="check file syslogd_file with path /var/log/syslog";
		$f[]="if timestamp > 10 minutes then restart";	
		@file_put_contents("/etc/monit/conf.d/APP_SYSKLOGD.monitrc", @implode("\n", $f));
	}
	
	if(is_file("/etc/init.d/syslog")){checkDebSyslog();}
	shell_exec("/usr/share/artica-postfix/bin/artica-install --monit-check");
	
}

function checkDebSyslog(){
	 if(!is_file("/etc/rsyslog.conf")){return;}
	 $f=file("/etc/init.d/syslog");
	 $RSYSLOGD_PIDFILE=null;
	 while (list ($num, $line) = each ($f)){
	 	if(preg_match("#RSYSLOGD_PIDFILE=(.+)#", $line,$re)){
	 		$RSYSLOGD_PIDFILE=$re[1];
	 		break;
	 	}
	}
	
	$filesize=filesize("/etc/init.d/syslog");
	if($filesize<50){$RSYSLOGD_PIDFILE="/var/run/rsyslogd.pid";}
	if($RSYSLOGD_PIDFILE==null){echo "syslog: [INFO] pidfile `cannot check pid...`\n";return;}
	
	echo "syslog: [INFO] pidfile `$RSYSLOGD_PIDFILE`\n";
	
	 $f=file("/etc/rsyslog.conf");
	 while (list ($num, $line) = each ($f)){
	 	if(preg_match("#\*\.\*.*?\s+(.+)#", $line,$re)){
	 		$syslogpath=$re[1];
	 		if(substr($syslogpath, 0,1)=='-'){$syslogpath=substr($syslogpath, 1,strlen($syslogpath));}
	 		break;
	 	}
	 	
	 }
	
	echo "syslog: [INFO] syslog path `$syslogpath`\n";
	if(!is_file($syslogpath)){echo "syslog: [ERR] syslog path `$syslogpath` no such file!\n";return;}
	
	$f=array();
	$f[]="check process rsyslogd with pidfile $RSYSLOGD_PIDFILE";
	$f[]="start program = \"/etc/init.d/syslog start\"";
	$f[]="stop program = \"/etc/init.d/syslog stop\"";
	$f[]="if 5 restarts within 5 cycles then timeout";
	$f[]="check file syslogd_file with path $syslogpath";
	$f[]="if timestamp > 10 minutes then restart";	
	@file_put_contents("/etc/monit/conf.d/APP_RSYSLOGD.monitrc", @implode("\n", $f));	
	if(file_exists("/usr/sbin/rsyslogd")){rsyslogd_init();}
}

function rsyslogd_init(){
	$unix=new unix();
	$sock=new sockets();
	$servicebin=$unix->find_program("update-rc.d");
	$users=new usersMenus();
	$mydir=dirname(__FILE__);
	if(!is_file("/etc/init.d/syslog")){return;}
	if(!is_file($servicebin)){return;}
	$php=$unix->LOCATE_PHP5_BIN();
	$stopmaillog="/etc/init.d/artica-postfix stop postfix-logger";
	$startmaillog="/etc/init.d/artica-postfix start postfix-logger";
	$restartmaillog="/etc/init.d/artica-postfix restart postfix-logger";
	if(!$users->POSTFIX_INSTALLED){$stopmaillog=null;$startmaillog=null;$restartmaillog=null;}
	if($users->WEBSTATS_APPLIANCE){
		echo "syslog: [INFO] syslog path Act as Syslog server...\n";
		$SYSLOG_SERVER="$php $mydir/exec.syslog-engine.php --build-server --norestart";
		$sock->SET_INFO("ActAsASyslogServer", 1);
	}
	
	$schedules="$php ".dirname(__FILE__)."/exec.schedules.php";
	
	$f[]="#! /bin/sh";
	$f[]="### BEGIN INIT INFO";
	$f[]="# Provides:          rsyslog";
	$f[]="# Required-Start:    \$remote_fs \$time";
	$f[]="# Required-Stop:     umountnfs \$time";
	$f[]="# X-Stop-After:      sendsigs";
	$f[]="# Default-Start:     2 3 4 5";
	$f[]="# Default-Stop:      0 1 6";
	$f[]="# Short-Description: enhanced syslogd";
	$f[]="# Description:       Rsyslog is an enhanced multi-threaded syslogd.";
	$f[]="#                    It is quite compatible to stock sysklogd and can be ";
	$f[]="#                    used as a drop-in replacement.";
	$f[]="### END INIT INFO";
	$f[]="";
	$f[]="#";
	$f[]="# Author: Michael Biebl <biebl@debian.org>";
	$f[]="#";
	$f[]="";
	$f[]="# PATH should only include /usr/* if it runs after the mountnfs.sh script";
	$f[]="PATH=/sbin:/usr/sbin:/bin:/usr/bin";
	$f[]="DESC=\"enhanced syslogd\"";
	$f[]="NAME=rsyslog";
	$f[]="";
	$f[]="RSYSLOGD=rsyslogd";
	$f[]="RSYSLOGD_BIN=/usr/sbin/rsyslogd";
	$f[]="RSYSLOGD_OPTIONS=\"-c4\"";
	$f[]="RSYSLOGD_PIDFILE=/var/run/rsyslogd.pid";
	$f[]="";
	$f[]="SCRIPTNAME=/etc/init.d/\$NAME";
	$f[]="";
	$f[]="# Exit if the package is not installed";
	$f[]="[ -x \"\$RSYSLOGD_BIN\" ] || exit 0";
	$f[]="";
	$f[]="# Read configuration variable file if it is present";
	$f[]="[ -r /etc/default/\$NAME ] && . /etc/default/\$NAME";
	$f[]="";
	$f[]="# Define LSB log_* functions.";
	$f[]=". /lib/lsb/init-functions";
	$f[]="";
	$f[]="do_start()";
	$f[]="{";
	$f[]="	DAEMON=\"\$RSYSLOGD_BIN\"";
	$f[]="	DAEMON_ARGS=\"\$RSYSLOGD_OPTIONS\"";
	$f[]="	PIDFILE=\"\$RSYSLOGD_PIDFILE\"";
	$f[]="";
	$f[]="	# Return";
	$f[]="	#   0 if daemon has been started";
	$f[]="	#   1 if daemon was already running";
	$f[]="	#   other if daemon could not be started or a failure occured";
	if($SYSLOG_SERVER<>null){$f[]="	$SYSLOG_SERVER";}
	$f[]="	start-stop-daemon --start --quiet --pidfile \$PIDFILE --exec \$DAEMON -- \$DAEMON_ARGS";
	$f[]="  /etc/init.d/artica-postfix start auth-logger";
	$f[]="  /etc/init.d/artica-postfix start sysloger";
	if($startmaillog<>null){$f[]="  $startmaillog";}
	$f[]="  $schedules";
	$f[]="}";
	$f[]="";
	$f[]="do_stop()";
	$f[]="{";
	$f[]="	NAME=\"\$RSYSLOGD\"";
	$f[]="	PIDFILE=\"\$RSYSLOGD_PIDFILE\"";
	$f[]="";
	$f[]="	# Return";
	$f[]="	#   0 if daemon has been stopped";
	$f[]="	#   1 if daemon was already stopped";
	$f[]="	#   other if daemon could not be stopped or a failure occurred";
	$f[]="	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile \$PIDFILE --name \$NAME";
	$f[]="  /etc/init.d/artica-postfix stop auth-logger";
	$f[]="  /etc/init.d/artica-postfix stop sysloger";
	$f[]="  $stopmaillog";
	if($SYSLOG_SERVER<>null){$f[]="	$SYSLOG_SERVER";}
	$f[]="}";
	$f[]="";
	$f[]="#";
	$f[]="# Tell rsyslogd to reload its configuration";
	$f[]="#";
	$f[]="do_reload() {";
	$f[]="	NAME=\"\$RSYSLOGD\"";
	$f[]="	PIDFILE=\"\$RSYSLOGD_PIDFILE\"";
	$f[]="";
	$f[]="	start-stop-daemon --stop --signal HUP --quiet --pidfile \$PIDFILE --name \$NAME";
	$f[]="  /etc/init.d/artica-postfix restart auth-logger";
	$f[]="  /etc/init.d/artica-postfix restart sysloger";
	$f[]="	$restartmaillog";
	$f[]="}";
	$f[]="";
	$f[]="create_xconsole() {";
	$f[]="	XCONSOLE=/dev/xconsole";
	$f[]="	if [ \"\$(uname -s)\" = \"GNU/kFreeBSD\" ]; then";
	$f[]="		XCONSOLE=/var/run/xconsole";
	$f[]="		ln -sf \$XCONSOLE /dev/xconsole";
	$f[]="	fi";
	$f[]="	if [ ! -e \$XCONSOLE ]; then";
	$f[]="		mknod -m 640 \$XCONSOLE p";
	$f[]="		chown root:adm \$XCONSOLE";
	$f[]="		[ -x /sbin/restorecon ] && /sbin/restorecon \$XCONSOLE";
	$f[]="	fi";
	$f[]="}";
	$f[]="";
	$f[]="sendsigs_omit() {";
	$f[]="	OMITDIR=/lib/init/rw/sendsigs.omit.d";
	$f[]="	mkdir -p \$OMITDIR";
	$f[]="	rm -f \$OMITDIR/rsyslog";
	$f[]="	ln -s \$RSYSLOGD_PIDFILE \$OMITDIR/rsyslog";
	$f[]="}";
	$f[]="";
	$f[]="case \"\$1\" in";
	$f[]="  start)";
	$f[]="	log_daemon_msg \"Starting \$DESC\" \"\$RSYSLOGD\"\n";
	$f[]="	create_xconsole";
	$f[]="	do_start";
	$f[]="	case \"\$?\" in";
	$f[]="		0) sendsigs_omit";
	$f[]="		   log_end_msg 0 ;;";
	$f[]="		1) log_progress_msg \"already started\"";
	$f[]="		   log_end_msg 0 ;;";
	$f[]="		*) log_end_msg 1 ;;";
	$f[]="	esac";
	$f[]="";
	$f[]="	;;";
	$f[]="  stop)";
	$f[]="	log_daemon_msg \"Stopping \$DESC\" \"\$RSYSLOGD\"";
	$f[]="	do_stop";
	$f[]="	case \"\$?\" in";
	$f[]="		0) log_end_msg 0 ;;";
	$f[]="		1) log_progress_msg \"already stopped\"";
	$f[]="		   log_end_msg 0 ;;";
	$f[]="		*) log_end_msg 1 ;;";
	$f[]="	esac";
	$f[]="";
	$f[]="	;;";
	$f[]="  reload|force-reload)";
	$f[]="	log_daemon_msg \"Reloading \$DESC\" \"\$RSYSLOGD\"";
	$f[]="	do_reload";
	$f[]="	log_end_msg \$?";
	$f[]="	;;";
	$f[]="  restart)";
	$f[]="	\$0 stop";
	$f[]="	\$0 start";
	$f[]="	;;";
	$f[]="  status)";
	$f[]="	status_of_proc -p \$RSYSLOGD_PIDFILE \$RSYSLOGD_BIN \$RSYSLOGD && exit 0 || exit \$?";
	$f[]="	;;";
	$f[]="  *)";
	$f[]="	echo \"Usage: \$SCRIPTNAME {start|stop|restart|reload|force-reload|status}\" >&2";
	$f[]="	exit 3";
	$f[]="	;;";
	$f[]="esac";
	$f[]="";
	$f[]=":";
	$f[]="";
	@file_put_contents("/etc/init.d/syslog", @implode("\n", $f));
	echo "syslog: [INFO] syslog path `/etc/init.d/syslog` done\n";
}

function dnsmasq_init_debian(){
	$unix=new unix();
	$sock=new sockets();
	$servicebin=$unix->find_program("update-rc.d");
	$users=new usersMenus();
	if(!is_file("/etc/init.d/dnsmasq")){return;}
	if(!is_file($servicebin)){return;}
	$php=$unix->LOCATE_PHP5_BIN();
	if(!is_file($servicebin)){return;}
	$EnableDNSMASQ=$sock->GET_INFO("EnableDNSMASQ");
	if(!is_numeric($EnableDNSMASQ)){$EnableDNSMASQ=0;}
	echo "dnsmasq: [INFO] dnsmasq enabled = `$EnableDNSMASQ`\n";	
	
	$runcmd="$php /usr/share/artica-postfix/exec.dnsmasq.php";
	
	$f[]="#!/bin/sh";
	$f[]="### BEGIN INIT INFO";
	$f[]="# Provides:       dnsmasq";
	$f[]="# Required-Start: \$network \$remote_fs \$syslog";
	$f[]="# Required-Stop:  \$network \$remote_fs \$syslog";
	$f[]="# Default-Start:  2 3 4 5";
	$f[]="# Default-Stop:   1";
	$f[]="# Description:    DHCP and DNS server";
	$f[]="### END INIT INFO";
	$f[]="";
	$f[]="set +e   # Don't exit on error status";
	$f[]="";
	$f[]="PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin";
	$f[]="DAEMON=/usr/sbin/dnsmasq";
	$f[]="NAME=dnsmasq";
	$f[]="DESC=\"DNS forwarder and DHCP server\"";
	$f[]="";
	$f[]="# Most configuration options in /etc/default/dnsmasq are deprecated";
	$f[]="# but still honoured.";
	$f[]="ENABLED=$EnableDNSMASQ";
	$f[]="if [ -r /etc/default/\$NAME ]; then";
	$f[]="	. /etc/default/\$NAME";
	$f[]="fi";
	$f[]="";
	$f[]="# Get the system locale, so that messages are in the correct language, and the ";
	$f[]="# charset for IDN is correct";
	$f[]="if [ -r /etc/default/locale ]; then";
	$f[]="        . /etc/default/locale";
	$f[]="        export LANG";
	$f[]="fi";
	$f[]="";
	$f[]="test -x \$DAEMON || exit 0";
	$f[]="";
	$f[]="# Provide skeleton LSB log functions for backports which don't have LSB functions.";
	$f[]="if [ -f /lib/lsb/init-functions ]; then";
	$f[]="         . /lib/lsb/init-functions";
	$f[]="else";
	$f[]="         log_warning_msg () {";
	$f[]="            echo \"\${@}.\"";
	$f[]="         }";
	$f[]="";
	$f[]="         log_success_msg () {";
	$f[]="            echo \"\${@}.\"";
	$f[]="         }";
	$f[]="";
	$f[]="         log_daemon_msg () {";
	$f[]="            echo -n \"\${1}: \$2\"";
	$f[]="         }";
	$f[]="";
	$f[]="	 log_end_msg () {";
	$f[]="            if [ \$1 -eq 0 ]; then";
	$f[]="              echo \".\"";
	$f[]="            elif [ \$1 -eq 255 ]; then";
	$f[]="              /bin/echo -e \" (warning).\"";
	$f[]="            else";
	$f[]="              /bin/echo -e \" failed!\"";
	$f[]="            fi";
	$f[]="         }";
	$f[]="fi";
	$f[]="";
	$f[]="# RESOLV_CONF:";
	$f[]="# If the resolvconf package is installed then use the resolv conf file";
	$f[]="# that it provides as the default.  Otherwise use /etc/resolv.conf as";
	$f[]="# the default.";
	$f[]="#";
	$f[]="# If IGNORE_RESOLVCONF is set in /etc/default/dnsmasq or an explicit";
	$f[]="# filename is set there then this inhibits the use of the resolvconf-provided";
	$f[]="# information.";
	$f[]="#";
	$f[]="# Note that if the resolvconf package is installed it is not possible to ";
	$f[]="# override it just by configuration in /etc/dnsmasq.conf, it is necessary";
	$f[]="# to set IGNORE_RESOLVCONF=yes in /etc/default/dnsmasq.";
	$f[]="";
	$f[]="if [ ! \"\$RESOLV_CONF\" ] &&";
	$f[]="   [ ! \"\$IGNORE_RESOLVCONF\" ] &&";
	$f[]="   [ -x /sbin/resolvconf ]";
	$f[]="then";
	$f[]="	RESOLV_CONF=/var/run/dnsmasq/resolv.conf";
	$f[]="fi";
	$f[]="";
	$f[]="for INTERFACE in \$DNSMASQ_INTERFACE; do";
	$f[]="	DNSMASQ_INTERFACES=\"\$DNSMASQ_INTERFACES -i \$INTERFACE\"";
	$f[]="done";
	$f[]="";
	$f[]="for INTERFACE in \$DNSMASQ_EXCEPT; do";
	$f[]="	DNSMASQ_INTERFACES=\"\$DNSMASQ_INTERFACES -I \$INTERFACE\"";
	$f[]="done";
	$f[]="";
	$f[]="if [ ! \"\$DNSMASQ_USER\" ]; then";
	$f[]="   DNSMASQ_USER=\"root\"";
	$f[]="fi";
	$f[]="";
	$f[]="start()";
	$f[]="{";
	$f[]="ENABLED=$EnableDNSMASQ";
	$f[]="	if [ \$ENABLED -eq 0 ]";
	$f[]="	then";
	$f[]="		log_daemon_msg \"Starting \$DESC\" \"\$NAME\" is disabled";
	$f[]="		return 2";
	$f[]="	fi";
	$f[]="$runcmd";
	$f[]="DNSMASQ_OPTS=\" -C /etc/dnsmasq.conf\"";
	$f[]="        # Return";
	$f[]="	#   0 if daemon has been started";
	$f[]="	#   1 if daemon was already running";
	$f[]="	#   2 if daemon could not be started";
	$f[]="";
	$f[]="        # /var/run may be volatile, so we need to ensure that";
	$f[]="        # /var/run/dnsmasq exists here as well as in postinst";
	$f[]="        if [ ! -d /var/run/dnsmasq ]; then";
	$f[]="           mkdir /var/run/dnsmasq || return 2";
	$f[]="           chown dnsmasq:nogroup /var/run/dnsmasq || return 2";
	$f[]="        fi";
	$f[]="";
	$f[]="	start-stop-daemon --start --quiet --pidfile /var/run/dnsmasq/\$NAME.pid --exec \$DAEMON --test > /dev/null || return 1";
	$f[]="	start-stop-daemon --start --quiet --pidfile /var/run/dnsmasq/\$NAME.pid --exec \$DAEMON -- -x /var/run/dnsmasq/\$NAME.pid \${MAILHOSTNAME:+ -m \$MAILHOSTNAME} \${MAILTARGET:+ -t \$MAILTARGET} \${DNSMASQ_USER:+ -u \$DNSMASQ_USER} \${DNSMASQ_INTERFACE:+ \$DNSMASQ_INTERFACES} \${DHCP_LEASE:+ -l \$DHCP_LEASE} \${DOMAIN_SUFFIX:+ -s \$DOMAIN_SUFFIX} \${RESOLV_CONF:+ -r \$RESOLV_CONF} \${CACHESIZE:+ -c \$CACHESIZE} \${CONFIG_DIR:+ -7 \$CONFIG_DIR} \${DNSMASQ_OPTS:+ \$DNSMASQ_OPTS} || return 2";
	$f[]="}";
	$f[]="";
	$f[]="start_resolvconf()";
	$f[]="{";
	$f[]="# If interface \"lo\" is explicitly disabled in /etc/default/dnsmasq";
	$f[]="# Then dnsmasq won't be providing local DNS, so don't add it to";
	$f[]="# the resolvconf server set.";
	$f[]="	for interface in \$DNSMASQ_EXCEPT";
	$f[]="	do";
	$f[]="		[ \$interface = lo ] && return";
	$f[]="	done";
	$f[]="";
	$f[]="        if [ -x /sbin/resolvconf ] ; then";
	$f[]="		echo \"nameserver 127.0.0.1\" | /sbin/resolvconf -a lo.\$NAME";
	$f[]="	fi";
	$f[]="	return 0";
	$f[]="}";
	$f[]="";
	$f[]="stop()";
	$f[]="{";
	$f[]="	# Return";
	$f[]="	#   0 if daemon has been stopped";
	$f[]="	#   1 if daemon was already stopped";
	$f[]="	#   2 if daemon could not be stopped";
	$f[]="	#   other if a failure occurred";
	$f[]="	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile /var/run/dnsmasq/\$NAME.pid --name \$NAME";
	$f[]="	RETVAL=\"\$?\"";
	$f[]="	[ \"\$RETVAL\" = 2 ] && return 2";
	$f[]="	return \"\$RETVAL\"";
	$f[]="}";
	$f[]="";
	$f[]="stop_resolvconf()";
	$f[]="{";
	$f[]="	if [ -x /sbin/resolvconf ] ; then";
	$f[]="		/sbin/resolvconf -d lo.\$NAME";
	$f[]="	fi";
	$f[]="	return 0";
	$f[]="}";
	$f[]="";
	$f[]="status()";
	$f[]="{";
	$f[]="	# Return";
	$f[]="	#   0 if daemon is running";
	$f[]="	#   1 if daemon is dead and pid file exists";
	$f[]="	#   3 if daemon is not running";
	$f[]="	#   4 if daemon status is unknown";
	$f[]="	start-stop-daemon --start --quiet --pidfile /var/run/dnsmasq/\$NAME.pid --exec \$DAEMON --test > /dev/null";
	$f[]="	case \"\$?\" in";
	$f[]="		0) [ -e \"/var/run/dnsmasq/\$NAME.pid\" ] && return 1 ; return 3 ;;";
	$f[]="		1) return 0 ;;";
	$f[]="		*) return 4 ;;";
	$f[]="	esac";
	$f[]="}";
	$f[]="";
	$f[]="case \"\$1\" in";
	$f[]="  start)";
	$f[]="	test \"\$ENABLED\" != \"0\" || exit 0";
	$f[]="	log_daemon_msg \"Starting \$DESC\" \"\$NAME\" Enabled=\$ENABLED";
	$f[]="	start";
	$f[]="	case \"\$?\" in";
	$f[]="		0)";
	$f[]="			log_end_msg 0";
	$f[]="			start_resolvconf";
	$f[]="			exit 0";
	$f[]="			;;";
	$f[]="		1)";
	$f[]="			log_success_msg \"(already running)\"";
	$f[]="			exit 0";
	$f[]="			;;";
	$f[]="		*)";
	$f[]="			log_end_msg 1";
	$f[]="			exit 1";
	$f[]="			;;";
	$f[]="	esac";
	$f[]="	;;";
	$f[]="  stop)";
	$f[]="	stop_resolvconf";
	$f[]="	if [ \"\$ENABLED\" != \"0\" ]; then";
	$f[]="             log_daemon_msg \"Stopping \$DESC\" \"\$NAME\"";
	$f[]="	fi";
	$f[]="	stop";
	$f[]="        RETVAL=\"\$?\"";
	$f[]="	if [ \"\$ENABLED\" = \"0\" ]; then";
	$f[]="	    case \"\$RETVAL\" in";
	$f[]="	       0) log_daemon_msg \"Stopping \$DESC\" \"\$NAME\"; log_end_msg 0 ;;";
	$f[]="            esac ";
	$f[]="	    exit 0";
	$f[]="	fi";
	$f[]="	case \"\$RETVAL\" in";
	$f[]="		0) log_end_msg 0 ; exit 0 ;;";
	$f[]="		1) log_warning_msg \"(not running)\" ; exit 0 ;;";
	$f[]="		*) log_end_msg 1; exit 1 ;;";
	$f[]="	esac";
	$f[]="	;;";
	$f[]="  restart|force-reload)";
	$f[]="	test \"\$ENABLED\" != \"0\" || exit 1";
	$f[]="	\$DAEMON --test \${CONFIG_DIR:+ -7 \$CONFIG_DIR} \${DNSMASQ_OPTS:+ \$DNSMASQ_OPTS} >/dev/null 2>&1";
	$f[]="	if [ \$? -ne 0 ]; then";
	$f[]="	    NAME=\"configuration syntax check\"";
	$f[]="	    RETVAL=\"2\"";
	$f[]="	else   ";
	$f[]="	    stop_resolvconf";
	$f[]="	    stop";
	$f[]="	    RETVAL=\"\$?\"";
	$f[]="        fi";
	$f[]="	log_daemon_msg \"Restarting \$DESC\" \"\$NAME\"";
	$f[]="	case \"\$RETVAL\" in";
	$f[]="		0|1)";
	$f[]="		        sleep 2";
	$f[]="			start";
	$f[]="			case \"\$?\" in";
	$f[]="				0)";
	$f[]="					log_end_msg 0";
	$f[]="					start_resolvconf";
	$f[]="					exit 0";
	$f[]="					;;";
	$f[]="			        *)";
	$f[]="					log_end_msg 1";
	$f[]="					exit 1";
	$f[]="					;;";
	$f[]="			esac";
	$f[]="			;;";
	$f[]="		*)";
	$f[]="			log_end_msg 1";
	$f[]="			exit 1";
	$f[]="			;;";
	$f[]="	esac";
	$f[]="	;;";
	$f[]="  status)";
	$f[]="	log_daemon_msg \"Checking \$DESC\" \"\$NAME\"";
	$f[]="	status";
	$f[]="	case \"\$?\" in";
	$f[]="		0) log_success_msg \"(running)\" ; exit 0 ;;";
	$f[]="		1) log_success_msg \"(dead, pid file exists)\" ; exit 1 ;;";
	$f[]="		3) log_success_msg \"(not running)\" ; exit 3 ;;";
	$f[]="		*) log_success_msg \"(unknown)\" ; exit 4 ;;";
	$f[]="	esac";
	$f[]="	;;";
	$f[]="  *)";
	$f[]="	echo \"Usage: /etc/init.d/\$NAME {start|stop|restart|force-reload|status}\" >&2";
	$f[]="	exit 3";
	$f[]="	;;";
	$f[]="esac";
	$f[]="";
	$f[]="exit 0";
	$f[]="";	
	@file_put_contents("/etc/init.d/dnsmasq", @implode("\n", $f));
	echo "dnsmasq: [INFO] dnsmasq path `/etc/init.d/dnsmasq` done\n";	
}

function nscd_init_debian(){
	$unix=new unix();
	$sock=new sockets();
	$servicebin=$unix->find_program("update-rc.d");
	$users=new usersMenus();
	if(!is_file("/etc/init.d/nscd")){return;}
	if(!is_file($servicebin)){return;}
	$php=$unix->LOCATE_PHP5_BIN();
	if(!is_file($servicebin)){return;}
	$EnableNSCD=$sock->GET_INFO("EnableNSCD");
	if(!is_numeric($EnableNSCD)){$EnableNSCD=0;}
	echo "nscd: [INFO] ncsd enabled = `$EnableNSCD`\n";
	$f[]="#!/bin/sh";
	$f[]="### BEGIN INIT INFO";
	$f[]="# Provides:          nscd";
	$f[]="# Required-Start:    \$remote_fs \$syslog";
	$f[]="# Required-Stop:     \$remote_fs \$syslog";
	$f[]="# Default-Start:     2 3 4 5";
	$f[]="# Default-Stop:      0 1 6";
	$f[]="# Short-Description: Starts the Name Service Cache Daemon";
	$f[]="### END INIT INFO";
	$f[]="";
	$f[]="#";
	$f[]="# nscd:		Starts the Name Service Cache Daemon";
	$f[]="#";
	$f[]="# description:  This is a daemon which handles passwd and group lookups";
	$f[]="#		for running programs and caches the results for the next";
	$f[]="#		query.  You should start this daemon only if you use";
	$f[]="#		slow Services like NIS or NIS+";
	$f[]="";
	$f[]="PATH=\"/sbin:/usr/sbin:/bin:/usr/bin\"";
	$f[]="NAME=\"nscd\"";
	$f[]="DESC=\"Name Service Cache Daemon\"";
	$f[]="DAEMON=\"/usr/sbin/nscd\"";
	$f[]="PIDFILE=\"/var/run/nscd/nscd.pid\"";
	$f[]="";
	$f[]="# Sanity checks.";
	$f[]="umask 022";
	$f[]="[ -f /etc/nscd.conf ] || exit 0";
	$f[]="[ -x \"\$DAEMON\" ] || exit 0";
	$f[]="[ -d /var/run/nscd ] || mkdir -p /var/run/nscd";
	$f[]=". /lib/lsb/init-functions";
	$f[]="";
	$f[]="start_nscd()";
	$f[]="{";
	$f[]="ENABLED=$EnableNSCD";
	$f[]="	if [ \$ENABLED -eq 0 ]";
	$f[]="	then";
	$f[]="		return 1";
	$f[]="	fi";
	$f[]="	log_daemon_msg \"Starting \$DESC\" \"\$NAME\"";	
	$f[]="	# Return";
	$f[]="	#   0 if daemon has been started or was already running";
	$f[]="	#   2 if daemon could not be started";
	$f[]="	start-stop-daemon --start --quiet --pidfile \"\$PIDFILE\" --exec \"\$DAEMON\" --test > /dev/null || return 0";
	$f[]="	start-stop-daemon --start --quiet --pidfile \"\$PIDFILE\" --exec \"\$DAEMON\" || return 2";
	$f[]="}";
	$f[]="";
	$f[]="stop_nscd()";
	$f[]="{";

	$f[]="	# Return";
	$f[]="	#   0 if daemon has been stopped";
	$f[]="	#   1 if daemon was already stopped";
	$f[]="	#   2 if daemon could not be stopped";
	$f[]="";
	$f[]="	# we try to stop using nscd --shutdown, that fails also if nscd is not present.";
	$f[]="	# in that case, fallback to \"good old methods\"";
	$f[]="	RETVAL=0";
	$f[]="	if ! \$DAEMON --shutdown; then";
	$f[]="		start-stop-daemon --stop --quiet --pidfile \"\$PIDFILE\" --name \"\$NAME\" --test > /dev/null";
	$f[]="		RETVAL=\"\$?\"";
	$f[]="		[ \"\$?\" -ne 0  -a  \"\$?\" -ne 1 ] && return 2";
	$f[]="	fi";
	$f[]="";
	$f[]="	# Wait for children to finish too";
	$f[]="	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec \"\$DAEMON\" > /dev/null";
	$f[]="	[ \"\$?\" -ne 0  -a  \"\$?\" -ne 1 ] && return 2";
	$f[]="	rm -f \"\$PIDFILE\"";
	$f[]="	return \"\$RETVAL\"";
	$f[]="}";
	$f[]="";
	$f[]="status()";
	$f[]="{";
	$f[]="	# Return";
	$f[]="	#   0 if daemon is stopped";
	$f[]="	#   1 if daemon is running";
	$f[]="	start-stop-daemon --start --quiet --pidfile \"\$PIDFILE\" --exec \"\$DAEMON\" --test > /dev/null || return 1";
	$f[]="	return 0";
	$f[]="}";
	$f[]="";
	$f[]="case \"\$1\" in";
	$f[]="start)";
	$f[]="	start_nscd";
	$f[]="	case \"\$?\" in";
	$f[]="		0) log_end_msg 0 ; exit 0 ;;";
	$f[]="		1) log_warning_msg \" (already running).\" ; exit 0 ;;";
	$f[]="		*) log_end_msg 1 ; exit 1 ;;";
	$f[]="	esac";
	$f[]="	;;";
	$f[]="stop)";
	$f[]="	log_daemon_msg \"Stopping \$DESC\" \"\$NAME\"";
	$f[]="	stop_nscd";
	$f[]="	case \"\$?\" in";
	$f[]="		0) log_end_msg 0 ; exit 0 ;;";
	$f[]="		1) log_warning_msg \" (not running).\" ; exit 0 ;;";
	$f[]="		*) log_end_msg 1 ; exit 1 ;;";
	$f[]="	esac";
	$f[]="	;;";
	$f[]="restart|force-reload)";
	$f[]="	log_daemon_msg \"Restarting \$DESC\" \"\$NAME\"";
	$f[]="	for table in passwd group hosts ; do";
	$f[]="		\$DAEMON --invalidate \$table";
	$f[]="	done";
	$f[]="	stop_nscd";
	$f[]="	case \"\$?\" in";
	$f[]="	0|1)";
	$f[]="		start_nscd";
	$f[]="		case \"\$?\" in";
	$f[]="			0) log_end_msg 0 ; exit 0 ;;";
	$f[]="			1) log_failure_msg \" (failed -- old process is still running).\" ; exit 1 ;;";
	$f[]="			*) log_failure_msg \" (failed to start).\" ; exit 1 ;;";
	$f[]="		esac";
	$f[]="		;;";
	$f[]="	*)";
	$f[]="		log_failure_msg \" (failed to stop).\"";
	$f[]="		exit 1";
	$f[]="		;;";
	$f[]="	esac";
	$f[]="	;;";
	$f[]="status)";
	$f[]="	log_daemon_msg \"Status of \$DESC service: \"";
	$f[]="	status";
	$f[]="	case \"\$?\" in";
	$f[]="		0) log_failure_msg \"not running.\" ; exit 3 ;;";
	$f[]="		1) log_success_msg \"running.\" ; exit 0 ;;";
	$f[]="	esac";
	$f[]="	;;";
	$f[]="*)";
	$f[]="	echo \"Usage: /etc/init.d/\$NAME {start|stop|force-reload|restart|status}\" >&2";
	$f[]="	exit 1";
	$f[]="	;;";
	$f[]="esac";	
	@file_put_contents("/etc/init.d/nscd", @implode("\n", $f));
	echo "nscd: [INFO] nscd path `/etc/init.d/nscd` done\n";		
}


