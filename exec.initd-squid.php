<?php
$GLOBALS["VERBOSE"]=false;
if(preg_match("#--verbose#",implode(" ",$argv))){$GLOBALS["VERBOSE"]=true;}if($GLOBALS["VERBOSE"]){ini_set('display_errors', 1);	ini_set('html_errors',0);ini_set('display_errors', 1);ini_set('error_reporting', E_ALL);}
if(posix_getuid()<>0){die("Cannot be used in web server mode\n\n");}
include_once(dirname(__FILE__).'/ressources/class.ldap.inc');
include_once(dirname(__FILE__)."/framework/frame.class.inc");



squid_debian();
squid_redhat();

function squid_debian(){
$unix=new unix();
$sock=new sockets();
$servicebin=$unix->find_program("update-rc.d");
if(!is_file($servicebin)){return;}
if(!is_file($binary)){return;}
$php5=$unix->LOCATE_PHP5_BIN();
$squidbin=$unix->find_program("squid");
if(!is_file($squidbin)){$squidbin=$unix->find_program("squid3");}
if(!is_file($squidbin)){writelogs("squid, no such binary file",__FUNCTION__,__FILE__,__LINE__);}


$SQUIDEnable=$sock->GET_INFO("SQUIDEnable");
if(!is_numeric($SQUIDEnable)){$SQUIDEnable=1;}

$f[]="#! /bin/sh";
$f[]="#";
$f[]="# squid3 Startup script for the SQUID HTTP proxy-cache.";
$f[]="#";
$f[]="# Version:	@(#)squid3.rc  1.0  07-Jul-2006  luigi@debian.org";
$f[]="# Artica writen on:	\"".date("Y-m-d H:i:s")."\"";
$f[]="#";
$f[]="### BEGIN INIT INFO";
$f[]="# Provides:          squid3";
$f[]="# Required-Start:    \$network \$remote_fs \$syslog";
$f[]="# Required-Stop:     \$network \$remote_fs \$syslog";
$f[]="# Should-Start:      \$named";
$f[]="# Should-Stop:       \$named";
$f[]="# Default-Start:     2 3 4 5";
$f[]="# Default-Stop:      0 1 6";
$f[]="# Short-Description: Squid HTTP Proxy version 3.2x";
$f[]="### END INIT INFO";
$f[]="";
$f[]="NAME=squid3";
$f[]="DESC=\"Squid HTTP Proxy 3.x\"";
$f[]="DAEMON=$squidbin";
$f[]="PIDFILE=/var/run/squid.pid";
$f[]="CONFIG=/etc/squid3/squid.conf";
$f[]="SQUID_ARGS=\"-YC -f \$CONFIG\"";
$f[]="ENABLED=$SQUIDEnable";
$f[]="";
$f[]=". /lib/lsb/init-functions";
$f[]="";
$f[]="PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin";
$f[]="";
$f[]="[ -x \$DAEMON ] || exit 0";
$f[]="";
$f[]="ulimit -HSd unlimited";
$f[]="";
$f[]="find_cache_dir () {";
$f[]="        w=\"     \" # space tab";
$f[]="        res=`sed -ne '";
$f[]="                s/^'\$1'['\"\$w\"']\+[^'\"\$w\"']\+['\"\$w\"']\+\([^'\"\$w\"']\+\).*\$/\1/p;";
$f[]="                t end;";
$f[]="                d;";
$f[]="                :end q' < \$CONFIG`";
$f[]="        [ -n \"\$res\" ] || res=\$2";
$f[]="        echo \"\$res\"";
$f[]="}";
$f[]="";
$f[]="find_cache_type () {";
$f[]="	w=\" 	\" # space tab";
$f[]="	res=`sed -ne '";
$f[]="		s/^'\$1'['\"\$w\"']\+\([^'\"\$w\"']\+\).*\$/\1/p;";
$f[]="		t end;";
$f[]="		d;";
$f[]="		:end q' < \$CONFIG`";
$f[]="	[ -n \"\$res\" ] || res=\$2";
$f[]="	echo \"\$res\"";
$f[]="}";
$f[]="";
$f[]="start () {";
$f[]="	if [ \$ENABLED -eq 0 ]";
$f[]="	then";
$f[]="		log_daemon_msg \"\$DESC\" \"\$NAME\" is disabled";
$f[]="		exit 1";
$f[]="	fi";
$f[]="	cache_dir=`find_cache_dir cache_dir /var/spool/squid3`";
$f[]="	cache_type=`find_cache_type cache_dir ufs`";
$f[]="";
$f[]="	#";
$f[]="    # Create spool dirs if they don't exist.";
$f[]="    #";
$f[]="	if [ \"\$cache_type\" = \"coss\" -a -d \"\$cache_dir\" -a ! -f \"\$cache_dir/stripe\" ] || [ \"\$cache_type\" != \"coss\" -a -d \"\$cache_dir\" -a ! -d \"\$cache_dir/00\" ]";
$f[]="	then";
$f[]="		log_warning_msg \"Creating \$DESC cache structure\"";
$f[]="		\$DAEMON -z";
$f[]="	fi";
$f[]="";
$f[]="	umask 027";
$f[]="	ulimit -HSd unlimited";
$f[]="	$php5 /usr/share/artica-postfix/exec.squid.transparent.php >/dev/null 2>&1";
$f[]="	cd \$cache_dir";
$f[]="	start-stop-daemon --quiet --start --pidfile \$PIDFILE --exec \$DAEMON -- \$SQUID_ARGS < /dev/null";
$f[]="	return \$?";
$f[]="}";
$f[]="";
$f[]="stop () {";
$f[]="	PID=`cat \$PIDFILE 2>/dev/null`";
$f[]="	start-stop-daemon --stop --quiet --pidfile \$PIDFILE --exec \$DAEMON";
$f[]="	#";
$f[]="	#	Now we have to wait until squid has _really_ stopped.";
$f[]="	#";
$f[]="	sleep 2";
$f[]="	if test -n \"\$PID\" && kill -0 \$PID 2>/dev/null";
$f[]="	then";
$f[]="		log_action_begin_msg \" Waiting\"";
$f[]="		cnt=0";
$f[]="		while kill -0 \$PID 2>/dev/null";
$f[]="		do";
$f[]="			cnt=`expr \$cnt + 1`";
$f[]="			if [ \$cnt -gt 24 ]";
$f[]="			then";
$f[]="				log_action_end_msg 1";
$f[]="				return 1";
$f[]="			fi";
$f[]="			sleep 5";
$f[]="			log_action_cont_msg \"\"";
$f[]="		done";
$f[]="		log_action_end_msg 0";
$f[]="		return 0";
$f[]="	else";
$f[]="		return 0";
$f[]="	fi";
$f[]="}";
$f[]="";
$f[]="case \"\$1\" in";
$f[]="    start)";
$f[]="	log_daemon_msg \"Starting \$DESC\" \"\$NAME\"";
$f[]="	if start ; then";
$f[]="		log_end_msg \$?";
$f[]="	else";
$f[]="		log_end_msg \$?";
$f[]="	fi";
$f[]="	;;";
$f[]="    stop)";
$f[]="	log_daemon_msg \"Stopping \$DESC\" \"\$NAME\"";
$f[]="	if stop ; then";
$f[]="		log_end_msg \$?";
$f[]="	else";
$f[]="		log_end_msg \$?";
$f[]="	fi";
$f[]="	;;";
$f[]="    reload|force-reload)";
$f[]="	log_action_msg \"Reloading \$DESC configuration files\"";
$f[]="	start-stop-daemon --stop --signal 1 --pidfile \$PIDFILE --quiet --exec \$DAEMON";
$f[]="	log_action_end_msg 0";
$f[]="	;;";
$f[]="    restart)";
$f[]="	log_daemon_msg \"Restarting \$DESC\" \"\$NAME\"";
$f[]="	stop";
$f[]="	if start ; then";
$f[]="		log_end_msg \$?";
$f[]="	else";
$f[]="		log_end_msg \$?";
$f[]="	fi";
$f[]="	;;";
$f[]="    *)";
$f[]="	echo \"Usage: /etc/init.d/\$NAME {start|stop|reload|force-reload|restart}\"";
$f[]="	exit 3";
$f[]="	;;";
$f[]="esac";
$f[]="";
$f[]="exit 0";
$f[]="";


echo "Squid init.d debian mode done\n";
@file_put_contents("/etc/init.d/squid", @implode("\n", $f));
@chmod("/etc/init.d/squid", 0755);
shell_exec("$debianbin -f squid defaults >/dev/null 2>&1");


}

function squid_redhat(){
$unix=new unix();
$redhatbin=$unix->find_program("chkconfig");	
if(!is_file($redhatbin)){return;}
$squidbin=$unix->find_program("squid");
if(!is_file($squidbin)){$squidbin=$unix->find_program("squid3");}
if(!is_file($squidbin)){writelogs("squid, no such binary file",__FUNCTION__,__FILE__,__LINE__);}

$php5=$unix->LOCATE_PHP5_BIN();
$SQUID_ARGS="-YC";
$SQUID_CONF="/etc/squid3/squid.conf";
$f[]="[Unit]";
$f[]="Description=Squid caching proxy";
$f[]="After=syslog.target network.target named.service";
$f[]="";
$f[]="[Service]";
$f[]="Type=forking";
$f[]="LimitNOFILE=16384";
$f[]="EnvironmentFile=/etc/sysconfig/squid";
$f[]="ExecStartPre=/usr/libexec/squid/cache_swap.sh";
$f[]="ExecStart=$squidbin $SQUID_ARGS -f $SQUID_CONF";
$f[]="ExecReload=$squidbin $SQUID_ARGS -k reconfigure -f -f $SQUID_CONF";
$f[]="ExecStop=$squidbin -k shutdown -f $SQUID_CONF";
$f[]="";
$f[]="[Install]";
$f[]="WantedBy=multi-user.target";
if(is_dir("/lib/systemd/system")){
	@file_put_contents("/lib/systemd/system/squid.service", @implode("\n", $f));
}
$f=array();
$f[]="#!/bin/bash";
$f[]="if [ -f /etc/sysconfig/squid ]; then";
$f[]="	. /etc/sysconfig/squid";
$f[]="fi";
$f[]="";
$f[]="SQUID_CONF=\${SQUID_CONF:-\"/etc/squid3/squid.conf\"}";
$f[]="";
$f[]="CACHE_SWAP=`sed -e 's/#.*//g' \$SQUID_CONF | grep cache_dir | awk '{ print \$3 }'`";
$f[]="";
$f[]="for adir in \$CACHE_SWAP; do";
$f[]="	if [ ! -d \$adir/00 ]; then";
$f[]="		echo -n \"init_cache_dir \$adir... \"";
$f[]="		squid -z -F -f \$SQUID_CONF >> /var/log/squid/squid.out 2>&1";
$f[]="	fi";
$f[]="done";
@mkdir("/usr/libexec/squid",0755,true);
@file_put_contents("/usr/libexec/squid/cache_swap.sh",@implode("\n", $f));
@chmod("/usr/libexec/squid/cache_swap.sh",0755);

$f=array();
$f[]="#!/bin/bash";
$f[]="# chkconfig: - 90 25";
$f[]="# pidfile: /var/run/squid.pid";
$f[]="# config: /etc/squid3/squid.conf";
$f[]="#";
$f[]="### BEGIN INIT INFO";
$f[]="# Provides: squid";
$f[]="# Short-Description: starting and stopping Squid Internet Object Cache";
$f[]="# Description: Squid - Internet Object Cache. Internet object caching is \ ";
$f[]="#       a way to store requested Internet objects (i.e., data available \ ";
$f[]="#       via the HTTP, FTP, and gopher protocols) on a system closer to the \ ";
$f[]="#       requesting site than to the source. Web browsers can then use the \ ";
$f[]="#       local Squid cache as a proxy HTTP server, reducing access time as \ ";
$f[]="#       well as bandwidth consumption.";
$f[]="### END INIT INFO";
$f[]="";
$f[]="";
$f[]="PATH=/usr/bin:/sbin:/bin:/usr/sbin";
$f[]="export PATH";
$f[]="";
$f[]="# Source function library.";
$f[]=". /etc/rc.d/init.d/functions";
$f[]="";
$f[]="# Source networking configuration.";
$f[]=". /etc/sysconfig/network";
$f[]="";
$f[]="if [ -f /etc/sysconfig/squid ]; then";
$f[]="	. /etc/sysconfig/squid";
$f[]="fi";
$f[]="";
$f[]="# don't raise an error if the config file is incomplete";
$f[]="# set defaults instead:";
$f[]="SQUID_OPTS=\"$SQUID_ARGS\"";
$f[]="SQUID_PIDFILE_TIMEOUT=\${SQUID_PIDFILE_TIMEOUT:-20}";
$f[]="SQUID_SHUTDOWN_TIMEOUT=\${SQUID_SHUTDOWN_TIMEOUT:-100}";
$f[]="SQUID_CONF=\${SQUID_CONF:-\"/etc/squid3/squid.conf\"}";
$f[]="";
$f[]="prog=\"$squidbin\"";
$f[]="";
$f[]="# determine which one is the cache_swap directory";
$f[]="CACHE_SWAP=`sed -e 's/#.*//g' \$SQUID_CONF | grep cache_dir | awk '{ print \$3 }'`";
$f[]="";
$f[]="RETVAL=0";
$f[]="";
$f[]="probe() {";
$f[]="	# Check that networking is up.";
$f[]="	[ \${NETWORKING} = \"no\" ] && exit 1";
$f[]="";
$f[]="	[ `id -u` -ne 0 ] && exit 4";
$f[]="";
$f[]="	# check if the squid conf file is present";
$f[]="	[ -f \$SQUID_CONF ] || exit 6";
$f[]="}";
$f[]="";
$f[]="start() {";
$f[]="	probe";
$f[]="";
$f[]="	parse=`\$SQUID -k parse -f \$SQUID_CONF 2>&1`";
$f[]="	RETVAL=\$?";
$f[]="	if [ \$RETVAL -ne 0 ]; then";
$f[]="		echo -n \$\"Starting \$prog: \"";
$f[]="		echo_failure";
$f[]="		echo";
$f[]="		echo \"\$parse\"";
$f[]="		return 1";
$f[]="	fi";
$f[]="	for adir in \$CACHE_SWAP; do";
$f[]="		if [ ! -d \$adir/00 ]; then";
$f[]="			echo -n \"init_cache_dir \$adir... \"";
$f[]="			\$SQUID -z -F -f \$SQUID_CONF >> /var/log/squid/squid.out 2>&1";
$f[]="		fi";
$f[]="	done";
$f[]="	$php5 /usr/share/artica-postfix/exec.squid.transparent.php >/dev/null 2>&1";
$f[]="	echo -n \$\"Starting \$prog: \"";
$f[]="	\$SQUID \$SQUID_OPTS -f \$SQUID_CONF >> /var/log/squid/squid.out 2>&1";
$f[]="	RETVAL=\$?";
$f[]="	if [ \$RETVAL -eq 0 ]; then";
$f[]="		timeout=0;";
$f[]="		while : ; do";
$f[]="			[ ! -f /var/run/squid.pid ] || break";
$f[]="			if [ \$timeout -ge \$SQUID_PIDFILE_TIMEOUT ]; then";
$f[]="				RETVAL=1";
$f[]="				break";
$f[]="			fi";
$f[]="			sleep 1 && echo -n \".\"";
$f[]="			timeout=\$((timeout+1))";
$f[]="		done";
$f[]="	fi";
$f[]="	[ \$RETVAL -eq 0 ] && touch /var/lock/subsys/\$SQUID";
$f[]="	[ \$RETVAL -eq 0 ] && echo_success";
$f[]="	[ \$RETVAL -ne 0 ] && echo_failure";
$f[]="	echo";
$f[]="	return \$RETVAL";
$f[]="}";
$f[]="";
$f[]="stop() {";
$f[]="	echo -n \$\"Stopping \$prog: \"";
$f[]="	\$SQUID -k check -f \$SQUID_CONF >> /var/log/squid/squid.out 2>&1";
$f[]="	RETVAL=\$?";
$f[]="	if [ \$RETVAL -eq 0 ] ; then";
$f[]="		\$SQUID -k shutdown -f \$SQUID_CONF &";
$f[]="		rm -f /var/lock/subsys/\$SQUID";
$f[]="		timeout=0";
$f[]="		while : ; do";
$f[]="			[ -f /var/run/squid.pid ] || break";
$f[]="			if [ \$timeout -ge \$SQUID_SHUTDOWN_TIMEOUT ]; then";
$f[]="				echo";
$f[]="				return 1";
$f[]="			fi";
$f[]="			sleep 2 && echo -n \".\"";
$f[]="			timeout=\$((timeout+2))";
$f[]="		done";
$f[]="		echo_success";
$f[]="		echo";
$f[]="	else";
$f[]="		echo_failure";
$f[]="		if [ ! -e /var/lock/subsys/\$SQUID ]; then";
$f[]="			RETVAL=0";
$f[]="		fi";
$f[]="		echo";
$f[]="	fi";
$f[]="	return \$RETVAL";
$f[]="}";
$f[]="";
$f[]="reload() {";
$f[]="	\$SQUID \$SQUID_OPTS -k reconfigure -f \$SQUID_CONF";
$f[]="}";
$f[]="";
$f[]="restart() {";
$f[]="	stop";
$f[]="	start";
$f[]="}";
$f[]="";
$f[]="condrestart() {";
$f[]="	[ -e /var/lock/subsys/squid ] && restart || :";
$f[]="}";
$f[]="";
$f[]="rhstatus() {";
$f[]="	status \$SQUID && \$SQUID -k check -f \$SQUID_CONF";
$f[]="}";
$f[]="";
$f[]="";
$f[]="case \"\$1\" in";
$f[]="start)";
$f[]="	start";
$f[]="	;;";
$f[]="";
$f[]="stop)";
$f[]="	stop";
$f[]="	;;";
$f[]="";
$f[]="reload|force-reload)";
$f[]="	reload";
$f[]="	;;";
$f[]="";
$f[]="restart)";
$f[]="	restart";
$f[]="	;;";
$f[]="";
$f[]="condrestart|try-restart)";
$f[]="	condrestart";
$f[]="	;;";
$f[]="";
$f[]="status)";
$f[]="	rhstatus";
$f[]="	;;";
$f[]="";
$f[]="probe)";
$f[]="	probe";
$f[]="	;;";
$f[]="";
$f[]="*)";
$f[]="	echo \$\"Usage: \$0 {start|stop|status|reload|force-reload|restart|try-restart|probe}\"";
$f[]="	exit 2";
$f[]="esac";
$f[]="";
$f[]="exit \$?";
@file_put_contents("/etc/rc.d/init.d/squid", @implode("\n", $f));
@chmod("/etc/rc.d/init.d/squid", 0755);
if(is_file($redhatbin)){shell_exec("$redhatbin --add squidy >/dev/null 2>&1");
shell_exec("$redhatbin --level 2345 squid on >/dev/null 2>&1");}
}