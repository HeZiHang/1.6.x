<?php
$GLOBALS["VERBOSE"]=false;
if(preg_match("#--verbose#",implode(" ",$argv))){$GLOBALS["VERBOSE"]=true;}if($GLOBALS["VERBOSE"]){ini_set('display_errors', 1);	ini_set('html_errors',0);ini_set('display_errors', 1);ini_set('error_reporting', E_ALL);}
if(posix_getuid()<>0){die("Cannot be used in web server mode\n\n");}
include_once(dirname(__FILE__).'/ressources/class.ldap.inc');
include_once(dirname(__FILE__)."/framework/frame.class.inc");





ZarafaInit();

function zarafa_monitor_debian(){
$unix=new unix();
$servicebin=$unix->find_program("update-rc.d");
if(!is_file($servicebin)){return;}
$binary=$unix->find_program("zarafa-server");
if(!is_file($binary)){return;}
$php5=$unix->LOCATE_PHP5_BIN();
$localgen="$php5 /usr/share/artica-postfix/exec.locale.gen.php --force";

if(is_file("/etc/zarafa/searchscripts/attachments_parser")){@chmod("/etc/zarafa/searchscripts/attachments_parser", 0755);}

$f[]="#! /bin/sh";
$f[]="#";
$f[]="### BEGIN INIT INFO";
$f[]="# Provides:          zarafa-monitor";
$f[]="# Required-Start:    \$syslog \$network \$remote_fs";
$f[]="# Required-Stop:     \$syslog \$network \$remote_fs";
$f[]="# Should-Start:      zarafa-server";
$f[]="# Should-Stop:       zarafa-server";
$f[]="# Default-Start:     2 3 4 5";
$f[]="# Default-Stop:      0 1 6";
$f[]="# Short-Description: Zarafa Collaboration Platform's Quota Monitor";
$f[]="# Description:       The Zarafa Quota Monitor watches the store sizes";
$f[]="#                    of users, and sends warning emails when limits are exceeded.";
$f[]="### END INIT INFO";
$f[]="";
$f[]="PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin";
$f[]="MONITOR=/usr/bin/zarafa-monitor";
$f[]="DESC=\"Zarafa monitor\"";
$f[]="NAME=`basename \$MONITOR`";
$f[]="#QUIETDAEMON=--quiet";
$f[]="PIDFILE=/var/run/zarafa-monitor.pid";
$f[]="MONITOR_ENABLED=\"yes\"";
$f[]="";
$f[]="test -x \$MONITOR || exit 0";
$f[]="";
$f[]="if [ -z \"\$ZARAFA_LOCALE\" ]; then";
$f[]="	ZARAFA_LOCALE=\"C\"";
$f[]="fi";
$f[]="";
$f[]="if [ -e \"\$MONITOR_CONFIG\" ]; then";
$f[]="	MONITOR_OPTS=\"\$MONITOR_OPTS -c \$MONITOR_CONFIG\"";
$f[]="fi";
$f[]="";
$f[]="#set -e";
$f[]="";
$f[]=". /lib/lsb/init-functions";
$f[]="";
$f[]="case \"\$1\" in";
$f[]="  start)";
$f[]="	if [ \"\$MONITOR_ENABLED\" = \"no\" ]; then";
$f[]="		log_warning_msg \"Zarafa Quota Monitor daemon not enabled in /etc/default/zarafa ... not starting\"";
$f[]="		exit 0";
$f[]="	fi";
$f[]="	# Presence of local pointer file";
$f[]="	if [ ! -r /etc/artica-postfix/locales.gen ]";
$f[]="	then";
$f[]="		echo \"locales are not builded, build locales, this take a while\"";
$f[]="		$localgen";
$f[]="  else";
$f[]="		echo \"locales are correctly generated...\"";
$f[]="	fi";
$f[]="	log_begin_msg \"Starting \$DESC: \$NAME\"";
$f[]="	export LC_ALL=\$ZARAFA_LOCALE";
$f[]="	export LANG=\$ZARAFA_LOCALE";
$f[]="	start-stop-daemon --start \$QUIETDAEMON --pidfile \$PIDFILE --exec \$MONITOR -- \$MONITOR_OPTS";
$f[]="	log_end_msg \$?";
$f[]="	unset LC_ALL LANG";
$f[]="	;;";
$f[]="  stop)";
$f[]="	log_begin_msg \"Stopping \$DESC: \$NAME\"";
$f[]="	start-stop-daemon --stop \$QUIETDAEMON --pidfile \$PIDFILE --retry TERM/15/KILL --exec \$MONITOR";
$f[]="	RETVAL=\$?";
$f[]="	rm -f \$PIDFILE";
$f[]="	log_end_msg \$RETVAL";
$f[]="	;;";
$f[]="  restart)";
$f[]="	\$0 stop";
$f[]="	\$0 start";
$f[]="	;;";
$f[]="  status)";
$f[]="	status_of_proc \"\$MONITOR\" \"\$NAME\" && exit 0 || exit \$?";
$f[]="	;;";
$f[]="  reload|force-reload)";
$f[]="	log_begin_msg \"Reloading \$DESC: \$NAME\"";
$f[]="	start-stop-daemon --stop \$QUIETDAEMON --signal HUP --pidfile \$PIDFILE --exec \$MONITOR";
$f[]="	log_end_msg \$?";
$f[]="	;;";
$f[]="  *)";
$f[]="	N=/etc/init.d/\$NAME";
$f[]="	echo \"Usage: \$N {start|stop|restart|reload|force-reload|status}\" >&2";
$f[]="	exit 1";
$f[]="	;;";
$f[]="esac";
$f[]="";
$f[]="exit 0";
@file_put_contents("/etc/init.d/zarafa-monitor", @implode("\n", $f));
@chmod("/etc/init.d/zarafa-monitor", 0755);
shell_exec("$debianbin -f zarafa-monitor defaults >/dev/null 2>&1");
echo "Zarafa monitor init.d debian mode done\n";

$f=array();
$f[]="#! /bin/sh";
$f[]="#";
$f[]="### BEGIN INIT INFO";
$f[]="# Provides:          zarafa-gateway";
$f[]="# Required-Start:    \$syslog \$network \$remote_fs";
$f[]="# Required-Stop:     \$syslog \$network \$remote_fs";
$f[]="# Should-Start:      zarafa-server";
$f[]="# Should-Stop:       zarafa-server";
$f[]="# Default-Start:     2 3 4 5";
$f[]="# Default-Stop:      0 1 6";
$f[]="# Short-Description: Zarafa Collaboration Platform's POP3/IMAP Gateway";
$f[]="# Description:       The Zarafa Gateway allows users";
$f[]="#                    to access their email using the POP3 or IMAP protocol.";
$f[]="### END INIT INFO";
$f[]="";
$f[]="PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin";
$f[]="GATEWAY=/usr/bin/zarafa-gateway";
$f[]="DESC=\"Zarafa gateway\"";
$f[]="NAME=`basename \$GATEWAY`";
$f[]="#QUIETDAEMON=--quiet";
$f[]="PIDFILE=/var/run/zarafa-gateway.pid";
$f[]="GATEWAY_ENABLED=\"yes\"";
$f[]="";
$f[]="test -x \$GATEWAY || exit 0";
$f[]="";
$f[]="if [ -z \"\$ZARAFA_LOCALE\" ]; then";
$f[]="	ZARAFA_LOCALE=\"C\"";
$f[]="fi";
$f[]="";
$f[]="if [ -e \"\$GATEWAY_CONFIG\" ]; then";
$f[]="	GATEWAY_OPTS=\"\$GATEWAY_OPTS -c \$GATEWAY_CONFIG\"";
$f[]="fi";
$f[]="";
$f[]="#set -e";
$f[]="";
$f[]=". /lib/lsb/init-functions";
$f[]="";
$f[]="case \"\$1\" in";
$f[]="  start)";
$f[]="	if [ \"\$GATEWAY_ENABLED\" = \"no\" ]; then";
$f[]="		log_warning_msg \"Zarafa POP3/IMAP Gateway daemon not enabled in /etc/default/zarafa ... not starting\"";
$f[]="		exit 0";
$f[]="	fi";
$f[]="	log_begin_msg \"Starting \$DESC: \$NAME\"";
$f[]="	export LC_ALL=\$ZARAFA_LOCALE";
$f[]="	export LANG=\$ZARAFA_LOCALE";
$f[]="	start-stop-daemon --start \$QUIETDAEMON --pidfile \$PIDFILE --exec \$GATEWAY -- \$GATEWAY_OPTS";
$f[]="	log_end_msg \$?";
$f[]="	unset LC_ALL LANG";
$f[]="	;;";
$f[]="  stop)";
$f[]="	log_begin_msg \"Stopping \$DESC: \$NAME\"";
$f[]="	start-stop-daemon --stop \$QUIETDAEMON --pidfile \$PIDFILE --retry TERM/15/KILL --exec \$GATEWAY";
$f[]="	RETVAL=\$?";
$f[]="	rm -f \$PIDFILE";
$f[]="	log_end_msg \$RETVAL";
$f[]="	;;";
$f[]="  restart)";
$f[]="	\$0 stop";
$f[]="	\$0 start";
$f[]="	;;";
$f[]="  status)";
$f[]="	status_of_proc \"\$GATEWAY\" \"\$NAME\" && exit 0 || exit \$?";
$f[]="	;;";
$f[]="  reload|force-reload)";
$f[]="	log_begin_msg \"Reloading \$DESC: \$NAME\"";
$f[]="	start-stop-daemon --stop \$QUIETDAEMON --signal HUP --pidfile \$PIDFILE --exec \$GATEWAY";
$f[]="	log_end_msg \$?";
$f[]="	;;";
$f[]="  *)";
$f[]="	N=/etc/init.d/\$NAME";
$f[]="	echo \"Usage: \$N {start|stop|restart|force|force-reload|status}\" >&2";
$f[]="	exit 1";
$f[]="	;;";
$f[]="esac";
$f[]="";
$f[]="exit 0";

@file_put_contents("/etc/init.d/zarafa-gateway", @implode("\n", $f));
@chmod("/etc/init.d/zarafa-gateway", 0755);
shell_exec("$debianbin -f zarafa-gateway defaults >/dev/null 2>&1");
echo "Zarafa Gateway init.d debian mode done\n";


}

function zarafa_monitor_redhat(){
$unix=new unix();
$redhatbin=$unix->find_program("chkconfig");	
$binary=$unix->find_program("zarafa-server");
if(!is_file($binary)){return;}
if(!is_file($redhatbin)){return;}
$php5=$unix->LOCATE_PHP5_BIN();
$localgen="$php5 /usr/share/artica-postfix/exec.locale.gen.php --force";
$f[]="#!/bin/bash";
$f[]="#";
$f[]="# zarafa-monitor Zarafa Collaboration Platform's Quota Monitor";
$f[]="#";
$f[]="# chkconfig: 345 86 24";
$f[]="# description: The Zarafa Quota Monitor watches the store sizes of users, and sends warning emails when limits are exceeded.";
$f[]="# processname: /usr/bin/zarafa-monitor";
$f[]="# config: /etc/zarafa/monitor.cfg";
$f[]="# pidfile: /var/run/zarafa-monitor.pid";
$f[]="";
$f[]="### BEGIN INIT INFO";
$f[]="# Provides: zarafa-monitor";
$f[]="# Required-Start: \$local_fs \$network \$remote_fs \$syslog";
$f[]="# Required-Stop: \$local_fs \$network \$remote_fs \$syslog";
$f[]="# Should-Start: zarafa-server";
$f[]="# Should-Stop: zarafa-server";
$f[]="# Short-Description: Zarafa Collaboration Platform's Quota Monitor";
$f[]="# Description: The Zarafa Quota Monitor watches the store sizes";
$f[]="#              of users, and sends warning emails when limits are exceeded.";
$f[]="### END INIT INFO";
$f[]="";
$f[]="MONITORCONFIG=/etc/zarafa/monitor.cfg";
$f[]="MONITORPROGRAM=/usr/bin/zarafa-monitor";
$f[]="";
$f[]="# Sanity checks.";
$f[]="[ -x \$MONITORPROGRAM ] || exit 0";
$f[]="";
$f[]="MONITORCONFIG_OPT=\"\"";
$f[]="[ ! -z \$MONITORCONFIG -a -f \$MONITORCONFIG ] && MONITORCONFIG_OPT=\"-c \$MONITORCONFIG\"";
$f[]="";
$f[]="if [ -z \"\$ZARAFA_LOCALE\" ]; then";
$f[]="	ZARAFA_LOCALE=\"C\"";
$f[]="fi";
$f[]="";
$f[]="# Source function library.";
$f[]=". /etc/rc.d/init.d/functions";
$f[]="";
$f[]="RETVAL=0";
$f[]="monitor=`basename \$MONITORPROGRAM`";
$f[]="lockfile=/var/lock/subsys/\$monitor";
$f[]="pidfile=/var/run/\$monitor.pid";
$f[]="";
$f[]="start() {";
$f[]="	# Start in background, always succeeds";
$f[]="	# Presence of local pointer file";
$f[]="	if [ ! -r /etc/artica-postfix/locales.gen ]";
$f[]="	then";
$f[]="		echo \"locales are not builded, build locales, this take a while\"";
$f[]="		$localgen";
$f[]="  else";
$f[]="		echo \"locales are correctly generated...\"";
$f[]="	fi";
$f[]="	echo -n \$\"Starting \$monitor: \"";
$f[]="	export LC_ALL=\$ZARAFA_LOCALE";
$f[]="	export LANG=\$ZARAFA_LOCALE";
$f[]="	daemon \$MONITORPROGRAM \$MONITORCONFIG_OPT";
$f[]="	RETVAL=\$?";
$f[]="	unset LC_ALL LANG";
$f[]="	echo";
$f[]="	[ \$RETVAL -eq 0 ] && touch \$lockfile";
$f[]="";
$f[]="	return \$RETVAL";
$f[]="}";
$f[]="";
$f[]="stop() {";
$f[]="	echo -n \$\"Stopping \$monitor: \"";
$f[]="	killproc \$MONITORPROGRAM";
$f[]="	RETVAL=\$?";
$f[]="	echo";
$f[]="	[ \$RETVAL -eq 0 ] && rm -f \$lockfile \$pidfile";
$f[]="";
$f[]="	return \$RETVAL";
$f[]="}";
$f[]="";
$f[]="restart() {";
$f[]="	stop";
$f[]="	start";
$f[]="}";
$f[]="";
$f[]="reload() {";
$f[]="	echo -n \$\"Restarting \$monitor: \"";
$f[]="	killproc \$MONITORPROGRAM -SIGHUP";
$f[]="	RETVAL=\$?";
$f[]="	echo";
$f[]="";
$f[]="	return \$RETVAL";
$f[]="}";
$f[]="";
$f[]="# See how we were called.";
$f[]="case \"\$1\" in";
$f[]="    start)";
$f[]="		start";
$f[]="		;;";
$f[]="    stop)";
$f[]="		stop";
$f[]="		;;";
$f[]="    status)";
$f[]="		status \$monitor";
$f[]="		RETVAL=\$?";
$f[]="		;;";
$f[]="    restart|force-reload)";
$f[]="		restart";
$f[]="		;;";
$f[]="    condrestart|try-restart)";
$f[]="		if [ -f \${pidfile} ]; then";
$f[]="			stop";
$f[]="			start";
$f[]="		fi";
$f[]="		;;";
$f[]="    reload)";
$f[]="		reload";
$f[]="		;;";
$f[]="    *)";
$f[]="		echo \$\"Usage: \$monitor {start|stop|status|reload|restart|condrestart|force-reload|try-restart}\"";
$f[]="		RETVAL=1";
$f[]="		;;";
$f[]="esac";
$f[]="";
$f[]="exit \$RETVAL";
@file_put_contents("/etc/init.d/zarafa-monitor", @implode("\n", $f));
@chmod("/etc/init.d/zarafa-monitor", 0755);
if(is_file($redhatbin)){shell_exec("$redhatbin --add zarafa-monitor >/dev/null 2>&1");
shell_exec("$redhatbin --level 2345 zarafa-monitor on >/dev/null 2>&1");}	
echo "Zarafa monitor init.d RedHat mode done\n";	



$f=array();
$f[]="#!/bin/bash";
$f[]="#";
$f[]="# zarafa-gateway Zarafa Collaboration Platform's POP3/IMAP Gateway";
$f[]="#";
$f[]="# chkconfig: 345 86 24";
$f[]="# description: The Zarafa Gateway allows users to access their email using the POP3 or IMAP protocol.";
$f[]="# processname: /usr/bin/zarafa-gateway";
$f[]="# config: /etc/zarafa/gateway.cfg";
$f[]="# pidfile: /var/run/zarafa-gateway.pid";
$f[]="";
$f[]="### BEGIN INIT INFO";
$f[]="# Provides: zarafa-gateway";
$f[]="# Required-Start: \$local_fs \$network \$remote_fs \$syslog";
$f[]="# Required-Stop: \$local_fs \$network \$remote_fs \$syslog";
$f[]="# Should-Start: zarafa-server";
$f[]="# Should-Stop: zarafa-server";
$f[]="# Short-Description: Zarafa Collaboration Platform's POP3/IMAP Gateway";
$f[]="# Description: The Zarafa Gateway allows users";
$f[]="#              to access their email using the POP3 or IMAP protocol.";
$f[]="### END INIT INFO";
$f[]="";
$f[]="GATEWAYCONFIG=/etc/zarafa/gateway.cfg";
$f[]="GATEWAYPROGRAM=/usr/bin/zarafa-gateway";
$f[]="";
$f[]="# Sanity checks.";
$f[]="[ -x \$GATEWAYPROGRAM ] || exit 0";
$f[]="";
$f[]="GATEWAYCONFIG_OPT=\"\"";
$f[]="[ ! -z \$GATEWAYCONFIG -a -f \$GATEWAYCONFIG ] && GATEWAYCONFIG_OPT=\"-c \$GATEWAYCONFIG\"";
$f[]="";
$f[]="[ -f /etc/sysconfig/zarafa ] && . /etc/sysconfig/zarafa";
$f[]="if [ -z \"\$ZARAFA_LOCALE\" ]; then";
$f[]="	ZARAFA_LOCALE=\"C\"";
$f[]="fi";
$f[]="";
$f[]="# Source function library.";
$f[]=". /etc/rc.d/init.d/functions";
$f[]="";
$f[]="RETVAL=0";
$f[]="gateway=`basename \$GATEWAYPROGRAM`";
$f[]="lockfile=/var/lock/subsys/\$gateway";
$f[]="pidfile=/var/run/\$gateway.pid";
$f[]="";
$f[]="start() {";
$f[]="	# Start in background, always succeeds";
$f[]="	echo -n \$\"Starting \$gateway: \"";
$f[]="	export LC_ALL=\$ZARAFA_LOCALE";
$f[]="	export LANG=\$ZARAFA_LOCALE";
$f[]="	daemon \$GATEWAYPROGRAM \$GATEWAYCONFIG_OPT";
$f[]="	RETVAL=\$?";
$f[]="	unset LC_ALL LANG";
$f[]="	echo";
$f[]="	[ \$RETVAL -eq 0 ] && touch \$lockfile";
$f[]="";
$f[]="	return \$RETVAL";
$f[]="}";
$f[]="";
$f[]="stop() {";
$f[]="	echo -n \$\"Stopping \$gateway: \"";
$f[]="	killproc \$GATEWAYPROGRAM";
$f[]="	RETVAL=\$?";
$f[]="	echo";
$f[]="	[ \$RETVAL -eq 0 ] && rm -f \$lockfile \$pidfile";
$f[]="";
$f[]="	return \$RETVAL";
$f[]="}";
$f[]="";
$f[]="restart() {";
$f[]="	stop";
$f[]="	start";
$f[]="}";
$f[]="";
$f[]="reload() {";
$f[]="	echo -n \$\"Restarting \$gateway: \"";
$f[]="	killproc \$GATEWAYPROGRAM -SIGHUP";
$f[]="	RETVAL=\$?";
$f[]="	echo";
$f[]="";
$f[]="	return \$RETVAL";
$f[]="}";
$f[]="";
$f[]="# See how we were called.";
$f[]="case \"\$1\" in";
$f[]="    start)";
$f[]="		start";
$f[]="		;;";
$f[]="    stop)";
$f[]="		stop";
$f[]="		;;";
$f[]="    status)";
$f[]="		status \$gateway";
$f[]="		RETVAL=\$?";
$f[]="		;;";
$f[]="    restart|force-reload)";
$f[]="		restart";
$f[]="		;;";
$f[]="    condrestart|try-restart)";
$f[]="		if [ -f \${pidfile} ]; then";
$f[]="			stop";
$f[]="			start";
$f[]="		fi";
$f[]="		;;";
$f[]="    reload)";
$f[]="		reload";
$f[]="		;;";
$f[]="    *)";
$f[]="		echo \$\"Usage: \$gateway {start|stop|status|reload|restart|condrestart|force-reload|try-restart}\"";
$f[]="		RETVAL=1";
$f[]="		;;";
$f[]="esac";
$f[]="";
$f[]="exit \$RETVAL";
@file_put_contents("/etc/init.d/zarafa-gateway", @implode("\n", $f));
@chmod("/etc/init.d/zarafa-gateway", 0755);
if(is_file($redhatbin)){shell_exec("$redhatbin --add zarafa-gateway >/dev/null 2>&1");
shell_exec("$redhatbin --level 2345 zarafa-gateway on >/dev/null 2>&1");}
echo "Zarafa Gateway init.d RedHat mode done\n";


}

function ZarafaInit(){
	
	$unix=new unix();
	$redhatbin=$unix->find_program("chkconfig");	
	if(is_file($redhatbin)){
		echo "Zarafa updating RedHat mode\n";
		zarafa_monitor_redhat();
		
		ZarafaSearch_redhat();
		zarafa_dagent_redhat();
	}
	$servicebin=$unix->find_program("update-rc.d");
	if(is_file($servicebin)){
		echo "Zarafa updating Debian mode\n";
		zarafa_monitor_debian();
		ZarafaSearch_debian();
		zarafa_dagent_debian();
	}
}
function ZarafaSearch_debian(){
	if(!is_file("/usr/bin/zarafa-search")){return;}
	$sock=new sockets();
	$page=CurrentPageName();
	$EnableZarafaSearch=$sock->GET_INFO("EnableZarafaSearch");
	if(!is_numeric($EnableZarafaSearch)){$EnableZarafaSearch=0;}
	$SEARCH_ENABLED="no";
	if($EnableZarafaSearch==1){$SEARCH_ENABLED="yes";}
	$unix=new unix();
	$servicebin=$unix->find_program("update-rc.d");
	
	
		$f[]="#! /bin/sh";
		$f[]="#";
		$f[]="### BEGIN INIT INFO";
		$f[]="# Provides:          zarafa-search";
		$f[]="# Required-Start:    \$syslog \$network \$remote_fs";
		$f[]="# Required-Stop:     \$syslog \$network \$remote_fs";
		$f[]="# Should-Start:      zarafa-server";
		$f[]="# Should-Stop:       zarafa-server";
		$f[]="# Default-Start:     2 3 4 5";
		$f[]="# Default-Stop:      0 1 6";
		$f[]="# Short-Description: The Search Indexer of the Zarafa Collaboration Platform";
		$f[]="# Description:       The Zarafa Search is the indexer daemon for full-text ";
		$f[]="#                    search through all objects (including attachments)";
		$f[]="### END INIT INFO";
		$f[]="";
		$f[]="PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin";
		$f[]="SEARCH=/usr/bin/zarafa-search";
		$f[]="DESC=\"Zarafa search\"";
		$f[]="NAME=`basename \$SEARCH`";
		$f[]="#QUIETDAEMON=--quiet";
		$f[]="PIDFILE=/var/run/\$NAME.pid";
		$f[]="SEARCH_CONFIG=\"/etc/zarafa/search.cfg\"";
		$f[]="SEARCH_OPTS=\" -c \$SEARCH_CONFIG\"";
		$f[]="SEARCH_ENABLED=\"$SEARCH_ENABLED\"";
		$f[]="";
		$f[]="test -x \$SEARCH || exit 0";
		$f[]="if [ -z \"\$ZARAFA_LOCALE\" ]; then";
		$f[]="	ZARAFA_LOCALE=\"C\"";
		$f[]="fi";
		$f[]="#set -e";
		$f[]="";
		$f[]=". /lib/lsb/init-functions";
		$f[]="";
		$f[]="case \"\$1\" in";
		$f[]="  start)";
		$f[]="	if [ \"\$SEARCH_ENABLED\" = \"no\" ]; then";
		$f[]="		log_warning_msg \"Zarafa Search daemon not enabled in /etc/default/zarafa ... not starting\"";
		$f[]="		exit 0";
		$f[]="	fi";
		$f[]="	log_begin_msg \"Starting \$DESC: \$NAME\"";
		$f[]="	export LC_ALL=\$ZARAFA_LOCALE";
		$f[]="	export LANG=\$ZARAFA_LOCALE";
		$f[]="	start-stop-daemon --start \$QUIETDAEMON --pidfile \$PIDFILE --exec \$SEARCH -- \$SEARCH_OPTS";
		$f[]="	log_end_msg \$?";
		$f[]="	unset LC_ALL LANG";
		$f[]="	;;";
		$f[]="  stop)";
		$f[]="	log_begin_msg \"Stopping \$DESC: \$NAME\"";
		$f[]="	start-stop-daemon --stop \$QUIETDAEMON --pidfile \$PIDFILE --retry TERM/15/KILL --exec \$SEARCH";
		$f[]="	RETVAL=\$?";
		$f[]="	rm -f \$PIDFILE";
		$f[]="	log_end_msg \$RETVAL";
		$f[]="	;;";
		$f[]="  restart)";
		$f[]="	\$0 stop";
		$f[]="	\$0 start";
		$f[]="	;;";
		$f[]="  status)";
		$f[]="	status_of_proc \"\$SEARCH\" \"\$NAME\" && exit 0 || exit \$?";
		$f[]="	;;";
		$f[]="  reload|force-reload)";
		$f[]="	log_begin_msg \"Reloading \$DESC: \$NAME\"";
		$f[]="	start-stop-daemon --stop \$QUIETDAEMON --signal HUP --pidfile \$PIDFILE --exec \$SEARCH";
		$f[]="	log_end_msg \$?";
		$f[]="	;;";
		$f[]="  *)";
		$f[]="	N=/etc/init.d/\$NAME";
		$f[]="	echo \"Usage: \$N {start|stop|restart|reload|force-reload|status}\" >&2";
		$f[]="	exit 1";
		$f[]="	;;";
		$f[]="esac";
		$f[]="";
		$f[]="exit 0";	
		@file_put_contents("/etc/init.d/zarafa-search", @implode("\n", $f));
		@chmod("/etc/init.d/zarafa-search", 0755);
		shell_exec("$debianbin -f zarafa-search defaults >/dev/null 2>&1");
		echo "Zarafa Search init.d debian mode done\n";	
}

function ZarafaSearch_redhat(){
	if(!is_file("/usr/bin/zarafa-search")){return;}
	$sock=new sockets();
	$page=CurrentPageName();
	$EnableZarafaSearch=$sock->GET_INFO("EnableZarafaSearch");
	if(!is_numeric($EnableZarafaSearch)){$EnableZarafaSearch=0;}
	$SEARCH_ENABLED="no";
	if($EnableZarafaSearch==1){$SEARCH_ENABLED="yes";}
	$unix=new unix();
	$servicebin=$unix->find_program("chkconfig");
	$f[]="#!/bin/bash";
	$f[]="#";
	$f[]="# zarafa-search The Search Indexer of the Zarafa Collaboration Platform";
	$f[]="#";
	$f[]="# chkconfig: 345 86 24";
	$f[]="# description: The Zarafa search is an indexer daemon for full-text search through all objects (including attachments)";
	$f[]="# processname: /usr/bin/zarafa-search";
	$f[]="# config: /etc/zarafa/search.cfg";
	$f[]="# pidfile: /var/run/zarafa-search.pid";
	$f[]="";
	$f[]="### BEGIN INIT INFO";
	$f[]="# Provides: zarafa-search";
	$f[]="# Required-Start: \$local_fs \$network \$remote_fs \$syslog";
	$f[]="# Required-Stop: \$local_fs \$network \$remote_fs \$syslog";
	$f[]="# Should-Start: zarafa-server";
	$f[]="# Should-Stop: zarafa-server";
	$f[]="# Short-Description: The Search Indexer of the Zarafa Collaboration Platform";
	$f[]="# Description: The Zarafa search is an indexer daemon for full-text search ";
	$f[]="#              through all objects (including attachments)";
	$f[]="### END INIT INFO";
	$f[]="";
	$f[]="SEARCHCONFIG=/etc/zarafa/search.cfg";
	$f[]="SEARCHPROGRAM=/usr/bin/zarafa-search";
	$f[]="";
	$f[]="# Sanity checks.";
	$f[]="[ -x \$SEARCHPROGRAM ] || exit 0";
	$f[]="";
	$f[]="SEARCHCONFIG_OPT=\"\"";
	$f[]="[ ! -z \$SEARCHCONFIG -a -f \$SEARCHCONFIG ] && SEARCHCONFIG_OPT=\"-c \$SEARCHCONFIG\"";
	$f[]="";
	$f[]="if [ -z \"\$ZARAFA_LOCALE\" ]; then";
	$f[]="	ZARAFA_LOCALE=\"C\"";
	$f[]="fi";
	$f[]="";
	$f[]="# Source function library.";
	$f[]=". /etc/rc.d/init.d/functions";
	$f[]="";
	$f[]="RETVAL=0";
	$f[]="SEARCH_ENABLED=\"$SEARCH_ENABLED\"";
	$f[]="search=`basename \$SEARCHPROGRAM`";
	$f[]="lockfile=/var/lock/subsys/\$search";
	$f[]="pidfile=/var/run/\$search.pid";
	$f[]="";
	$f[]="start() {";
	$f[]="	# Start in background, always succeeds";
	$f[]="	echo -n \$\"Starting \$search: \"";
	$f[]="	if [ \"\$SEARCH_ENABLED\" = \"no\" ]; then";
	$f[]="		echo -n \"Zarafa Search daemon not enabled ... not starting\"";
	$f[]="		exit 0";
	$f[]="	fi";
	$f[]="	export LC_ALL=\$ZARAFA_LOCALE";
	$f[]="	export LANG=\$ZARAFA_LOCALE";
	$f[]="	daemon \$SEARCHPROGRAM \$SEARCHCONFIG_OPT";
	$f[]="	RETVAL=\$?";
	$f[]="	unset LC_ALL LANG";
	$f[]="	echo";
	$f[]="	[ \$RETVAL -eq 0 ] && touch \$lockfile";
	$f[]="";
	$f[]="	return \$RETVAL";
	$f[]="}";
	$f[]="";
	$f[]="stop() {";
	$f[]="	echo -n \$\"Stopping \$search: \"";
	$f[]="	killproc \$SEARCHPROGRAM";
	$f[]="	RETVAL=\$?";
	$f[]="	echo";
	$f[]="	[ \$RETVAL -eq 0 ] && rm -f \$lockfile \$pidfile";
	$f[]="";
	$f[]="	return \$RETVAL";
	$f[]="}";
	$f[]="";
	$f[]="restart() {";
	$f[]="	stop";
	$f[]="	start";
	$f[]="}";
	$f[]="";
	$f[]="reload() {";
	$f[]="	echo -n \$\"Restarting \$search: \"";
	$f[]="	killproc \$SEARCHPROGRAM -SIGHUP";
	$f[]="	RETVAL=\$?";
	$f[]="	echo";
	$f[]="";
	$f[]="	return \$RETVAL";
	$f[]="}";
	$f[]="";
	$f[]="# See how we were called.";
	$f[]="case \"\$1\" in";
	$f[]="    start)";
	$f[]="		start";
	$f[]="		;;";
	$f[]="    stop)";
	$f[]="		stop";
	$f[]="		;;";
	$f[]="    status)";
	$f[]="		status \$search";
	$f[]="		RETVAL=\$?";
	$f[]="		;;";
	$f[]="    restart|force-reload)";
	$f[]="		restart";
	$f[]="		;;";
	$f[]="    condrestart|try-restart)";
	$f[]="		if [ -f \${pidfile} ]; then";
	$f[]="			stop";
	$f[]="			start";
	$f[]="		fi";
	$f[]="		;;";
	$f[]="    reload)";
	$f[]="		reload";
	$f[]="		;;";
	$f[]="    *)";
	$f[]="		echo \$\"Usage: \$search {start|stop|status|reload|restart|condrestart|force-reload|try-restart}\"";
	$f[]="		RETVAL=1";
	$f[]="		;;";
	$f[]="esac";
	$f[]="";
	$f[]="exit \$RETVAL";

	@file_put_contents("/etc/init.d/zarafa-search", @implode("\n", $f));
	@chmod("/etc/init.d/zarafa-search", 0755);
	if(is_file($servicebin)){shell_exec("$servicebin --add zarafa-search >/dev/null 2>&1");
	shell_exec("$redhatbin --level 2345 zarafa-search on >/dev/null 2>&1");}	
	echo "Zarafa Search init.d RedHat mode done\n";
}

function zarafa_dagent_debian(){
	$sock=new sockets();
	$unix=new unix();
	$servicebin=$unix->find_program("update-rc.d");
	
	$f[]="#! /bin/sh";
	$f[]="#";
	$f[]="### BEGIN INIT INFO";
	$f[]="# Provides:          zarafa-dagent";
	$f[]="# Required-Start:    \$syslog \$network \$remote_fs";
	$f[]="# Required-Stop:     \$syslog \$network \$remote_fs";
	$f[]="# Should-Start:      zarafa-server";
	$f[]="# Should-Stop:       zarafa-server";
	$f[]="# Default-Start:     2 3 4 5";
	$f[]="# Default-Stop:      0 1 6";
	$f[]="# Short-Description: Zarafa Collaboration Platform's Delivery Agent";
	$f[]="# Description:       The Zarafa Delivery Agent in LMTP mode can be used to";
	$f[]="#                    run the zarafa-dagent as a daemon. The Zarafa Delivery";
	$f[]="#                    Agent can also be used as a standalone program.";
	$f[]="### END INIT INFO";
	$f[]="";
	$f[]="PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin";
	$f[]="DAGENT=/usr/bin/zarafa-dagent";
	$f[]="DESC=\"Zarafa LMTP dagent\"";
	$f[]="NAME=`basename \$DAGENT`";
	$f[]="#QUIETDAEMON=--quiet";
	$f[]="PIDFILE=/var/run/\$NAME.pid";
	$f[]="DAGENT_ENABLED=\"yes\"";
	$f[]="DAGENT_CONFIG=\"/etc/zarafa/dagent.cfg\"";
	$f[]="test -x \$DAGENT || exit 0";
	$f[]="DAGENT_OPTS=\"-d\"";
	$f[]="";
	$f[]="# Include zarafa defaults if available";
	$f[]="if [ -z \"\$ZARAFA_LOCALE\" ]; then";
	$f[]="	ZARAFA_LOCALE=\"C\"";
	$f[]="fi";
	$f[]="";
	$f[]="DAGENT_OPTS=\"\$DAGENT_OPTS -c \$DAGENT_CONFIG\"";
	$f[]="";
	$f[]="#set -e";
	$f[]="";
	$f[]=". /lib/lsb/init-functions";
	$f[]="";
	$f[]="case \"\$1\" in";
	$f[]="  start)";
	$f[]="	log_begin_msg \"Starting \$DESC: \$NAME\"";
	$f[]="	export LC_ALL=\$ZARAFA_LOCALE";
	$f[]="	export LANG=\$ZARAFA_LOCALE";
	$f[]="	start-stop-daemon --start \$QUIETDAEMON --pidfile \$PIDFILE --exec \$DAGENT -- \$DAGENT_OPTS";
	$f[]="	log_end_msg \$?";
	$f[]="	unset LC_ALL LANG";
	$f[]="	;;";
	$f[]="  stop)";
	$f[]="	log_begin_msg \"Stopping \$DESC: \$NAME\"";
	$f[]="	start-stop-daemon --stop \$QUIETDAEMON --pidfile \$PIDFILE --retry TERM/15/KILL --exec \$DAGENT";
	$f[]="	RETVAL=\$?";
	$f[]="	rm -f \$PIDFILE";
	$f[]="	log_end_msg \$RETVAL";
	$f[]="	;;";
	$f[]="  restart)";
	$f[]="	\$0 stop";
	$f[]="	\$0 start";
	$f[]="	;;";
	$f[]="  status)";
	$f[]="	status_of_proc \"\$DAGENT\" \"\$NAME\" && exit 0 || exit \$?";
	$f[]="	;;";
	$f[]="  reload|force-reload)";
	$f[]="	log_begin_msg \"Reloading \$DESC: \$NAME\"";
	$f[]="	start-stop-daemon --stop \$QUIETDAEMON --signal HUP --pidfile \$PIDFILE --exec \$DAGENT";
	$f[]="	log_end_msg \$?";
	$f[]="	;;";
	$f[]="  *)";
	$f[]="	N=/etc/init.d/\$NAME";
	$f[]="	echo \"Usage: \$N {start|stop|restart|reload|force-reload|status}\" >&2";
	$f[]="	exit 1";
	$f[]="	;;";
	$f[]="esac";
	$f[]="";
	$f[]="exit 0";
	
	@file_put_contents("/etc/init.d/zarafa-dagent", @implode("\n", $f));
	@chmod("/etc/init.d/zarafa-dagent", 0755);
	shell_exec("$debianbin -f zarafa-dagent defaults >/dev/null 2>&1");
	echo "Zarafa agent init.d debian mode done\n";		
}

function zarafa_dagent_redhat(){
$f[]="#!/bin/bash";
$f[]="#";
$f[]="# zarafa-dagent Zarafa Collaboration Platform's Delivery Agent";
$f[]="#";
$f[]="# chkconfig: - 86 24";
$f[]="# description: The Zarafa Delivery Agent in LMTP mode can be used to \ ";
$f[]="#              run the zarafa-dagent as a daemon. The Zarafa Delivery \ ";
$f[]="#              Agent can also be used as a standalone program.";
$f[]="# processname: /usr/bin/zarafa-dagent";
$f[]="# config: /etc/zarafa/dagent.cfg";
$f[]="# pidfile: /var/run/zarafa-dagent.pid";
$f[]="";
$f[]="### BEGIN INIT INFO";
$f[]="# Provides: zarafa-dagent";
$f[]="# Required-Start: \$local_fs \$network \$remote_fs \$syslog";
$f[]="# Required-Stop: \$local_fs \$network \$remote_fs \$syslog";
$f[]="# Should-Start: zarafa-server";
$f[]="# Should-Stop: zarafa-server";
$f[]="# Short-Description: Zarafa Collaboration Platform's Delivery Agent";
$f[]="# Description:       The Zarafa Delivery Agent in LMTP mode can be used to";
$f[]="#                    run the zarafa-dagent as a daemon. The Zarafa Delivery";
$f[]="#                    Agent can also be used as a standalone program.";
$f[]="### END INIT INFO";
$f[]="";
$f[]="DAGENTCONFIG=/etc/zarafa/dagent.cfg";
$f[]="DAGENTPROGRAM=/usr/bin/zarafa-dagent";
$f[]="";
$f[]="# Sanity checks.";
$f[]="[ -x \$DAGENTPROGRAM ] || exit 0";
$f[]="";
$f[]="# the -d option is required to run LMTP mode deamonized";
$f[]="DAGENTCONFIG_OPT=\"-d\"";
$f[]="[ ! -z \$DAGENTCONFIG -a -f \$DAGENTCONFIG ] && DAGENTCONFIG_OPT=\"\$DAGENTCONFIG_OPT -c \$DAGENTCONFIG\"";
$f[]="";
$f[]="if [ -z \"\$ZARAFA_LOCALE\" ]; then";
$f[]="	ZARAFA_LOCALE=\"C\"";
$f[]="fi";
$f[]="";
$f[]="# Source function library.";
$f[]=". /etc/rc.d/init.d/functions";
$f[]="";
$f[]="RETVAL=0";
$f[]="dagent=`basename \$DAGENTPROGRAM`";
$f[]="lockfile=/var/lock/subsys/\$dagent";
$f[]="pidfile=/var/run/\$dagent.pid";
$f[]="";
$f[]="start() {";
$f[]="	# Start in background, always succeeds";
$f[]="	echo -n \$\"Starting \$dagent: \"";
$f[]="	export LC_ALL=\$ZARAFA_LOCALE";
$f[]="	export LANG=\$ZARAFA_LOCALE";
$f[]="	daemon \$DAGENTPROGRAM \$DAGENTCONFIG_OPT";
$f[]="	RETVAL=\$?";
$f[]="	unset LC_ALL LANG";
$f[]="	echo";
$f[]="	[ \$RETVAL -eq 0 ] && touch \$lockfile";
$f[]="";
$f[]="	return \$RETVAL";
$f[]="}";
$f[]="";
$f[]="stop() {";
$f[]="	echo -n \$\"Stopping \$dagent: \"";
$f[]="	killproc \$DAGENTPROGRAM";
$f[]="	RETVAL=\$?";
$f[]="	echo";
$f[]="	[ \$RETVAL -eq 0 ] && rm -f \$lockfile \$pidfile";
$f[]="";
$f[]="	return \$RETVAL";
$f[]="}";
$f[]="";
$f[]="restart() {";
$f[]="	stop";
$f[]="	start";
$f[]="}";
$f[]="";
$f[]="reload() {";
$f[]="	echo -n \$\"Restarting \$dagent: \"";
$f[]="	killproc \$DAGENTPROGRAM -SIGHUP";
$f[]="	RETVAL=\$?";
$f[]="	echo";
$f[]="";
$f[]="	return \$RETVAL";
$f[]="}";
$f[]="";
$f[]="# See how we were called.";
$f[]="case \"\$1\" in";
$f[]="    start)";
$f[]="		start";
$f[]="		;;";
$f[]="    stop)";
$f[]="		stop";
$f[]="		;;";
$f[]="    status)";
$f[]="		status \$dagent";
$f[]="		RETVAL=\$?";
$f[]="		;;";
$f[]="    restart|force-reload)";
$f[]="		restart";
$f[]="		;;";
$f[]="    condrestart|try-restart)";
$f[]="		if [ -f \${pidfile} ]; then";
$f[]="			stop";
$f[]="			start";
$f[]="		fi";
$f[]="		;;";
$f[]="    reload)";
$f[]="		reload";
$f[]="		;;";
$f[]="    *)";
$f[]="		echo \$\"Usage: \$dagent {start|stop|status|reload|restart|condrestart|force-reload|try-restart}\"";
$f[]="		RETVAL=1";
$f[]="		;;";
$f[]="esac";
$f[]="";
$f[]="exit \$RETVAL";	
	@file_put_contents("/etc/init.d/zarafa-dagent", @implode("\n", $f));
	@chmod("/etc/init.d/zarafa-dagent", 0755);
	if(is_file($servicebin)){shell_exec("$servicebin --add zarafa-dagent >/dev/null 2>&1");
	shell_exec("$redhatbin --level 2345 zarafa-dagent on >/dev/null 2>&1");}	
	echo "Zarafa dagent init.d RedHat mode done\n";	
	
}




