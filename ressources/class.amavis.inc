<?php
if(!isset($GLOBALS["EXECUTED_AS_ROOT"])){if(posix_getuid()==0){$GLOBALS["EXECUTED_AS_ROOT"]=true;$GLOBALS["AS_ROOT"]=true;}else{$GLOBALS["EXECUTED_AS_ROOT"]=false;$GLOBALS["AS_ROOT"]=true;}}
include_once(dirname(__FILE__).'/class.main_cf.inc');
include_once(dirname(__FILE__).'/class.ini.inc');
include_once(dirname(__FILE__).'/class.system.network.inc');
include_once(dirname(__FILE__).'/class.maincf.multi.inc');
include_once(dirname(__FILE__).'/class.user.inc');
class amavis{
	
	var $dn;
	var $suffix;
	var $main_array;
	var $amavis_conf;
	var $ldap_error;
	var $table_domains;
	var $ArticaConfig;
	var $extensions=array();
	var $copy_to_domain=null;
	var $copy_to_domain_array=array();
	var $CopyToDomainSpool;
	var $EnableScanSecurity;
	var $AlterMimeHTMLDisclaimer;
	var $EnableAmavisInMasterCF=0;
	var $EnableBlockUsersTroughInternet=0;
	var $EnableQuarantineSpammy=0;
	var $EnableQuarantineSpammy2=0;
	var $EnableLDAPAmavis=0;
	var $EnableAmavisDKIMVerification=0;
	var $AmavisNoInternetTests=0;
	private $AmavisPerUser=0;
	
	function amavis(){
		$users=new usersMenus();
		if(!$users->AMAVIS_INSTALLED){return;}
		$GLOBALS["inet_socket_port"]=array();
		$called=null;
		if(function_exists("debug_backtrace")){try {$trace=@debug_backtrace();if(isset($trace[1])){$called=" called by ". basename($trace[1]["file"])." {$trace[1]["function"]}() line {$trace[1]["line"]}";}} catch (Exception $e) {}}
		if(!isset($GLOBALS["AS_ROOT"])){if(posix_getuid()==0){$GLOBALS["AS_ROOT"]=true;}else{$GLOBALS["AS_ROOT"]=false;}}
		writelogs("init amavis class.... $called ",__CLASS__.'/'.__FUNCTION__,__FILE__);
		$sock=new sockets();
		writelogs("socket initialized",__CLASS__.'/'.__FUNCTION__,__FILE__);
		$this->ArticaConfig=$sock->GET_INFO('AmavisGlobalConfiguration');
		$this->amavis_conf=$sock->GET_INFO('AmavisConfigFile');
		$this->copy_to_domain=$sock->GET_INFO("AmavisCopyToDomain");
		$this->CopyToDomainSpool=$sock->GET_INFO("CopyToDomainSpool");
		$this->EnableScanSecurity=$sock->GET_INFO("EnableScanSecurity");
		$this->EnableAmavisInMasterCF=$sock->GET_INFO("EnableAmavisInMasterCF");
		$this->EnableBlockUsersTroughInternet=$sock->GET_INFO("EnableBlockUsersTroughInternet");
		$this->EnableQuarantineSpammy=$sock->GET_INFO("EnableQuarantineSpammy");
		$this->EnableQuarantineSpammy2=$sock->GET_INFO("EnableQuarantineSpammy2");
		$this->EnableLDAPAmavis=$sock->GET_INFO("EnableLDAPAmavis");
		$this->EnableDKIMVerification=$sock->GET_INFO("EnableAmavisDKIMVerification");
		$this->AmavisPerUser=$sock->GET_INFO("AmavisPerUser");
		if(!is_numeric($this->EnableLDAPAmavis)){$this->EnableLDAPAmavis=0;}
		if(!is_numeric($this->EnableDKIMVerification)){$this->EnableDKIMVerification=0;}
		if(!is_numeric($this->AmavisNoInternetTests)){$this->AmavisNoInternetTests=1;}
		if(!is_numeric($this->AmavisPerUser)){$this->AmavisPerUser=0;}
		
		
		writelogs("this->EnableScanSecurity=$this->EnableScanSecurity",__CLASS__.'/'.__FUNCTION__,__FILE__);
		
		if($this->CopyToDomainSpool==null){
			writelogs("CopyToDomainSpool=/var/spool/artica/copy-to-domain",__CLASS__.'/'.__FUNCTION__,__FILE__);
			$this->CopyToDomainSpool="/var/spool/artica/copy-to-domain";
			$sock->SET_INFO("CopyToDomainSpool","/var/spool/artica/copy-to-domain");
		}
		
		if($this->EnableScanSecurity==null){
			writelogs("SET_INFO:: EnableScanSecurity=1",__CLASS__.'/'.__FUNCTION__,__FILE__);
			$sock->SET_INFO("EnableScanSecurity",1);
			$this->EnableScanSecurity=1;
		}
		
		
		
		
		writelogs("Parse Settings....",__CLASS__.'/'.__FUNCTION__,__FILE__);
		$this->ParseGlobalSettings();
		writelogs("ParseGlobalSettings initialized",__CLASS__.'/'.__FUNCTION__,__FILE__);
		$this->BuildDefaults();
		writelogs("BuildDefaults initialized",__CLASS__.'/'.__FUNCTION__,__FILE__);
		$this->ParseCopyToDomains();
		writelogs("ParseCopyToDomains initialized",__CLASS__.'/'.__FUNCTION__,__FILE__);
		writelogs("Loading amavis class done ....",__CLASS__.'/'.__FUNCTION__,__FILE__);
		}
		
		
	function DisclaimerExample(){
		
		return "<p style=\"font-size:12px\"><i>This email and its attachments may be confidential and are intended solely for the use of the individual to whom it is addressed.<br>
		 Any views or opinions expressed are solely those of the author and do not necessarily represent those of &laquo;[business name]&raquo;.<br>
		If you are not the intended recipient of this email and its attachments, you must take no action based upon them, nor must you copy or show them to anyone.<br>
		<br><br>Please contact the sender if you believe you have received this email in error.</i></p>";
		
	}
	

		
	function ParseGlobalSettings(){
			$ini=new Bs_IniHandler();
			$ini->loadString($this->ArticaConfig);
			$this->main_array=$ini->_params;
			if(trim($this->main_array["FILTER"]["EXT"])<>null){
				$this->extensions=explode(';',$this->main_array["FILTER"]["EXT"]);
			}
			if(!is_array($this->extensions)){$this->extensions=array();}
			}
			
	function del_extentions($ext){
		$myarray=$this->extensions;
		writelogs("deleting banned extentions \"$ext\"",__CLASS__.'/'.__FUNCTION__,__FILE__);
		if(is_array($this->extensions)){
			while (list ($num, $ligne) = each ($this->extensions) ){
				if($ligne==$ext){
					unset($this->extensions[$num]);
				}
				}
		}
		$result=implode(';',$this->extensions);
		writelogs("adding banned extentions after filter \"$result\"",__CLASS__.'/'.__FUNCTION__,__FILE__);
		$this->main_array["FILTER"]["EXT"]=$result;
		reset($this->extensions);
		$this->Save();
		
	}
	
	
	function ParseCopyToDomains(){
		$ini=new Bs_IniHandler();
		$ini->loadString($this->copy_to_domain);
		if(!is_array($ini->_params)){$this->copy_to_domain_array=array();return false;}
		$this->copy_to_domain_array=$ini->_params;
		}
		
	function SaveCopyToDomains(){
		$ini=new Bs_IniHandler();
		$ini->_params=$this->copy_to_domain_array;
		$sock=new sockets();
		$sock->SaveConfigFile($ini->toString(),"AmavisCopyToDomain");
		
	}
	
	
			
	function add_extentions($ext){
		$ext=trim($ext);
		writelogs("adding banned extentions \"$ext\"",__CLASS__.'/'.__FUNCTION__,__FILE__);
		$myarray=$this->extensions;
		if(is_array($myarray)){
			while (list ($num, $ligne) = each ($myarray) ){
				$ext_arr[$ligne]=$ligne;
				}
		}
		
		
		$array=explode(" ",$ext);
		if(!is_array($array)){return false;}
		while (list ($num, $ligne) = each ($array) ){
			
			$ext_arr[$ligne]=$ligne;
		}
		
		unset($this->extensions);
		while (list ($num, $ligne) = each ($ext_arr) ){
			$this->extensions[]=$ligne;
		}
		$result=implode(';',$this->extensions);
		writelogs("adding banned extentions after filter \"$result\"",__CLASS__.'/'.__FUNCTION__,__FILE__);
		$this->main_array["FILTER"]["EXT"]=$result;
		reset($this->extensions);
		$this->Save();
		
		
	}
		
		
	function BuildDefaults(){
		
		if($this->main_array["NETWORK"]["TrustLocalHost"]==null){
			$this->main_array["NETWORK"]["TrustLocalHost"]=0;
			}
		if($this->main_array["NETWORK"]["LocalNetwork"]==null){$this->main_array["NETWORK"]["LocalNetwork"]="10.0.0.0/8,172.16.0.0/12,192.168.0.0/16";}
		if($this->main_array["NETWORK"]["banned_extensions_include_local_net"]==null){$this->main_array["NETWORK"]["banned_extensions_include_local_net"]=0;}
		
		if($this->main_array["BEHAVIORS"]["final_virus_destiny"]==null){$this->main_array["BEHAVIORS"]["final_virus_destiny"]="D_DISCARD";}
		if($this->main_array["BEHAVIORS"]["final_spam_destiny"]==null){$this->main_array["BEHAVIORS"]["final_spam_destiny"]="D_BOUNCE";}
		if($this->main_array["BEHAVIORS"]["final_bad_header_destiny"]==null){$this->main_array["BEHAVIORS"]["final_bad_header_destiny"]="D_PASS";}
		if($this->main_array["BEHAVIORS"]["final_banned_destiny"]==null){$this->main_array["BEHAVIORS"]["final_banned_destiny"]="D_BOUNCE";}
		
		if($this->main_array["BEHAVIORS"]["warnbadhsender"]==null){$this->main_array["BEHAVIORS"]["warnbadhsender"]="0";}
		if($this->main_array["BEHAVIORS"]["warnvirusrecip"]==null){$this->main_array["BEHAVIORS"]["warnvirusrecip"]="0";}
		if($this->main_array["BEHAVIORS"]["warnbannedrecip"]==null){$this->main_array["BEHAVIORS"]["warnbannedrecip"]="0";}
		if($this->main_array["BEHAVIORS"]["warnbadhrecip"]==null){$this->main_array["BEHAVIORS"]["warnbadhrecip"]="0";}
		if($this->main_array["BEHAVIORS"]["warn_offsite"]==null){$this->main_array["BEHAVIORS"]["warn_offsite"]="0";}
		
		if($this->main_array["BEHAVIORS"]["mailfrom_notify_admin"]==null){$this->main_array["BEHAVIORS"]["mailfrom_notify_admin"]="root@localhost.localdomain";}
		if($this->main_array["BEHAVIORS"]["mailfrom_notify_recip"]==null){$this->main_array["BEHAVIORS"]["mailfrom_notify_recip"]="root@localhost.localdomain";}
		if($this->main_array["BEHAVIORS"]["mailfrom_notify_spamadmin"]==null){$this->main_array["BEHAVIORS"]["mailfrom_notify_spamadmin"]="root@localhost.localdomain";}
		if($this->main_array["BEHAVIORS"]["virus_admin"]==null){$this->main_array["BEHAVIORS"]["virus_admin"]="undef";}
		
		
		
		if($this->main_array["BEHAVIORS"]["sa_tag_level_deflt"]==null){$this->main_array["BEHAVIORS"]["sa_tag_level_deflt"]="-999";}
		if($this->main_array["BEHAVIORS"]["sa_tag2_level_deflt"]==null){$this->main_array["BEHAVIORS"]["sa_tag2_level_deflt"]="6.31";}
		if($this->main_array["BEHAVIORS"]["sa_tag3_level_deflt"]==null){$this->main_array["BEHAVIORS"]["sa_tag3_level_deflt"]='10.0';}
		if($this->main_array["BEHAVIORS"]["sa_dsn_cutoff_level"]==null){$this->main_array["BEHAVIORS"]["sa_dsn_cutoff_level"]="9";}
		if($this->main_array["BEHAVIORS"]["sa_kill_level_deflt"]==null){$this->main_array["BEHAVIORS"]["sa_kill_level_deflt"]='15';}
		if($this->main_array["BEHAVIORS"]["spam_subject_tag_maps_enable"]==null){$this->main_array["BEHAVIORS"]["spam_subject_tag_maps_enable"]="no";}
		
		if($this->main_array["BEHAVIORS"]["spam_subject_tag2_maps"]==null){$this->main_array["BEHAVIORS"]["spam_subject_tag2_maps"]="***SPAM*** _SCORE_ (_REQD_)";}
		if($this->main_array["BEHAVIORS"]["sa_quarantine_cutoff_level"]==null){$this->main_array["BEHAVIORS"]["sa_quarantine_cutoff_level"]='25';}
		if($this->main_array["BEHAVIORS"]["log_level"]==null){$this->main_array["BEHAVIORS"]["log_level"]="1";}
		if($this->main_array["BEHAVIORS"]["sa_timeout"]==null){$this->main_array["BEHAVIORS"]["sa_timeout"]="30";}
		
		
		if(!is_numeric($this->main_array["BEHAVIORS"]["always_clean"])){$this->main_array["BEHAVIORS"]["always_clean"]=1;}
		
		
		if(!is_numeric($this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_badh"])){$this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_badh"]=0;}
		if(!is_numeric($this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_spam"])){$this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_spam"]=0;}
		if(!is_numeric($this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_unchecked"])){$this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_unchecked"]=0;}
		if(!is_numeric($this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_banned"])){$this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_banned"]=1;}
		if(!is_numeric($this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_virus"])){$this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_virus"]=1;}
		
		if(!is_numeric($this->main_array["BEHAVIORS"]["max_servers"])){
			if($GLOBALS["AS_ROOT"]){echo "Starting......: ".date("H:i:s")." amavisd-new max_servers is not set, define to 5\n";}
			$this->main_array["BEHAVIORS"]["max_servers"]="5";
		}
		if(intval($this->main_array["BEHAVIORS"]["max_servers"])<1){
			$this->main_array["BEHAVIORS"]["max_servers"]=5;
		}
		
		
		if($this->main_array["BEHAVIORS"]["child_timeout"]==null){$this->main_array["BEHAVIORS"]["child_timeout"]="5*600";}
		if($this->main_array["BEHAVIORS"]["max_requests"]==null){$this->main_array["BEHAVIORS"]["max_requests"]="30";}	
		
		$this->main_array["BEHAVIORS"]["virus_admin"]=str_replace('\\','',$this->main_array["BEHAVIORS"]["virus_admin"]);
		$this->main_array["BEHAVIORS"]["mailfrom_notify_admin"]=str_replace("\\","",$this->main_array["BEHAVIORS"]["mailfrom_notify_admin"]);
		$this->main_array["BEHAVIORS"]["mailfrom_notify_recip"]=str_replace("\\","",$this->main_array["BEHAVIORS"]["mailfrom_notify_recip"]);
		$this->main_array["BEHAVIORS"]["mailfrom_notify_spamadmin"]=str_replace("\\","",$this->main_array["BEHAVIORS"]["mailfrom_notify_spamadmin"]);

		if(!is_numeric($this->main_array["HEADERS"]["X_HEADER"])){$this->main_array["HEADERS"]["X_HEADER"]=1;}
		if(trim($this->main_array["HEADERS"]["X_HEADER_TAG"])==null){$this->main_array["HEADERS"]["X_HEADER_TAG"]="X-Virus-Scanned";}
		
		
		
		
		}
		
		
	
	
	function Save(){
		$ini=new Bs_IniHandler();
		
		
		$ini->_params=$this->main_array;
		$sock=new sockets();
		$this->AlterMimeHTMLDisclaimer=stripslashes($this->AlterMimeHTMLDisclaimer);
		$sock->SET_INFO("EnableScanSecurity",$this->EnableScanSecurity);
		$sock->SET_INFO("EnableAmavisInMasterCF",$this->EnableAmavisInMasterCF);
		$sock->SET_INFO("EnableBlockUsersTroughInternet",$this->EnableBlockUsersTroughInternet);
		$sock->SET_INFO("EnableQuarantineSpammy",$this->main_array["BEHAVIORS"]["spam_quarantine_spammy"]);
		$sock->SET_INFO("EnableQuarantineSpammy2",$this->main_array["BEHAVIORS"]["spam_quarantine_spammy2"]);
		
		writelogs("Saving AlterMimeTXTDisclaimer configuration with cleaned ".strlen($disctxt),__CLASS__.'/'.__FUNCTION__,__FILE__);
		writelogs("Saving amavis configuration...",__CLASS__.'/'.__FUNCTION__,__FILE__);

		$sock->SaveConfigFile($ini->toString(),'AmavisGlobalConfiguration');
		$sock->getFrameWork("cmd.php?amavis-restart=yes");
		
		
		
		if($this->main_array["BEHAVIORS"]["replicate_conf_all_domains"]==1){
			$ldap=new clladp();
			$arr=$ldap->hash_get_all_domains();
			if(is_array($arr)){
				while (list ($num, $val) = each ($arr) ){
					$dom=new DomainsTools();
					$dom->LoadAmavisDomain($num);
					$dom->SetDefaultAmavisConfig();
					
					}
				}
		}
		
		
		
		
		}
		
function CleanHtml($data){
	$data=str_replace("\n",'',$data);
	return $data;
}

public function BuildNetworks(){
	include_once(dirname(__FILE__).'/class.tcpip.inc');
	if($this->main_array["NETWORK"]["TrustLocalHost"]==1){
		$net[]="127.0.0.0/8";
	}
    
	$ldap=new clladp();
	$tcp=new IP();
	$networks=$ldap->load_mynetworks();
	
	
	
	
	if(is_array($networks)){
		while (list ($num, $val) = each ($networks) ){
			$val=trim($val);
			if($val==null){continue;}
			if($val=="127.0.0.1"){continue;}
			if(preg_match("#127\..+#",$val)){continue;}
			if($tcp->isIPAddressOrRange($val)){
				$net[]=$val; 	
			}else{
				if($GLOBALS["EXECUTED_AS_ROOT"]){echo "Starting......: ".date("H:i:s")." amavisd-new Wrong Network value !isIPAddressOrRange(`$val`)\n";}
			}
			
			
		}
	}
	
	$sql="SELECT * FROM amavisd_bypass ORDER BY ip_addr";
	$q=new mysql();
	$results=$q->QUERY_SQL($sql,"artica_backup");
	while($ligne=@mysql_fetch_array($results,MYSQL_ASSOC)){
		$ligne["ip_addr"]=trim($ligne["ip_addr"]);
		$ip=trim($ligne["ip_addr"]);
		if($ip==null){continue;}
		if(is_array($ip)){continue;}
		$aaa=explode(".",$val);if(count($aaa)<3){if($GLOBALS["EXECUTED_AS_ROOT"]){echo "Wrong value $val\n";}continue;}
		$net[]="{$ligne["ip_addr"]}";
	}	
	
	
	$q=new mysql();
	$IPClass=new IP();
	$sql="SELECT ipaddr FROM postfix_whitelist_con";
	$results=$q->QUERY_SQL($sql,"artica_backup");	
	while($ligne=@mysql_fetch_array($results,MYSQL_ASSOC)){
		$ligne["ipaddr"]=trim($ligne["ipaddr"]);
		if(!$IPClass->isIPAddress($ligne["ipaddr"])){
			$ligne["ipaddr"]=gethostbyname($ligne["ipaddr"]);
		}
		if(!$IPClass->isIPAddress($ligne["ipaddr"])){continue;}
		$net[]="{$ligne["ipaddr"]}";
	}
	
	
	if(is_array($net)){
		while (list ($num, $val) = each ($net) ){
			if($GLOBALS["EXECUTED_AS_ROOT"]){echo "Starting......: ".date("H:i:s")." amavisd-new Network :$val\n";}
			$T[$val]=true;
		}
	}
	
	
	
	
	if(is_array($T)){
		while (list ($num, $val) = each ($T) ){
		$net2[]=$num;
		}
		$conf=implode(' ',$net2);
	}
	return $conf;
	
}

function AddNetwork($cdir){
	$net=explode(",",$this->main_array["NETWORK"]["LocalNetwork"]);
	$net[]=$cdir;
	$this->main_array["NETWORK"]["LocalNetwork"]=implode(',',$net);
	$this->Save();
	}
	
private function getInternalIPs(){
	$os=new networking();
	$array=$os->ALL_IPS_GET_ARRAY();
	$array["127.0.0.1"]="127.0.0.1";
	if(!is_array($array)){return null;}
	
	while (list ($num, $ligne) = each ($array) ){
		if(trim($ligne)==null){continue;}
		$newarr[]=$ligne;
	}
	
	return implode(" ",$newarr);
	
}
	
function DelNetwork($index){
	$net=explode(",",$this->main_array["NETWORK"]["LocalNetwork"]);
	unset($net[$index]);
	$this->main_array["NETWORK"]["LocalNetwork"]=@implode(',',$net);
	$this->Save();
	}
	
function GetLocalDomains(){
	//parse ldap table and format maps.
	$ldap=new clladp();
	$domains=array();
	$hash=$ldap->AllDomains();
	if(!is_array($hash)){return null;}
	while (list ($DOMAIN, $ligne) = each ($hash) ){
		$DOMAIN=strtolower($DOMAIN);
		if(strpos(" $DOMAIN", ".")==0){continue;}
		if(preg_match("#in-addr\.arpa$#", $DOMAIN)){continue;}
		$domains[]="'$DOMAIN'";
		
	}
	
	return @implode(",", $domains);
	}
	
	
private function MySQLSettings(){
	include_once(dirname(__FILE__)."/class.amavidb.inc");
	$amavis=new amavisdb();
	$f[]="# MySQL settings AmavisPerUser:$this->AmavisPerUser";
	if($this->AmavisPerUser==1){
		$f[]="\$sql_allow_8bit_address = 1;";
		$f[]="\$sql_select_policy=\"SELECT *,users.id FROM users,policy WHERE (users.policy_id=policy.id) AND (users.email IN (%k)) ORDER BY users.priority DESC\";";
		$f[]="\$sql_select_white_black_list=\"SELECT wb FROM wblist,mailaddr WHERE (wblist.rid=?) AND (wblist.sid=mailaddr.id) AND (mailaddr.email IN (%k)) ORDER BY mailaddr.priority DESC\";";
		$f[]="@lookup_sql_dsn =  ($amavis->dbidsn);";
		$f[]="@storage_sql_dsn = @lookup_sql_dsn;";
		$f[]="\$virus_quarantine_method = 'sql:';";
		$f[]="\$spam_quarantine_method = 'sql:';";
		$f[]="\$banned_files_quarantine_method = 'sql:';";
		$f[]="\$bad_header_quarantine_method = 'sql:';";	
	}
	
	return @implode("\n",$f)."\n";
}
		
function buildconf(){
	$users=new usersMenus();
	$ldap=new clladp();
	if($ldap->ldapFailed){
		if($GLOBALS["EXECUTED_AS_ROOT"]){echo "Starting......: ".date("H:i:s")." amavisd-new LDAP Failed, aborting and die()\n";}
		writelogs("Fatal: LDAP Failed, aborting and die",__CLASS__."/".__FUNCTION__,__FILE__,__LINE__);
		die();
	}
	
	$altermime=false;
	$EnableAmavisInMasterCF=false;
	$sock=new sockets();
	$EnablePostfixMultiInstance=$sock->GET_INFO("EnablePostfixMultiInstance");
	$ArticaAmavisEnablePlugin=$sock->GET_INFO("ArticaAmavisEnablePlugin");
	$AmavisByPassOutgoingMessages=$sock->GET_INFO("AmavisByPassOutgoingMessages");
	$enable_dkim_verification=$sock->GET_INFO("enable_dkim_verification");
	$AmavisDebugSpamassassin=$sock->GET_INFO("AmavisDebugSpamassassin");
	if(!is_numeric($AmavisByPassOutgoingMessages)){$AmavisByPassOutgoingMessages=1;}
	if(!is_numeric($AmavisDebugSpamassassin)){$AmavisDebugSpamassassin=0;}
	if(!is_numeric($EnablePostfixMultiInstance)){$EnablePostfixMultiInstance=0;}
	if(!is_numeric($ArticaAmavisEnablePlugin)){$ArticaAmavisEnablePlugin=1;}
	
	$myhostname=$sock->getFrameWork("cmd.php?full-hostname=yes");
	if($myhostname==null){$myhostname=$users->fqdn;}
	if($GLOBALS["EXECUTED_AS_ROOT"]){
	if(is_file("/usr/local/sbin/amavisd")){
		$tb=explode("\n", @file_get_contents("/usr/local/sbin/amavisd"));
		while (list ($num, $ligne) = each ($tb) ){if(preg_match("#myversion_id.*?=.*?([0-9\.]+)';#", $ligne,$re)){$vv=explode(".",$re[1]);$major=$vv[0];$minor=$vv[1];break;}}}
	}
	
	if($GLOBALS["EXECUTED_AS_ROOT"]){echo "Starting......: ".date("H:i:s")." amavisd-new buildconf() EnablePostfixMultiInstance=$EnablePostfixMultiInstance MAJOR: $major, MINOR:$minor\n";} 
	
	
	if(!preg_match("#\..+?$#",$myhostname)){
		$myhostname="$myhostname.local";
	}
	
		if(!isset($this->main_array["HEADERS"]["X_HEADER_LINE"])){$this->main_array["HEADERS"]["X_HEADER_LINE"]=null;}
		if(!isset($this->main_array["BEHAVIORS"]["virus_admin"])){$this->main_array["BEHAVIORS"]["virus_admin"]=null;}
		if(!isset($this->main_array["BEHAVIORS"]["spam_admin"])){$this->main_array["BEHAVIORS"]["spam_admin"]=null;}
		if(!isset($this->main_array["BEHAVIORS"]["banned_admin"])){$this->main_array["BEHAVIORS"]["banned_admin"]=null;}
		if(!isset($this->main_array["BEHAVIORS"]["bad_header_admin"])){$this->main_array["BEHAVIORS"]["bad_header_admin"]=null;}		
		if(!isset($this->main_array["BEHAVIORS"]["enable_global_cache"])){$this->main_array["BEHAVIORS"]["enable_global_cache"]=null;}	
		if(!isset($this->main_array["BEHAVIORS"]["enable_db"])){$this->main_array["BEHAVIORS"]["enable_db"]=null;}
		if(!isset($this->main_array["BEHAVIORS"]["trust_my_net"])){$this->main_array["BEHAVIORS"]["trust_my_net"]=null;}
		
		if(!isset($this->main_array["BEHAVIORS"]["warnbadhsender"])){$this->main_array["BEHAVIORS"]["warnbadhsender"]=null;}
		if(!isset($this->main_array["BEHAVIORS"]["warnvirussender"])){$this->main_array["BEHAVIORS"]["warnvirussender"]=null;}
		if(!isset($this->main_array["BEHAVIORS"]["warnspamsender"])){$this->main_array["BEHAVIORS"]["warnspamsender"]=null;}
		if(!isset($this->main_array["BEHAVIORS"]["warnbannedsender"])){$this->main_array["BEHAVIORS"]["warnbannedsender"]=null;}
		if(!isset($this->main_array["BEHAVIORS"]["warnvirusrecip"])){$this->main_array["BEHAVIORS"]["warnvirusrecip"]=null;}
		
		if(!isset($this->main_array["BEHAVIORS"]["sa_tag_level_deflt"])){$this->main_array["BEHAVIORS"]["sa_tag_level_deflt"]=null;}
		if(!isset($this->main_array["BEHAVIORS"]["sa_tag2_level_deflt"])){$this->main_array["BEHAVIORS"]["sa_tag2_level_deflt"]=null;}
		if(!isset($this->main_array["BEHAVIORS"]["sa_tag3_level_deflt"])){$this->main_array["BEHAVIORS"]["sa_tag3_level_deflt"]=null;}
		if(!isset($this->main_array["BEHAVIORS"]["sa_quarantine_cutoff_level"])){$this->main_array["BEHAVIORS"]["sa_quarantine_cutoff_level"]=null;}
			
				
		
		
		$this->main_array["BEHAVIORS"]["virus_admin"]=str_replace('\\','',$this->main_array["BEHAVIORS"]["virus_admin"]);
		$this->main_array["BEHAVIORS"]["spam_admin"]=str_replace('\\','',$this->main_array["BEHAVIORS"]["spam_admin"]);
		$this->main_array["BEHAVIORS"]["banned_admin"]=str_replace('\\','',$this->main_array["BEHAVIORS"]["banned_admin"]);
		$this->main_array["BEHAVIORS"]["bad_header_admin"]=str_replace('\\','',$this->main_array["BEHAVIORS"]["bad_header_admin"]);
		
		$this->main_array["BEHAVIORS"]["mailfrom_notify_admin"]=str_replace("\\","",$this->main_array["BEHAVIORS"]["mailfrom_notify_admin"]);
		$this->main_array["BEHAVIORS"]["mailfrom_notify_recip"]=str_replace("\\","",$this->main_array["BEHAVIORS"]["mailfrom_notify_recip"]);
		$this->main_array["BEHAVIORS"]["mailfrom_notify_spamadmin"]=str_replace("\\","",$this->main_array["BEHAVIORS"]["mailfrom_notify_spamadmin"]);
		if($this->main_array["BEHAVIORS"]["sa_tag_level_deflt"]>$this->main_array["BEHAVIORS"]["sa_tag2_level_deflt"]){
		$this->main_array["BEHAVIORS"]["sa_tag_level_deflt"]=$this->main_array["BEHAVIORS"]["sa_tag2_level_deflt"];}
		
		if($this->main_array["BEHAVIORS"]["sa_tag3_level_deflt"]==null){$this->main_array["BEHAVIORS"]["sa_tag3_level_deflt"]='10.0';}
		if($this->main_array["BEHAVIORS"]["sa_kill_level_deflt"]==null){$this->main_array["BEHAVIORS"]["sa_kill_level_deflt"]='15';}
		if($this->main_array["BEHAVIORS"]["sa_quarantine_cutoff_level"]==null){$this->main_array["BEHAVIORS"]["sa_quarantine_cutoff_level"]='25';}
		

		$this->EnableQuarantineSpammy=$this->main_array["BEHAVIORS"]["spam_quarantine_spammy"];
		$this->EnableQuarantineSpammy2=$this->main_array["BEHAVIORS"]["spam_quarantine_spammy2"];
		
		
		if($this->main_array["BEHAVIORS"]["sa_tag3_level_deflt"]<$this->main_array["BEHAVIORS"]["sa_tag2_level_deflt"]){
			$this->main_array["BEHAVIORS"]["sa_tag3_level_deflt"]=$this->main_array["BEHAVIORS"]["sa_tag2_level_deflt"]+1;
		}
		
		if($this->main_array["BEHAVIORS"]["sa_kill_level_deflt"]<$this->main_array["BEHAVIORS"]["sa_tag2_level_deflt"]){
			$this->main_array["BEHAVIORS"]["sa_kill_level_deflt"]=$this->main_array["BEHAVIORS"]["sa_tag3_level_deflt"];
		}	

		if($this->main_array["BEHAVIORS"]["warnbadhsender"]==null){$this->main_array["BEHAVIORS"]["warnbadhsender"]="undef";}
		if($this->main_array["BEHAVIORS"]["warnvirussender"]==null){$this->main_array["BEHAVIORS"]["warnvirussender"]="undef";}
		if($this->main_array["BEHAVIORS"]["warnspamsender"]==null){$this->main_array["BEHAVIORS"]["warnspamsender"]="undef";}
		if($this->main_array["BEHAVIORS"]["warnbannedsender"]==null){$this->main_array["BEHAVIORS"]["warnbannedsender"]="undef";}
		if($this->main_array["BEHAVIORS"]["warnvirusrecip"]==null){$this->main_array["BEHAVIORS"]["warnvirusrecip"]="undef";}
		if($this->main_array["BEHAVIORS"]["warnbannedrecip"]==null){$this->main_array["BEHAVIORS"]["warnbannedrecip"]="undef";}
		if($this->main_array["BEHAVIORS"]["warnbadhrecip"]==null){$this->main_array["BEHAVIORS"]["warnbadhrecip"]="undef";}
		if($this->main_array["BEHAVIORS"]["warnbannedrecip"]==null){$this->main_array["BEHAVIORS"]["warnbannedrecip"]="undef";}
		if($this->main_array["BEHAVIORS"]["newvirus_admin"]==null){$this->main_array["BEHAVIORS"]["newvirus_admin"]="undef";}
		if($this->main_array["BEHAVIORS"]["virus_admin"]==null){$this->main_array["BEHAVIORS"]["virus_admin"]="undef";}
		if($this->main_array["BEHAVIORS"]["spam_admin"]==null){$this->main_array["BEHAVIORS"]["spam_admin"]="undef";}
		if($this->main_array["BEHAVIORS"]["banned_admin"]==null){$this->main_array["BEHAVIORS"]["banned_admin"]="undef";}
		if($this->main_array["BEHAVIORS"]["bad_header_admin"]==null){$this->main_array["BEHAVIORS"]["bad_header_admin"]="undef";}
		if($this->main_array["BEHAVIORS"]["child_timeout"]==null){$this->main_array["BEHAVIORS"]["child_timeout"]="5*600";}										
		if($this->main_array["BEHAVIORS"]["max_requests"]==null){$this->main_array["BEHAVIORS"]["max_requests"]="30";}
		if($this->main_array["BEHAVIORS"]["max_servers"]==null){$this->main_array["BEHAVIORS"]["max_servers"]="5";}
		if($this->main_array["BEHAVIORS"]["trust_my_net"]==null){$this->main_array["BEHAVIORS"]["trust_my_net"]="0";}
		if($this->main_array["BEHAVIORS"]["sa_timeout"]==null){$this->main_array["BEHAVIORS"]["sa_timeout"]="30";}
		if(!is_numeric($this->main_array["BEHAVIORS"]["enable_db"])){$this->main_array["BEHAVIORS"]["enable_db"]="0";}
		if(!is_numeric($this->main_array["BEHAVIORS"]["sa_timeout"])){$this->main_array["BEHAVIORS"]["sa_timeout"]="30";}
		if(!is_numeric($this->main_array["BEHAVIORS"]["enable_global_cache"])){$this->main_array["BEHAVIORS"]["enable_global_cache"]="0";}
		if(!is_numeric($this->main_array["BEHAVIORS"]["always_clean"])){$this->main_array["BEHAVIORS"]["always_clean"]=1;}
		if(!is_numeric($AmavisDebugSpamassassin)){$AmavisDebugSpamassassin=0;}
		if(!is_numeric($this->main_array["HEADERS"]["X_HEADER"])){$this->main_array["HEADERS"]["X_HEADER"]=1;}
		if($this->main_array["HEADERS"]["X_HEADER_TAG"]==null){$this->main_array["HEADERS"]["X_HEADER_TAG"]="X-Virus-Scanned";}
		if(trim($this->main_array["HEADERS"]["X_HEADER_LINE"])==null){$this->main_array["HEADERS"]["X_HEADER_LINE"]='$myproduct_name $myversion_id ($myversion_date) at $mydomain';}		
		
		
		if($GLOBALS["EXECUTED_AS_ROOT"]){echo "Starting......: ".date("H:i:s")." amavisd-new build configuration loglevel:{$this->main_array["BEHAVIORS"]["log_level"]}\n";}
		if($GLOBALS["EXECUTED_AS_ROOT"]){echo "Starting......: ".date("H:i:s")." amavisd-new build configuration myhostname:$myhostname\n";}
		if($GLOBALS["EXECUTED_AS_ROOT"]){echo "Starting......: ".date("H:i:s")." amavisd-new Amavis debug mode::$AmavisDebugSpamassassin\n";}
		
		
		if($GLOBALS["EXECUTED_AS_ROOT"]){
			@mkdir("/var/amavisd/.spamassassin",0755,true);
			if(!is_file("/var/amavisd/.spamassassin/user_prefs")){@file_put_contents("/var/amavisd/.spamassassin/user_prefs", "\n");}
			if(class_exists("unix")){
				$unix=new unix();
				$unix->chown_func("postfix","postfix", "/var/amavisd/.spamassassin");
				$unix->chown_func("postfix","postfix", "/var/amavisd/.spamassassin/user_prefs");
			}
		}
		
		
		//if($users->ALTERMIME_INSTALLED){if($this->EnableAlterMime==1){$altermime=true;}}
		$conf=null;	
		if($this->EnableAmavisInMasterCF==1){$EnableAmavisInMasterCF=true;}
		$conf=$conf."use strict;\n";
		$conf=$conf."\n";
		$conf=$conf."# Configuration file with Engine builder " . date('Y-m-d H::i:s')."\n";
		$conf=$conf."\n";
		if($ArticaAmavisEnablePlugin==1){$conf=$conf."include_config_files('/var/amavis-plugins/check-external-users.conf');\n";}
		$conf=$conf."\n";
		$conf=$conf."# COMMONLY ADJUSTED SETTINGS:\n";
		$conf=$conf."\n";
		$conf=$conf."# PERFORMANCES:\n";
		$conf=$conf."\$max_servers = {$this->main_array["BEHAVIORS"]["max_servers"]};\n";
		$conf=$conf."\$child_timeout={$this->main_array["BEHAVIORS"]["child_timeout"]};\n";
		$conf=$conf."\$max_requests={$this->main_array["BEHAVIORS"]["max_requests"]};\n";
		$conf=$conf."\$pid_file='/var/spool/postfix/var/run/amavisd-new/amavisd-new.pid';\n";
		$conf=$conf."\$daemon_user = 'postfix';\n";
		$conf=$conf."\$daemon_group = 'postfix';\n";
		$conf=$conf."\$TEMPBASE = \"\$MYHOME/tmp\";   # working directory, needs to exist, -T\n";
		$conf=$conf."\$ENV{TMPDIR} = \$TEMPBASE;    # environment variable TMPDIR, used by SA, etc.\n";
		$conf=$conf."\$QUARANTINEDIR = '/var/virusmails';  # -Q\n";
		//$conf=$conf."\$user_rules_dir = '/var/amavisd/.spamassassin';\n";
		$conf=$conf."\$log_level = {$this->main_array["BEHAVIORS"]["log_level"]};# verbosity 0..5, -d\n";		
		$conf=$conf."\$log_recip_templ 	= undef;    # disable by-recipient level-0 log entries\n";
		$conf=$conf."\$DO_SYSLOG = 1;              # log via syslogd (preferred)\n";
		$conf=$conf."\$sa_debug = $AmavisDebugSpamassassin;\n";
		$conf=$conf."\$sa_spawned = 1;\n";
		if($major>1 && $minor<7){
			$conf=$conf."\$sa_timeout = {$this->main_array["BEHAVIORS"]["sa_timeout"]};\n";
		}
		$conf=$conf."\$syslog_facility 	= 'mail';   # Syslog facility as a string\n";
		$conf=$conf."\$syslog_priority 	= 'debug';  # Syslog base (minimal) priority as a string,\n";
		$conf=$conf."#\$LOGFILE 		    = \"/var/log/amavis/amavis.log\";\n";
		$conf=$conf."\$MAXLEVELS = 14;\n";
		$conf=$conf."\$MAXFILES = 1500;\n";
		$conf=$conf."\$MIN_EXPANSION_QUOTA =      100*1024;  # bytes  (default undef, not enforced)\n";
		$conf=$conf."\$MAX_EXPANSION_QUOTA = 300*1024*1024;  # bytes  (default undef, not enforced)\n";
		
		
		if($this->main_array["HEADERS"]["X_HEADER"]==1){
			$xheaderline=trim($this->main_array["HEADERS"]["X_HEADER_LINE"]);
			if(strpos(" $xheaderline", '$')>0){$xheaderline=null;}
			if($xheaderline==null){$xheaderline='$myproduct_name $myversion_id ($myversion_date) at $mydomain';}		
			
			$conf=$conf."\$X_HEADER_TAG = \"{$this->main_array["HEADERS"]["X_HEADER_TAG"]}\";\n";
			$conf=$conf."\$X_HEADER_LINE = \"{$xheaderline}\";\n";  
		}else{
			$conf=$conf."\$X_HEADER_TAG = undef;\n";
			$conf=$conf."\$X_HEADER_LINE = undef;\n";  			
		}

		
		$conf=$conf."\n";
		$conf=$conf."\$enable_db = {$this->main_array["BEHAVIORS"]["enable_db"]};              # enable use of BerkeleyDB/libdb (SNMP and nanny)\n";
		$conf=$conf."\$enable_global_cache = {$this->main_array["BEHAVIORS"]["enable_global_cache"]};    # enable use of libdb-based cache if \$enable_db=1\n";
		$conf=$conf."\$nanny_details_level = 2;    # nanny verbosity: 1: traditional, 2: detailed\n";
		if($this->EnableDKIMVerification==1){
			$conf=$conf."\$enable_dkim_verification = 1;  # enable DKIM signatures verification\n";
			$conf=$conf."\$enable_dkim_signing = 1;    # load DKIM signing code, keys defined by dkim_key\n";
		}else{
			$conf=$conf."\$enable_dkim_verification = 0;\n";
			$conf=$conf."\$enable_dkim_signing = 0;\n";
		}
		
		if($this->EnableLDAPAmavis==1){
			$conf=$conf."\$ldap_lookups_no_at_means_domain = 1;\n";
			$conf=$conf."\$enable_ldap  = 1;\n";
			$conf=$conf."\$default_ldap = {\n";
			$conf=$conf."\thostname      => [ '$ldap->ldap_host' ],\n";
			$conf=$conf."\tport		     => $ldap->ldap_port,\n";
			$conf=$conf."\ttimeout       => 5,\n";
			$conf=$conf."\ttls           => 0,\n";
			$conf=$conf."\tbase          => 'dc=organizations,$ldap->suffix',\n";
			$conf=$conf."\tquery_filter  => '(&(objectclass=amavisAccount)(|(mailAlias=%m)(mail=%m)(associatedDomain=%m)(cn=%m)))',\n";
			$conf=$conf."\tbind_dn       => 'cn=$ldap->ldap_admin,$ldap->suffix',\n";
			$conf=$conf."\tbind_password => '$ldap->ldap_password',\n";
			$conf=$conf."};";
		}else{
			$conf=$conf."\$enable_ldap  = 0;\n";
		}
		$conf=$conf."\n";
		$conf=$conf."@local_domains_maps = ( [" . $this->GetLocalDomains()."] );  # list of all local domains\n";
		$conf=$conf."@mynetworks = qw(".$this->BuildNetworks().");\n";
		$conf=$conf."\n";
		if($EnablePostfixMultiInstance==0){
			$conf=$conf."\$unix_socketname = \"/var/spool/postfix/var/run/amavisd-new/amavisd-new.sock\";  # amavisd-release or amavis-milter\n";
		}else{
			$conf=$conf."\$unix_socketname = undef;\n";
		}
		
		if($EnablePostfixMultiInstance==1){$multiple_policies=$this->LoadMultiPolicies();}
		
		if(count($GLOBALS["inet_socket_port"])==0){
			$conf=$conf."\$inet_socket_port = 10024;   # listen on this local TCP port(s)\n";
		}else{
			$GLOBALS["inet_socket_port"][]="10024";
			$conf=$conf."\$inet_socket_port =  [". @implode(",",$GLOBALS["inet_socket_port"]). "]; # listen on this local TCP port(s)\n";
		}

		$mydomainsExploded=explode(".",$myhostname);
		if($mydomainsExploded[1]<>null){
			unset($mydomainsExploded[0]);
			$conf=$conf."\$mydomain  = \"". @implode(".",$mydomainsExploded)."\";  # domain name\n";
		}
		$conf=$conf."\$myhostname = \"$myhostname\";  # must be a fully-qualified domain name!\n";
		//$conf=$conf."\$X_VIRUS_LINE = \"$myhostname\";\n";
		
		
		
		
		$conf=$conf."# MySQL defined settings\n";
		$conf=$conf.$this->MySQLSettings();
		$conf=$conf."# #######################\n\n";
		$currentip=$this->getInternalIPs();
		$conf=$conf."#adding net acl $currentip of all interfaces prevent DENIED ACCESS from IP 172.16.X.YYY\n";
		$conf=$conf ."@inet_acl = qw($currentip);\n";
		
		if($EnablePostfixMultiInstance<>1){
			if($EnableAmavisInMasterCF){
				$conf=$conf ."\$inet_socket_bind ='127.0.0.1';\n";
				$conf=$conf ."\$forward_method = 'smtp:[127.0.0.1]:10025';\n";
				$conf=$conf ."\$notify_method = 'smtp:[127.0.0.1]:10025';\n";
				
			}else{
				$conf=$conf."\$forward_method ='pipe:flags=q argv=/usr/sbin/sendmail -Ac -i -f \${sender} -- \${recipient}';\n";
				$conf=$conf."\$notify_method = \$forward_method;\n";	
			}
		}
		
		
		
		if($EnablePostfixMultiInstance==1){
			echo "Starting......: ".date("H:i:s")." amavisd-new multiple instances is enabled\n";
			$conf=$conf .$multiple_policies;
		}
		

		$banned_rules_maps=$this->banned_rules_maps();
		$conf=$conf."\n#Extensions rules databases...\n";
		if($banned_rules_maps<>null){
			$conf=$conf.$this->banned_rules_maps()."\n";
			$conf=$conf."\n";
		}
		
		$conf=$conf."\$policy_bank{'MYNETS'} = {   # mail originating from @mynetworks\n";
		$conf=$conf."\toriginating => 1,  # is true in MYNETS by default, but let's make it explicit\n";
		$conf=$conf."\tos_fingerprint_method => undef,  # don't query p0f for internal clients\n";
		if($EnableAmavisInMasterCF){
			$conf=$conf ."\tforward_method => 'smtp:[127.0.0.1]:10025',\n";
			$conf=$conf ."\tnotify_method => 'smtp:[127.0.0.1]:10025',\n";
			}
		
		if($altermime){
			$conf=$conf."\tallow_disclaimers => 1,\n";
			}

		if($this->main_array["BEHAVIORS"]["trust_my_net"]==1){
			$conf=$conf ."\tbypass_spam_checks_maps => [1], # don't spam-check internal mail\n";
			$conf=$conf ."\tbypass_virus_checks_maps => [1], # don't virus-check internal mail\n";
			if($this->main_array["NETWORK"]["banned_extensions_include_local_net"]==0){
				$conf=$conf ."\tbypass_banned_checks_maps => [1], # don't banned-check internal mail\n";
			}
			$conf=$conf ."\tbypass_header_checks_maps => [1], # don't header-check internal mail\n";
		}
		if($this->main_array["NETWORK"]["banned_extensions_include_local_net"]==1){
			if(is_array($this->extensions)){
				$conf=$conf."\tbanned_filename_maps => ['GENERAL'],\n";
			}
		}	


		$conf=$conf."};\n";
		$conf=$conf."\n";
		
		
		
		$conf=$conf."\$interface_policy{'SOCK'} = 'AM.PDP-SOCK'; # only applies with \$unix_socketname\n";
		$conf=$conf."\n";
		$conf=$conf."# Use with amavis-release over a socket or with Petr Rehor's amavis-milter.c\n";
		$conf=$conf."# (with amavis-milter.c from this package or old amavis.c client use 'AM.CL'):\n";
		$conf=$conf."\$policy_bank{'AM.PDP-SOCK'} = {\n";
		$conf=$conf."  protocol => 'AM.PDP',\n";
		$conf=$conf."  notify_method  => 'pipe:flags=q argv=/usr/sbin/sendmail -Ac -i -f \${sender} -- \${recipient}',";
		$conf=$conf."  auth_required_release => 0,  # do not require secret_id for amavisd-release\n";
		
		if($this->main_array["NETWORK"]["banned_extensions_include_local_net"]==1){
			if(is_array($this->extensions)){
				$conf=$conf."  banned_filename_maps => ['GENERAL'],\n";
			}
		}
		$conf=$conf."};\n";
		$conf=$conf."\n";
		$conf=$conf."# Use in combination with dedicated artica-filters\n";
		$conf=$conf."\$policy_bank{'killAll'} = {protocol => 'AM.PDP',final_destiny_by_ccat => { (CC_CATCHALL) => D_DISCARD }};\n";
		$conf=$conf."\$sa_tag_level_deflt  = {$this->main_array["BEHAVIORS"]["sa_tag_level_deflt"]};  # add spam info headers if at, or above that level\n";
		$conf=$conf."\$sa_tag2_level_deflt = {$this->main_array["BEHAVIORS"]["sa_tag2_level_deflt"]};  # add 'spam detected' headers at that level\n";
		$conf=$conf."\$sa_tag3_level_deflt = {$this->main_array["BEHAVIORS"]["sa_tag3_level_deflt"]};  # add 'spam detected' headers at that level\n";
		$conf=$conf."\$sa_kill_level_deflt = {$this->main_array["BEHAVIORS"]["sa_kill_level_deflt"]};  # triggers spam evasive actions (e.g. blocks mail)\n";
		$conf=$conf."\$sa_dsn_cutoff_level = {$this->main_array["BEHAVIORS"]["sa_dsn_cutoff_level"]};   # spam level beyond which a DSN is not sent\n";
		$conf=$conf."\$sa_crediblefrom_dsn_cutoff_level = 18; # likewise, but for a likely valid From\n";
		$conf=$conf."\$sa_quarantine_cutoff_level = {$this->main_array["BEHAVIORS"]["sa_quarantine_cutoff_level"]}; # spam level beyond which quarantine is off\n";
		$conf=$conf."#\$penpals_bonus_score = 8;    # (no effect without a @storage_sql_dsn database)\n";
		$conf=$conf."#\$penpals_threshold_high = \$sa_kill_level_deflt;  # don't waste time on hi spam\n";
		$conf=$conf."\$bounce_killer_score = 100;  # spam score points to add for joe-jobbed bounces\n";
		
		$q=new mysql();
		
		
		
		$conf=$conf."\n";
		//$conf=$conf."\$sa_configpath='/etc/spamassassin';\n";
		//$conf=$conf."\$sa_siteconfigpath='/etc/spamassassin/';\n";
		
		
		$conf=$conf."\$sa_mail_body_size_limit = 400*1024; # don't waste time on SA if mail is larger\n";
		$conf=$conf."\$sa_local_tests_only = $this->AmavisNoInternetTests;    # only tests which do not require internet access?\n";
		$conf=$conf."#\$sa_spam_subject_tag = {$this->main_array["BEHAVIORS"]["spam_subject_tag2_maps"]}\n";
		
		if($this->main_array["BEHAVIORS"]["spam_subject_tag_maps_enable"]=="yes"){
			if($this->main_array["BEHAVIORS"]["spam_subject_tag_maps_enable"]<>null){
				$conf=$conf."@spam_subject_tag_maps  = ('{$this->main_array["BEHAVIORS"]["spam_subject_tag_maps"]}');\n";
			}else{
				$conf=$conf."@spam_subject_tag_maps  = undef;\n";
			}
		}else{
			$conf=$conf."@spam_subject_tag_maps  = undef;\n";
		}
		$conf=$conf."@spam_subject_tag2_maps = ('{$this->main_array["BEHAVIORS"]["spam_subject_tag2_maps"]}');\n";
		$conf=$conf."@spam_subject_tag3_maps =('{$this->main_array["BEHAVIORS"]["spam_subject_tag2_maps"]}');\n";
		$conf=$conf."\n";
		$conf=$conf."\$timestamp_fmt_mysql = 1;\n";
		$conf=$conf."\n";
		
		$this->main_array["BEHAVIORS"]["virus_admin"]=str_replace("@","\@",$this->main_array["BEHAVIORS"]["virus_admin"]);
		$this->main_array["BEHAVIORS"]["mailfrom_notify_admin"]=str_replace("@","\@",$this->main_array["BEHAVIORS"]["mailfrom_notify_admin"]);
		$this->main_array["BEHAVIORS"]["mailfrom_notify_recip"]=str_replace("@","\@",$this->main_array["BEHAVIORS"]["mailfrom_notify_recip"]);
		$this->main_array["BEHAVIORS"]["mailfrom_notify_spamadmin"]=str_replace("@","\@",$this->main_array["BEHAVIORS"]["mailfrom_notify_spamadmin"]);
		
		$conf=$conf."\$virus_admin               = \"{$this->main_array["BEHAVIORS"]["virus_admin"]}\";  # notifications recip.\n";
		$conf=$conf."\$mailfrom_notify_admin     = \"{$this->main_array["BEHAVIORS"]["mailfrom_notify_admin"]}\";  # notifications sender\n";
		$conf=$conf."\$mailfrom_notify_recip     = \"{$this->main_array["BEHAVIORS"]["mailfrom_notify_recip"]}\";  # notifications sender\n";
		$conf=$conf."\$mailfrom_notify_spamadmin = \"{$this->main_array["BEHAVIORS"]["mailfrom_notify_spamadmin"]}\"; # notifications sender\n";
		$conf=$conf."\$mailfrom_to_quarantine = ''; # null return path; uses original sender if undef\n";
		$conf=$conf."\n";
		$conf=$conf.$this->admin_maps_by_ccat();
		

		
		
		if($enable_dkim_verification==1){
			$conf=$conf."\$enable_dkim_verification=1;\n";
		}
		
		$smtpd_recipient_limit=$sock->GET_INFO("smtpd_recipient_limit");
		if(!is_numeric($smtpd_recipient_limit)){$smtpd_recipient_limit=50;}
		if($smtpd_recipient_limit>0){
			$conf=$conf."\$smtpd_recipient_limit=$smtpd_recipient_limit;\n";
		}
		
		$conf=$conf."\n".$this->DKIM_outgoing_list()."\n";
		$conf=$conf."# WHITELISTING, list of whitelisted senders...\n";
		$conf=$conf.$this->whitelist_sender_maps();
		$conf=$conf."\n";
		$conf=$conf."@addr_extension_virus_maps      = ('virus');\n";
		$conf=$conf."@addr_extension_banned_maps     = ('banned');\n";
		$conf=$conf."@addr_extension_spam_maps       = ('spam');\n";
		$conf=$conf."@addr_extension_bad_header_maps = ('badh');\n";
		$conf=$conf."# \$recipient_delimiter = '+';  # undef disables address extensions altogether\n";
		$conf=$conf."# when enabling addr extensions do also Postfix/main.cf: recipient_delimiter=+\n";
		$conf=$conf."\n";
		$conf=$conf."\$path = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/usr/bin:/bin:/usr/share/artica-postfix/bin';\n";
		
		if($altermime){
				$conf=$conf."\n";
				$conf=$conf."#AlterMime implementation\n";
				$conf=$conf."\$altermime = '/usr/local/bin/altermime'; \n";
				$conf=$conf."@altermime_args_disclaimer = qw(--disclaimer=/usr/local/etc/altermime-disclaimer.txt --disclaimer-html=/usr/local/etc/altermime-disclaimer.html --log-syslog);\n";
				$conf=$conf."\n";
			}
		
		
		$conf=$conf."\$dspam = '';\n";
		$conf=$conf."\$defang_virus  = 1;  # MIME-wrap passed infected mail\n";
		$conf=$conf."\$defang_banned = 1;  # MIME-wrap passed mail containing banned name\n";
		$conf=$conf."# for defanging bad headers only turn on certain minor contents categories:\n";
		$conf=$conf."\$defang_by_ccat{+CC_BADH.\",3\"} = 1;  # NUL or CR character in header\n";
		$conf=$conf."\$defang_by_ccat{+CC_BADH.\",5\"} = 1;  # header line longer than 998 characters\n";
		$conf=$conf."\$defang_by_ccat{+CC_BADH.\",6\"} = 1;  # header field syntax error\n";
		
		
		
		if($altermime){
			$conf=$conf."\$defang_maps_by_ccat{+CC_CLEAN} = [ 'disclaimer' ];\n";
			$conf=$conf."\$defang_maps_by_ccat{+CC_BADH} = [ 'disclaimer' ];\n";	
		}
		
		$conf=$conf."\n";
		$conf=$conf."\$final_virus_destiny      = {$this->main_array["BEHAVIORS"]["final_virus_destiny"]};\n";
		$conf=$conf."\$final_banned_destiny     = {$this->main_array["BEHAVIORS"]["final_banned_destiny"]};\n";
		$conf=$conf."\$final_spam_destiny       = {$this->main_array["BEHAVIORS"]["final_spam_destiny"]};\n";
		$conf=$conf."\$final_bad_header_destiny = {$this->main_array["BEHAVIORS"]["final_bad_header_destiny"]};\n";
		$conf=$conf."\$mailfrom_to_quarantine = undef;\n";
		if($this->AmavisPerUser==0){
			$conf=$conf."\$spam_quarantine_method   = 'local:spam-%m.gz';\n";
			$this->EnableQuarantineSpammy=1;
			$this->EnableQuarantineSpammy2=0;
		}
		
		if($this->EnableQuarantineSpammy==1){
			$conf=$conf."\$defang_by_ccat{CC_SPAMMY, 1};\n";	
			$conf=$conf."\$quarantine_method_by_ccat{+CC_SPAMMY} = \$spam_quarantine_method;\n";
			$conf=$conf."\$quarantine_to_maps_by_ccat{CC_SPAMMY} = \@spam_quarantine_to_maps;\n";	
			$conf=$conf."\$final_destiny_by_ccat{+CC_SPAMMY} =\$final_spam_destiny;\n";
		}	
		
		if($this->EnableQuarantineSpammy2==1){
			$conf=$conf."\$defang_by_ccat{+CC_SPAMMY.\",1\"} = 1;\n";
			$conf=$conf."\$quarantine_method_by_ccat{CC_SPAMMY.\",1\"} = \$spam_quarantine_method;\n";
			$conf=$conf."\$quarantine_to_maps_by_ccat{CC_SPAMMY.\",1\"} = \@spam_quarantine_to_maps;\n";
			$conf=$conf."\$final_destiny_by_ccat{+CC_SPAMMY.\",1\"} =\$final_spam_destiny;\n";
		}

			$conf=$conf."\$bad_header_quarantine_method = undef;\n";
			$conf=$conf."\n";
			$conf=$conf."# \$os_fingerprint_method = 'p0f:*:2345';  # to query p0f-analyzer.pl\n";
			$conf=$conf."\n";
			$conf=$conf."#Sender Notifications\n";
			$conf=$conf."\$warnbadhsender = {$this->main_array["BEHAVIORS"]["warnbadhsender"]};\n";
			$conf=$conf."\$warnvirussender = {$this->main_array["BEHAVIORS"]["warnvirussender"]};\n";
			$conf=$conf."\$warnspamsender = {$this->main_array["BEHAVIORS"]["warnspamsender"]};\n";
			$conf=$conf."\$warnbannedsender = {$this->main_array["BEHAVIORS"]["warnbannedsender"]};\n";
			$conf=$conf."\n";
			$conf=$conf."#Recipient Notifications\n";
			$conf=$conf."\$warnvirusrecip = {$this->main_array["BEHAVIORS"]["warnvirusrecip"]};\n";
			$conf=$conf."\$warnbannedrecip = {$this->main_array["BEHAVIORS"]["warnbannedrecip"]};\n";
			$conf=$conf."\$warnbadhrecip = {$this->main_array["BEHAVIORS"]["warnbadhrecip"]};\n";
			$conf=$conf."\n";
			$conf=$conf."#Admin Notifications\n";
			if($this->main_array["BEHAVIORS"]["newvirus_admin"]<>"undef"){$conf=$conf."\$newvirus_admin = \"{$this->main_array["BEHAVIORS"]["newvirus_admin"]}\";\n";}else{$conf=$conf."\$newvirus_admin = undef;\n";}
			if($this->main_array["BEHAVIORS"]["virus_admin"]<>"undef"){$conf=$conf."\$virus_admin = \"{$this->main_array["BEHAVIORS"]["virus_admin"]}\";\n";}else{$conf=$conf."\$virus_admin = undef;\n";}
			if($this->main_array["BEHAVIORS"]["spam_admin"]<>"undef"){$conf=$conf."\$spam_admin = \"{$this->main_array["BEHAVIORS"]["spam_admin"]}\";\n";}else{$conf=$conf."\$spam_admin = undef;\n";}
			if($this->main_array["BEHAVIORS"]["bad_header_admin"]<>"undef"){$conf=$conf."\$bad_header_admin = \"{$this->main_array["BEHAVIORS"]["bad_header_admin"]}\";\n";}else{$conf=$conf."\$bad_header_admin = undef;\n";}
			$conf=$conf."\n";
			$conf=$conf."#templates Notifications\n";
			$conf=$conf."\$notify_sender_templ      = read_text(\"/usr/local/etc/amavis/template-dsn.txt\");\n";
			$conf=$conf."\$notify_virus_sender_templ= read_text(\"/usr/local/etc/amavis/template-virus-sender.txt\");\n";
			$conf=$conf."\$notify_virus_admin_templ = read_text(\"/usr/local/etc/amavis/template-virus-admin.txt\");\n";
			$conf=$conf."\$notify_virus_recips_templ= read_text(\"/usr/local/etc/amavis/template-virus-recipient.txt\");\n";
			$conf=$conf."\$notify_spam_sender_templ = read_text(\"/usr/local/etc/amavis/template-virus-sender.txt\");\n";
			$conf=$conf."\$notify_spam_admin_templ  = read_text(\"/usr/local/etc/amavis/template-spam-admin.txt\");\n";
			$conf=$conf."\n";
			
			
			$conf=$conf."\n";
			$conf=$conf."# REMAINING IMPORTANT VARIABLES ARE LISTED HERE BECAUSE OF LONGER ASSIGNMENTS\n";
			$conf=$conf."\n";
			$conf=$conf."@keep_decoded_original_maps = (new_RE(\n";
			$conf=$conf."# qr'^MAIL\$',   # retain full original message for virus checking (can be slow)\n";
			if($this->EnableScanSecurity==1){
				$conf=$conf."  qr'^MAIL-UNDECIPHERABLE\$', # recheck full mail if it contains undecipherables (enable by EnableScanSecurity)\n";
			}
			$conf=$conf."  qr'^(ASCII(?! cpio)|text|uuencoded|xxencoded|binhex)'i,\n";
			$conf=$conf."# qr'^Zip archive data',     # don't trust Archive::Zip\n";
			$conf=$conf."));\n";
			$conf=$conf."\n";
			$conf=$conf.$this->banned_filename_re();
			$conf=$conf."\n# See http://support.microsoft.com/default.aspx?scid=kb;EN-US;q262631\n";
			$conf=$conf."# and http://www.cknow.com/vtutor/vtextensions.htm\n";
			$conf=$conf."\n";
			$conf=$conf."\n";
			$conf=$conf."# ENVELOPE SENDER SOFT-WHITELISTING / SOFT-BLACKLISTING\n";
			$conf=$conf.$this->per_recip_blacklist_whitelist_sender_lookup_tables();
			$conf=$conf."\n";
			$conf=$conf."@score_sender_maps = ({\n"; 
			$conf=$conf."\n";
			$conf=$conf."  '.' => [new_RE(\n";
			$conf=$conf."    [qr'^(bulkmail|offers|cheapbenefits|earnmoney|foryou)@'i         => 5.0],\n";
			$conf=$conf."    [qr'^(greatcasino|investments|lose_weight_today|market\.alert)@'i=> 5.0],\n";
			$conf=$conf."    [qr'^(money2you|MyGreenCard|new\.tld\.registry|opt-out|opt-in)@'i=> 5.0],\n";
			$conf=$conf."    [qr'^(optin|saveonlsmoking2002k|specialoffer|specialoffers)@'i   => 5.0],\n";
			$conf=$conf."    [qr'^(stockalert|stopsnoring|wantsome|workathome|yesitsfree)@'i  => 5.0],\n";
			$conf=$conf."    [qr'^(your_friend|greatoffers)@'i                                => 5.0],\n";
			$conf=$conf."    [qr'^(inkjetplanet|marketopt|MakeMoney)\d*@'i                    => 5.0] ),\n";
			$conf=$conf."\n";
			$conf=$conf."read_hash(\"/usr/local/etc/sender_scores_sitewide\"),\n";
			$conf=$conf."   {\n";
			$conf=$conf.$this->bypass_byrecipients_score()."\n";
			$conf=$conf."     'nobody@cert.org'                        => -3.0,\n";
			$conf=$conf."     'cert-advisory@us-cert.gov'              => -3.0,\n";
			$conf=$conf."     'owner-alert@iss.net'                    => -3.0,\n";
			$conf=$conf."     'slashdot@slashdot.org'                  => -3.0,\n";
			$conf=$conf."     'securityfocus.com'                      => -3.0,\n";
			$conf=$conf."     'ntbugtraq@listserv.ntbugtraq.com'       => -3.0,\n";
			$conf=$conf."     'security-alerts@linuxsecurity.com'      => -3.0,\n";
			$conf=$conf."     'mailman-announce-admin@python.org'      => -3.0,\n";
			$conf=$conf."     'amavis-user-admin@lists.sourceforge.net'=> -3.0,\n";
			$conf=$conf."     'amavis-user-bounces@lists.sourceforge.net' => -3.0,\n";
			$conf=$conf."     'spamassassin.apache.org'                => -3.0,\n";
			$conf=$conf."     'notification-return@lists.sophos.com'   => -3.0,\n";
			$conf=$conf."     'owner-postfix-users@postfix.org'        => -3.0,\n";
			$conf=$conf."     'owner-postfix-announce@postfix.org'     => -3.0,\n";
			$conf=$conf."     'owner-sendmail-announce@lists.sendmail.org'   => -3.0,\n";
			$conf=$conf."     'sendmail-announce-request@lists.sendmail.org' => -3.0,\n";
			$conf=$conf."     'donotreply@sendmail.org'                => -3.0,\n";
			$conf=$conf."     'ca+envelope@sendmail.org'               => -3.0,\n";
			$conf=$conf."     'noreply@freshmeat.net'                  => -3.0,\n";
			$conf=$conf."     'owner-technews@postel.acm.org'          => -3.0,\n";
			$conf=$conf."     'ietf-123-owner@loki.ietf.org'           => -3.0,\n";
			$conf=$conf."     'cvs-commits-list-admin@gnome.org'       => -3.0,\n";
			$conf=$conf."     'rt-users-admin@lists.fsck.com'          => -3.0,\n";
			$conf=$conf."     'clp-request@comp.nus.edu.sg'            => -3.0,\n";
			$conf=$conf."     'surveys-errors@lists.nua.ie'            => -3.0,\n";
			$conf=$conf."     'emailnews@genomeweb.com'                => -5.0,\n";
			$conf=$conf."     'yahoo-dev-null@yahoo-inc.com'           => -3.0,\n";
			$conf=$conf."     'returns.groups.yahoo.com'               => -3.0,\n";
			$conf=$conf."     'clusternews@linuxnetworx.com'           => -3.0,\n";
			$conf=$conf."     lc('lvs-users-admin@LinuxVirtualServer.org')    => -3.0,\n";
			$conf=$conf."     lc('owner-textbreakingnews@CNNIMAIL12.CNN.COM') => -5.0,\n";
			$conf=$conf."     'sender@example.net'                     =>  3.0,\n";
			$conf=$conf."     '.example.net'                           =>  1.0,\n";
			$conf=$conf."\n";
			$conf=$conf."   },\n";
			$conf=$conf."  ],\n";
			$conf=$conf."});\n";
			$conf=$conf."\n";
			$conf=$conf."\n";
			$conf=$conf."@decoders = (\n";
			$conf=$conf."  ['mail', \&do_mime_decode],\n";
			$conf=$conf."  ['asc',  \&do_ascii],\n";
			$conf=$conf."  ['uue',  \&do_ascii],\n";
			$conf=$conf."  ['hqx',  \&do_ascii],\n";
			$conf=$conf."  ['ync',  \&do_ascii],\n";
			$conf=$conf."  ['F',    \&do_uncompress, ['unfreeze','freeze -d','melt','fcat'] ],\n";
			$conf=$conf."  ['Z',    \&do_uncompress, ['uncompress','gzip -d','zcat'] ],\n";
			$conf=$conf."  ['gz',   \&do_uncompress,  'gzip -d'],\n";
			$conf=$conf."  ['gz',   \&do_gunzip],\n";
			$conf=$conf."  ['bz2',  \&do_uncompress,  'bzip2 -d'],\n";
			$conf=$conf."  ['lzo',  \&do_uncompress,  'lzop -d'],\n";
			$conf=$conf."  ['rpm',  \&do_uncompress, ['rpm2cpio.pl','rpm2cpio'] ],\n";
			$conf=$conf."  ['cpio', \&do_pax_cpio,   ['pax','gcpio','cpio'] ],\n";
			$conf=$conf."  ['tar',  \&do_pax_cpio,   ['pax','gcpio','cpio'] ],\n";
			$conf=$conf."  ['deb',  \&do_ar,          'ar'],\n";
			$conf=$conf."# ['a',    \&do_ar,          'ar'],  # unpacking .a seems an overkill\n";
			$conf=$conf."  ['zip',  \&do_unzip],\n";
			$conf=$conf."  ['7z',   \&do_7zip,       ['7zr','7za','7z'] ],\n";
			$conf=$conf."  ['rar',  \&do_unrar,      ['rar','unrar'] ],\n";
			$conf=$conf."  ['arj',  \&do_unarj,      ['arj','unarj'] ],\n";
			$conf=$conf."  ['arc',  \&do_arc,        ['nomarch','arc'] ],\n";
			$conf=$conf."  ['zoo',  \&do_zoo,        ['zoo','unzoo'] ],\n";
			$conf=$conf."  ['lha',  \&do_lha,         'lha'],\n";
			$conf=$conf."# ['doc',  \&do_ole,         'ripole'],\n";
			$conf=$conf."  ['cab',  \&do_cabextract,  'cabextract'],\n";
			$conf=$conf."  ['tnef', \&do_tnef_ext,    'tnef'],\n";
			$conf=$conf."  ['tnef', \&do_tnef],\n";
			$conf=$conf."# ['sit',  \&do_unstuff,     'unstuff'],  # broken/unsafe decoder\n";
			$conf=$conf."  ['exe',  \&do_executable, ['rar','unrar'], 'lha', ['arj','unarj'] ],\n";
			$conf=$conf.");\n";
			$conf=$conf."\n";
			$conf=$conf."\n";
			
			$always_clean=null;
			$EnableClamavDaemon=$sock->GET_INFO("EnableClamavDaemon");
			
			if(!is_numeric($EnableClamavDaemon)){$EnableClamavDaemon=0;}
			
			$EnableClamavDaemonForced=$sock->GET_INFO("EnableClamavDaemonForced");
			if(!is_numeric($EnableClamavDaemonForced)){$EnableClamavDaemonForced=0;}
			if($EnableClamavDaemonForced==1){$EnableClamavDaemon=1;}
			
			
			if($users->CLAMAV_INSTALLED){
				if(strlen($users->CLAMAV_SOCKET)>0){
					if($EnableClamavDaemon==1){
						$conf=$conf."@av_scanners = (\n";
						$conf=$conf."['ClamAV-clamd',\&ask_daemon, [\"CONTSCAN {}\", \"$users->CLAMAV_SOCKET\"],qr/\bOK$/, qr/\bFOUND$/,qr/^.*?: (?!Infected Archive)(.*) FOUND$/m ]\n";
					
				
						if($this->main_array["BEHAVIORS"]["always_clean"]==1){$always_clean="['always-clean', sub {0}]";}
						$conf=$conf.");\n";
						$conf=$conf."@av_scanners_backup = ($always_clean);\n";
						$conf=$conf."\n";
					  }
				}
				
			}
			
			
			

			$conf=$conf."\n";
			$conf=$conf."1;  # insure a defined return value";
			return $conf;	
}


private function bypass_byrecipients_score(){
	$q=new mysql();
	$sql="SELECT * FROM amavis_bypass_rcpt ORDER BY `pattern`";
	$results=$q->QUERY_SQL($sql,"artica_backup");
	if(!$q->ok){echo $q->mysql_error."\n$sql\n";return null;}	
	$count=0;
	$f=array();
	while($ligne=@mysql_fetch_array($results,MYSQL_ASSOC)){
		$ligne["pattern"]=trim($ligne["pattern"]);
		$ip=trim($ligne["pattern"]);
		if($ip==null){continue;}
		if(is_array($ip)){continue;}
		if(strpos(" $ip","@")==0){$pattern=".$ip";}else{$pattern=$ip;}
		$f[]="     '$pattern'                        => -99.0";
	}
	if(count($f)>0){
		return @implode(",",$f).',';
	}
		
}

private function admin_maps_by_ccat(){
		if(!is_numeric($this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_badh"])){$this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_badh"]=0;}
		if(!is_numeric($this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_spam"])){$this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_spam"]=0;}
		if(!is_numeric($this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_unchecked"])){$this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_unchecked"]=0;}
		if(!is_numeric($this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_banned"])){$this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_banned"]=1;}
		if(!is_numeric($this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_virus"])){$this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_virus"]=1;}
		$t=array();
		$f=array();
		if($this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_badh"]==1){
			$t[]="\tCC_BADH,        sub { ca('bad_header_admin_maps') }";
		}
		
		if($this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_spam"]==1){
			$t[]="\tCC_SPAM,        sub { ca('spam_admin_maps') }";
		}

		if($this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_unchecked"]==1){
			$t[]="\tCC_UNCHECKED,        sub { ca('virus_admin_maps') }";
		}	
			
		if($this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_banned"]==1){
			$t[]="\tCC_BANNED,        sub { ca('banned_admin_maps') }";
		}	

		if($this->main_array["BEHAVIORS"]["admin_maps_by_ccat_cc_virus"]==1){
			$t[]="\tCC_VIRUS,        sub { ca('virus_admin_maps') }";
		}			
		
	  $f[]="%admin_maps_by_ccat = (";
	  $f[]=@implode(",\n", $t);
	  $f[]=");\n";
	  return @implode("\n", $f);
  
}

public function whitelist_sender_maps(){
	$f=array();
	if(!function_exists("string_to_regex")){
		include_once(dirname(__FILE__)."/class.templates.inc");
	}
	$sql="SELECT * FROM postfix_global_whitelist ORDER BY sender";	
	$q=new mysql();
	if(!$q->TestingConnection()){
	if($GLOBALS["OUTPUT"]){echo "Building......: ".date("H:i:s")." [INIT]: {$GLOBALS["TITLENAME"]} whitelisted senders Connection to MySQL server failed\n";}
		return;
	}
	$IP=new IP();
	$results=$q->QUERY_SQL($sql,"artica_backup");
	if(!$q->ok){echo $q->mysql_error."\n$sql\n";return null;}	
	
	$MAX=mysql_num_rows($results);
	if($GLOBALS["OUTPUT"]){echo "Building......: ".date("H:i:s")." [INIT]: {$GLOBALS["TITLENAME"]} whitelisted senders $MAX items\n";}
	
	$c=0;
	while($ligne=@mysql_fetch_array($results,MYSQL_ASSOC)){
		$pattern=trim(strtolower($ligne["sender"]));
		$c++;
		if($pattern==null){
			if($GLOBALS["VERBOSE"]){echo "postfix_global_whitelist: SKIP: `NULL`\n";}
			continue;}
			
		$enabled=$ligne["enabled"];
		if(!is_numeric($enabled)){$enabled=1;}
		if($enabled==0){continue;}
		if($GLOBALS["VERBOSE"]){echo "postfix_global_whitelist: `$pattern`, enabled='$enabled'\n";}
		if(substr($pattern, 0,1)=="."){$pattern=substr($pattern, 1,strlen($pattern));}
		if(!preg_match("#(.*?)@(.+)#", $pattern,$re)){ $re[1]=null; $re[2]=$pattern; }
		$prefix_email=trim($re[1]);
		$suffix_email=trim($re[2]);
		if($prefix_email=="*"){$prefix_email=null;}
		if($prefix_email==".*"){$prefix_email=null;}
		if($prefix_email==null){$pattern=$suffix_email;}
		if(preg_match("#^www\.(.+)#", $suffix_email,$re)){$suffix_email=$re[1];}
		if(substr($suffix_email, 0,1)=="."){$suffix_email=substr($suffix_email, 1,strlen($suffix_email));}
		
		if($IP->isIPAddress($suffix_email)){
			if($GLOBALS["VERBOSE"]){echo "postfix_global_whitelist: SKIP: `$pattern`\n";}
			continue;
		}
		if($prefix_email<>null){$pattern="$prefix_email@$suffix_email";}
		if($GLOBALS["VERBOSE"]){echo "postfix_global_whitelist:$c/$MAX `$pattern`\n";}
		$f[$pattern]=true;
	}
	
	
	$ldap=new clladp();
	$hash=$ldap->WhitelistsFromDomain("*");
	
	if($GLOBALS["VERBOSE"]){echo "WhitelistsFromDomain ->". count($hash)." items\n";}
	
	while (list ($ToDestination, $MAIN_HASH) = each ($hash)){
		while (list ($index, $pattern) = each ($MAIN_HASH)){
			$pattern=trim(strtolower($pattern));
			if($pattern==null){continue;}
			if(substr($pattern, 0,1)=="."){$pattern=substr($pattern, 1,strlen($pattern));}
			if(!preg_match("#(.*?)@(.+)#", $pattern,$re)){ $re[1]=null; $re[2]=$pattern; }
			$prefix_email=trim($re[1]);
			$suffix_email=trim($re[2]);
			if($IP->isIPAddress($suffix_email)){continue;}
			if(preg_match("#^www\.(.+)#", $suffix_email,$re)){$suffix_email=$re[1];}
			if($prefix_email=="*"){$prefix_email=null;}
			if($prefix_email==".*"){$prefix_email=null;}
			if($prefix_email==null){$pattern=$suffix_email;}
			if(substr($suffix_email, 0,1)=="."){$suffix_email=substr($suffix_email, 1,strlen($suffix_email));}
			if($prefix_email<>null){$pattern="$prefix_email@$suffix_email";}
			if($GLOBALS["VERBOSE"]){echo "WhitelistsFromDomain: `$pattern`\n";}
			$f[$pattern]=true;
		}
	}

	
	
	if(count($f)==0){return;}
	
	while (list ($pattern, $line) = each ($f)){
		$t[]=$pattern;
		
	}
	
	@file_put_contents("/usr/local/etc/amavis/global.whitelist.db", @implode("\n", $t)."\n");
	if($GLOBALS["OUTPUT"]){echo "Building......: ".date("H:i:s")." [INIT]: {$GLOBALS["TITLENAME"]} whitelisted senders ". count($f)." items\n";}
	$final[]="read_hash(\%whitelist_sender, '/usr/local/etc/amavis/global.whitelist.db');";
	$final[]="@whitelist_sender_maps = (\%whitelist_sender);";
	$final[]="";
	
	return @implode("\n",$final);
	
	
}


private function LoadMultiPolicies(){
	$sock=new sockets();
	$already=array();
	$uuid=base64_decode($sock->getFrameWork("cmd.php?system-unique-id=yes"));
	$sql="SELECT * FROM postfix_multi WHERE `key`= 'amavis_local_port' AND uuid='$uuid'";
	$q=new mysql();
	$results=$q->QUERY_SQL($sql,"artica_backup");
	$interfaces[]="";
	while($ligne=@mysql_fetch_array($results,MYSQL_ASSOC)){
		$ou=$ligne["ou"];
		$ip_address=$ligne["ip_address"];
		$port=$ligne["value"];
		if(!is_numeric($port)){
			echo "Starting......: ".date("H:i:s")." amavisd-new \"$ip_address\" ($uuid) no defined port !\n";
			continue;
		}
		
		if($already[md5("$ip_address:$port")]){continue;}
		$main=new maincf_multi(null,$ou,$ip_address);
		$hostname=$main->myhostname;
		$hostname_plicy=$hostname;
		if(trim($hostname)==null){
			echo "Starting......: ".date("H:i:s")." amavisd-new $ip_address:$port in ou $ou have no defined hostname !!!\n";
			continue;
		}
		
		
		echo "Starting......: ".date("H:i:s")." amavisd-new $ip_address:$port for $hostname\n";
		$interfaces[]="\$interface_policy{'$port'} = '$hostname_plicy';";
		if(posix_getuid()==0){echo "Starting......: ".date("H:i:s")." amavisd-new bin port:$port\n";} 
		
		$LoadMultiplePoliciesConfig=$this->LoadMultiplePoliciesConfig($hostname);
		if($LoadMultiplePoliciesConfig<>null){
			$policy[]=$LoadMultiplePoliciesConfig;
			$GLOBALS["inet_socket_port"][]=$port;
		}
		$already[md5("$ip_address:$port")]=true;
	}
	
	return @implode("\n",$interfaces)."\n\n".@implode("\n",$policy);
	
}

private function LoadMultiplePoliciesConfig($hostname){
	echo "Starting......: ".date("H:i:s")." amavisd-new $hostname: building policy bank.\n";
	$sock=new sockets();
	$main=new maincf_multi($hostname);
	if(trim($main->ip_addr)==null){
		echo "Starting......: ".date("H:i:s")." amavisd-new $hostname: ip_addr is null for this host, aborting\n";
		return;
	}
	$params=unserialize(base64_decode($main->GET_BIGDATA("amavis_config")));
	$nets=unserialize($main->GET_BIGDATA("mynetworks"));
	$enable_dkim_signing=$sock->GET_INFO("enable_dkim_signing");
	
	$conf[]="\$policy_bank{'$main->myhostname'} ={";
	$conf[]="\tforward_method => 'smtp:[$main->ip_addr]:10026',";
	$conf[]="\tnotify_method  => 'smtp:[$main->ip_addr]:10026',";
	$conf[]="\tlocal_client_bind_address =>'127.0.0.1',";
	$conf[]="\tsmtpd_greeting_banner =>'amavis.$main->myhostname \${protocol} \${product} \${version-id} (\${version-date}) amavisd-new service ready',";
	$conf[]="\tlocalhost_name => 'amavis.$main->myhostname',";
	$conf[]="\toriginating => 1,";
	
	echo "Starting......: ".date("H:i:s")." amavisd-new $hostname: Enable DKIM signing=$enable_dkim_signing\n";
	
	if($enable_dkim_signing==1){
		$ldap=new clladp();
		$domains=$ldap->hash_get_all_domains();
		if(is_array($domains)){
			$conf[]="\tdkim_signature_options_bysender_maps => [{";
			while (list ($domain, $line) = each ($domains)){
				$md5=md5($domain);
					if(is_file("/etc/amavis/dkim/$md5.key.pem")){
						$conf[]="\t  '$domain'  => { d => '$domain', a => 'rsa-sha256', ttl => 10*24*3600 },";
					}
			}
			
			$conf[]="\t  '.' => { a => 'rsa-sha256', c => 'relaxed/simple', ttl => 30*24*3600 },";
			$conf[]=" \t   }],";
		}

	}
	
	if(is_array($nets)){
		$conf[]="\tinet_acl => [qw( ".@implode(" ",$nets)." $main->ip_addr 127.0.0.1 )],";
	}
	
	if($params["sa_tag_level_deflt"]<>null){$conf[]="\tspam_tag_level_maps => [{$params["sa_tag_level_deflt"]}],";}
	if($params["sa_tag2_level_deflt"]<>null){$conf[]="\tspam_tag2_level_maps => [{$params["sa_tag_level_deflt"]}],";}
	if($params["sa_tag3_level_deflt"]<>null){$conf[]="\tspam_tag3_level_maps => [{$params["sa_tag3_level_deflt"]}],";}
	if($params["sa_kill_level_deflt"]<>null){$conf[]="\tspam_kill_level_maps => [{$params["sa_kill_level_deflt"]}],";}
	if($params["sa_dsn_cutoff_level"]<>null){$conf[]="\tspam_dsn_cutoff_level_maps => [{$params["sa_dsn_cutoff_level"]}],";}
	if($params["sa_quarantine_cutoff_level"]<>null){$conf[]="\tspam_quarantine_cutoff_level_maps => [{$params["sa_quarantine_cutoff_level"]}],";}
	if($params["spam_subject_tag2_maps"]<>null){$conf[]="\tspam_subject_tag2_maps => ['{$params["spam_subject_tag2_maps"]}'],";}
	
	
	
	if($params["spam_subject_tag_maps_enable"]=="yes"){
			if($params["spam_subject_tag_maps_enable"]<>null){
				$conf[]="\tspam_subject_tag_maps  = ['{$params["spam_subject_tag_maps"]}'],";
			}
	}

	if($params["spam_quarantine_spammy2"]==1){
				$conf[]="\tfinal_destiny_by_ccat=> {(CC_SPAMMY,1)},";
			}
			
	if($params["mailfrom_notify_admin"]<>null){$conf[]="\tvirus_admin_maps => ['{$params["mailfrom_notify_admin"]}'],";}
	if($params["mailfrom_notify_spamadmin"]<>null){$conf[]="\tspam_admin_maps => ['{$params["mailfrom_notify_spamadmin"]}'],";}				
	if($params["virus_admin"]<>null){$conf[]="\tvirus_admin_maps => ['{$params["virus_admin"]}'],";}
 	if($params["warnbadhsender"]<>null){$conf[]="\twarnbadhsender => {$params["warnbadhsender"]},";}
	//if($params["warnbadhrecip"]<>null){$conf[]="\t@warnbadhrecip => {$params["warnbadhrecip"]},";}
	//if($params["warnvirusrecip"]<>null){$conf[]="\t@warnvirusrecip => {$params["warnvirusrecip"]},";}
	//if($params["warnbannedrecip"]<>null){$conf[]="\t@warnbannedrecip => {$params["warnbannedrecip"]},";}
	$banned_files=$this->LoadMultiplePoliciesBannedFiles($main->myhostname);
	if($banned_files<>null){$conf[]=$banned_files;}
	$conf[]="\t};";	
	$conf[]="";	
	return @implode("\n",$conf);		
			
}

function LoadMultiplePoliciesBannedFiles($hostname){
	
	$sql="SELECT * FROM smtp_attachments_blocking WHERE hostname='$hostname' ORDER BY IncludeByName";
	$q=new mysql();
	$results=$q->QUERY_SQL($sql,"artica_backup");
	while($ligne=@mysql_fetch_array($results,MYSQL_ASSOC)){
		if($ligne["IncludeByName"]==null){continue;}
			$f[]=$ligne["IncludeByName"];
		
	}
	if(!is_array($f)){return;}
	if(count($f)==0){return;}
	$pattern=implode("|",$f);
  	return "\tbanned_filename_maps => [new_RE(qr'.\.($pattern)$'i)],";	
	
}


function SaveToServer(){
	$this->Save();
	$sock=new sockets();
	$sock->getfile('CheckDaemon');
	$sock->getfile('saveamavis');
	// --without-restart
}

function banned_filename_re(){
	if(!is_array($this->extensions)){
		return "\n\$banned_filename_re=undef;\n";
	}
	
	if(count($this->extensions)==0){
		return "\n\$banned_filename_re=undef;\n";
	}
	
	reset($this->extensions);
	return "\n\$banned_filename_re=new_RE(qr'^\.(".implode('|',$this->extensions).")$');\n";
	
	
}

private  function banned_filename_maps(){
	if(!is_array($this->extensions)){return null;}
	if(count($this->extensions)==0){return null;}
	reset($this->extensions);
	$pattern=implode('|',$this->extensions);
	return "banned_filename_re = new_RE(qr'.\.($pattern)$'i)";
}

private function banned_rules_maps(){
	$GENERAL=array();
	$finalstring=null;
	if(is_array($this->extensions)){
		if(count($this->extensions)>0){
			reset($this->extensions);
			$pattern=implode('|',$this->extensions);
			$GENERAL[]="'GENERAL' => new_RE(qr'.\.($pattern)$'i)";
		}
	}
	
	$banned_rules_maps_mysql=$this->banned_rules_maps_mysql();
	if($banned_rules_maps_mysql<>null){$GENERAL[]=$banned_rules_maps_mysql;}
	
	if(count($GENERAL)>0){
		$finalstring=@implode(",\n\t", $GENERAL);
	}
	
	$banned_filename_maps=$this->hash_banned_filename_maps();
	return "%banned_rules = (\n\t$finalstring\n\t);\n$banned_filename_maps";

}

private function hash_banned_filename_maps(){
	$q=new mysql();
	$f=array();
	$sql="SELECT ID FROM amavisd_ext_grps WHERE enabled=1";
	
	$results = $q->QUERY_SQL($sql,"artica_backup");
	if(!$q->ok){if($GLOBALS["VERBOSE"]){
			echo "Starting......: ".date("H:i:s")." amavisd-new EXT: banned_filename_maps -> $q->mysql_error\n-------\n$sql\n-------\n";
	}}
	
	$tot=mysql_num_rows($results);
	if($tot==0){
		if($GLOBALS["VERBOSE"]){
			echo "Starting......: ".date("H:i:s")." amavisd-new EXT: banned_filename_maps no row !!\n";
		}
	}else{
		if($GLOBALS["VERBOSE"]){
			echo "Starting......: ".date("H:i:s")." amavisd-new EXT: banned_filename_maps $tot rows\n";
		}	
	}
	
	
	while ($ligne = mysql_fetch_assoc($results)) {
		$content=$this->banned_filename_maps_items($ligne["ID"]);
		$f[]=$content;
		
	}
	
	if(count($f)>0){
		return "\n@banned_filename_maps = ({ ".@implode(",", $f) ."},);\n";
	}
	
	
}

private function banned_filename_maps_items($gpid){
	$q=new mysql();
	$r=array();
	$sql="SELECT member FROM amavisd_ext_members WHERE gpid=$gpid";
	$results = $q->QUERY_SQL($sql,"artica_backup");
	if(!$q->ok){if($GLOBALS["VERBOSE"]){echo "Starting......: ".date("H:i:s")." amavisd-new EXT: banned_filename_maps_items -> $q->mysql_error\n";}}
	while ($ligne = mysql_fetch_assoc($results)) {
		
		$rulesCompiled=$this->banned_filename_maps_rules($gpid);
		if($rulesCompiled==null){continue;}
		$r[]="\n\t'{$ligne["member"]}'=>'$rulesCompiled'";
		
	}
	
	if(count($r)>0){
		return @implode(",", $r);
	}
}
private function banned_filename_maps_rules($gpid){
	if(isset($GLOBALS["banned_filename_maps_rules"][$gpid])){return $GLOBALS["banned_filename_maps_rules"][$gpid];}
	$RR=array();
	$tt=array();
	$q=new mysql();
	$sql="SELECT ruleid FROM amavisd_ext_link WHERE gpid=$gpid";
	$results = $q->QUERY_SQL($sql,"artica_backup");
	if(!$q->ok){if($GLOBALS["VERBOSE"]){echo "Starting......: ".date("H:i:s")." amavisd-new EXT: banned_filename_maps_items -> $q->mysql_error\n";}}
	while ($ligne = mysql_fetch_assoc($results)) {	
		$rulename="RULE{$ligne["ruleid"]}";
		if(!isset($GLOBALS["banned_rules_maps"][$rulename])){
			if($GLOBALS["VERBOSE"]){echo "Starting......: ".date("H:i:s")." amavisd-new EXT: $rulename (no such rule)\n";}
			continue;
		}
		$RR[$rulename]=true;
		
	}
	
	if(count($RR)==0){$GLOBALS["banned_filename_maps_rules"][$gpid]=null;return null;}
	while (list ($rule, $none) = each ($RR)){$tt[]=$rule;}
	
	if(count($tt)==0){$GLOBALS["banned_filename_maps_rules"][$gpid]=null;return null;		}
	
	$final=@implode(",", $tt);
	$GLOBALS["banned_filename_maps_rules"][$gpid]=$final;
	return $final;
	
		
}

private function banned_rules_maps_mysql(){
	$RULES=array();
	$q=new mysql();
	$sql="SELECT *  FROM amavisd_ext_rules WHERE enabled=1";
	$results = $q->QUERY_SQL($sql,"artica_backup");
	if(!$q->ok){if($GLOBALS["VERBOSE"]){echo "Starting......: ".date("H:i:s")." amavisd-new EXT: amavisd_ext_rules -> $q->mysql_error\n";}}
	if($GLOBALS["VERBOSE"]){echo "Starting......: ".date("H:i:s")." amavisd-new EXT: amavisd_ext_rules -> ".mysql_num_rows($results)." rules\n";}
	
	while ($ligne = mysql_fetch_assoc($results)) {
		$rulename="RULE{$ligne["ID"]}";
		$ruleContent=$this->banned_rules_maps_mysql_items($ligne["ID"]);
		if($ruleContent<>null){
			$GLOBALS["banned_rules_maps"][$rulename]=true;
			$RULES[]="\n\t'$rulename'=>$ruleContent";
			
		}
		
	}
	
	if(count($RULES)>0){
		return @implode(",", $RULES);
	}
	
}

private function banned_rules_maps_mysql_items($ruleid){
	$q=new mysql();
	$exts=array();
	$whitelist=null;
	$blacklist=null;
	$FINALAR=array();
	$sql="SELECT * FROM amavisd_ext_items  WHERE ruleid=$ruleid";
	$results = $q->QUERY_SQL($sql,"artica_backup");
	if(mysql_num_rows($results)==0){return null;}
	while ($ligne = mysql_fetch_assoc($results)) {
		if($ligne["pattern"]==null){continue;}
		if(function_exists("string_to_regex")){$ligne["pattern"]=string_to_regex($ligne["pattern"]);}
		$exts[$ligne["pass"]][]=$ligne["pattern"];
	}
	
	if(isset($exts[1])){
		if(count($exts[1])>0){
			$ppa=@implode("|", $exts[1]);
			$whitelist="[ qr'^\.($ppa)$' => 0]";
		}
	}
	
	if(isset($exts[0])){
		if(count($exts[0])>0){
			$ppa=@implode("|", $exts[0]);
			$blacklist="qr'.\.($ppa)$'i";
		}
	}
	
	if($blacklist<>null){$FINALAR[]=$blacklist;}
	if($whitelist<>null){$FINALAR[]=$whitelist;}
	if(count($FINALAR)>0){return "new_RE(".@implode(",", $FINALAR).")";}
}

function per_recip_blacklist_whitelist_sender_lookup_tables(){
	$ldap=new clladp();
	$domain=$ldap->hash_get_all_domains();
	if(!is_array($domain)){return null;}
	$white=null;
	$black=null;
	$array_white=array();
	$array_black=array();
	
	while (list ($num, $line) = each ($domain)){
		writelogs("Search white list and black list for $num",__CLASS__.'/'.__FUNCTION__,__FILE__);
		$dom_black=$this->BlackListFromDomain($num);
		if(strlen($dom_black)>2){
			writelogs("blacklist=$dom_black",__CLASS__.'/'.__FUNCTION__,__FILE__);
			$array_black[]=$dom_black;
		}
		
		$dom_white=$this->WhitelistsFromDomain($num);
		if(strlen($dom_white)>2){
			writelogs("whitelist=$dom_white",__CLASS__.'/'.__FUNCTION__,__FILE__);
			$array_white[]=$dom_white;
		}		
		
	}
	
	$per_recip_whitelist_sender_lookup_mysql=$this->per_recip_whitelist_sender_lookup_mysql();
	if($per_recip_whitelist_sender_lookup_mysql<>null){
		$array_white[]=$per_recip_whitelist_sender_lookup_mysql;
	}
	
	$per_recip_blacklist_sender_lookup_mysql=$this->per_recip_blacklist_sender_lookup_mysql();
	if($per_recip_blacklist_sender_lookup_mysql<>null){
		$array_black[]=$per_recip_blacklist_sender_lookup_mysql;
	}	
	
	if(count($array_white)>0){
		$white="\n";
		$white=$white."\$per_recip_whitelist_sender_lookup_tables = {\n";
		$white=$white.implode(",\n",$array_white);
		$white=$white."\n\t};\n";
	}
	
	if(count($array_black)>0){
		$black="\n";
		$black=$black."\$per_recip_blacklist_sender_lookup_tables  = {\n";
		$black=$black.implode(",\n",$array_black);
		$black=$black."\n\t};\n";
	}	
	
	return $black.$white;
	
}
	
function BlackListFromDomain($domain){
	$ldap=new clladp();
	$dn="cn=$domain,cn=wlbl,cn=artica,$ldap->suffix";
	if(!$ldap->ExistsDN($dn)){
		return null;
	}
	
	$sr =@ldap_read($ldap->ldap_connection,$dn,'objectClass=PostFixStructuralClass');
	if ($sr) {
			$hash=ldap_get_entries($ldap->ldap_connection,$sr);
			for($j=0;$j<$hash[0][strtolower("KasperkyASDatasDeny")]["count"];$j++){
				writelogs($hash[0][strtolower("KasperkyASDatasDeny")][$j],__CLASS__.'/'.__FUNCTION__,__FILE__);
				if(trim($hash[0][strtolower("KasperkyASDatasDeny")][$j])){
					$res_bl[]=$hash[0][strtolower("KasperkyASDatasDeny")][$j];
				}
			}
		}

	if(!is_array($res_bl)){return null;}
	
	$fileSave="/var/amavis/$domain.blacklist.db";
	$fileSave=str_replace("@", "-", $fileSave);
	
	if($GLOBALS["EXECUTED_AS_ROOT"]){
		@mkdir("/etc/amavis",0755,true);
		@file_put_contents($fileSave, @implode("\n", $res_bl)."\n");
		@chmod($fileSave, 0644);
		@chown($fileSave, "postfix");
	}
	

	return "\t'.$domain'=> read_hash(\"$fileSave\")";	
	
	//return "'$domain'=> [qw(".implode(" ",$res_bl).")]";
	
}

private function per_recip_whitelist_sender_lookup_mysql(){
	$sql="SELECT *  FROM contacts_whitelist WHERE `enabled`=1";
	$q=new mysql();
	$results = $q->QUERY_SQL($sql,"artica_backup");
	$ARRAY=array();
	$f=array();
	while ($ligne = mysql_fetch_assoc($results)) {
		$ARRAY[$ligne["uid"]][]=$ligne["sender"];
	}
	if(count($ARRAY)==0){return null;}
	while (list ($uid, $senders) = each ($ARRAY) ){
		$ct=new user($uid);
		if(!$ct->UserExists){continue;}
		if(count($ct->HASH_ALL_MAILS)==0){continue;}
		
		while (list ($index, $rcptto) = each ($ct->HASH_ALL_MAILS) ){
			$nextfile="/var/amavis/$rcptto.whitelist.db";
			$nextfile=str_replace("@", "-", $nextfile);
			@file_put_contents($nextfile, @implode("\n", $senders)."\n");
			@chmod($nextfile, 0644);
			@chown($nextfile, "postfix");			
			$f[]="\t'$rcptto'=> read_hash(\"$nextfile\")";
		}
	}
	
	if(count($f)>0){
		return implode(",\n",$f);
	}
	
}
private function per_recip_blacklist_sender_lookup_mysql(){
	
	
	
	
	$sql="SELECT *  FROM contacts_blacklist WHERE `enabled`=1 AND `Junk`=1";
	$q=new mysql();
	$results = $q->QUERY_SQL($sql,"artica_backup");
	$ARRAY=array();
	$f=array();
	while ($ligne = mysql_fetch_assoc($results)) {
		$ARRAY[$ligne["uid"]][]=$ligne["sender"];
	}
	if(count($ARRAY)==0){return null;}
	while (list ($uid, $senders) = each ($ARRAY) ){
		$ct=new user($uid);
		if(!$ct->UserExists){continue;}
		if(count($ct->HASH_ALL_MAILS)==0){continue;}

		while (list ($index, $rcptto) = each ($ct->HASH_ALL_MAILS) ){
			$nextfile="/var/amavis/$rcptto.blacklist.db";
			$nextfile=str_replace("@", "-", $nextfile);
			@file_put_contents($nextfile, @implode("\n", $senders)."\n");
			@chmod($nextfile, 0644);
			@chown($nextfile, "postfix");
			$f[]="\t'$rcptto'=> read_hash(\"$nextfile\")";
		}
	}

	if(count($f)>0){
		return implode(",\n",$f);
	}

}

function WhitelistsFromDomain($domain){
	$ldap=new clladp();
	$ldap=new clladp();
	$dn="cn=$domain,cn=wlbl,cn=artica,$ldap->suffix";
	if(!$ldap->ExistsDN($dn)){
		return null;
	}
	
	$sr =@ldap_read($ldap->ldap_connection,$dn,'objectClass=PostFixStructuralClass');
	if ($sr) {
			$hash=ldap_get_entries($ldap->ldap_connection,$sr);
			for($j=0;$j<$hash[0][strtolower("kasperkyasdatasallow")]["count"];$j++){
				writelogs($hash[0][strtolower("kasperkyasdatasallow")][$j],__CLASS__.'/'.__FUNCTION__,__FILE__);
				if(trim($hash[0][strtolower("kasperkyasdatasallow")][$j])){
					$res_bl[]=$hash[0][strtolower("kasperkyasdatasallow")][$j];
				}
			}
		}

	if(!is_array($res_bl)){return null;}
	
	$fileSave="/var/amavis/$domain.whitelist.db";
	$fileSave=str_replace("@", "-", $fileSave);	
	
	if($GLOBALS["EXECUTED_AS_ROOT"]){
		@mkdir("/var/amavis",0755,true);
		@file_put_contents($fileSave, @implode("\n", $res_bl)."\n");
		@chmod($fileSave, 0644);
		@chown($fileSave, "postfix");
	}
	
	
	return "\t'.$domain'=> read_hash(\"$fileSave\")";
}

private function DKIM_outgoing_list(){
		$sock=new sockets();
		$enable_dkim_verification=$sock->GET_INFO("enable_dkim_verification");
		$enable_dkim_signing=$sock->GET_INFO("enable_dkim_signing");
		if($enable_dkim_signing==0){return "\$enable_dkim_signing = 0;";}
		$ldap=new clladp();
		$domains=$ldap->hash_get_all_domains();
		$array[]="#DKIM: Sign all outgoing mails in ". count($domains). " Domains...";
		$array[]="\$enable_dkim_signing = 1;";
		
		
		if(!is_array($domains)){
			echo "Starting......: ".date("H:i:s")." amavisd-new DKIM no domains set\n";
			return null;
			}
			while (list ($domain, $line) = each ($domains)){
				$md5=md5($domain);
				if(is_file("/etc/amavis/dkim/$md5.key.pem")){
					$domain_name=str_replace(".","_",$domain);
					$array[]="dkim_key('$domain', '$domain_name', '/etc/amavis/dkim/$md5.key.pem');";
					echo "Starting......: ".date("H:i:s")." amavisd-new DKIM ($domain) $md5.key.pem OK\n";
					
				}else{
					echo "Starting......: ".date("H:i:s")." amavisd-new ERROR !!! DKIM ($domain) /etc/amavis/dkim/$md5.key.pem no such file\n";
				}
			}
	if(!is_array($array)){return "\$enable_dkim_signing = 0;";}
	$array[]="@dkim_signature_options_bysender_maps = ({ '.' => { ttl => 21*24*3600, c => 'relaxed/simple' } } );";		
	return @implode("\n",$array);
}


public function CheckDKIM(){
		if(posix_getuid()<>0){return;}	
		$sock=new sockets();
		$enable_dkim_verification=$sock->GET_INFO("enable_dkim_verification");
		$enable_dkim_signing=$sock->GET_INFO("enable_dkim_signing");
		if($enable_dkim_signing==0){
			echo "Starting......: ".date("H:i:s")." amavisd-new DKIM signing is not activated\n";
			return;
		}
		
		$ldap=new clladp();
		$domains=$ldap->hash_get_all_domains();
		if(!is_array($domains)){return null;}
			while (list ($domain, $line) = each ($domains)){
				$md5=md5($domain);
				if(!is_file("/etc/amavis/dkim/$md5.key.pem")){
					echo "Starting......: ".date("H:i:s")." amavisd-new DKIM build key for $domain\n";
					$cmd="/usr/local/sbin/amavisd -c /usr/local/etc/amavisd.conf genrsa /etc/amavis/dkim/$md5.key.pem";
					shell_exec("$cmd >/dev/null 2>&1");		
				}
				
			}
	}

}

class amavis_sql{
	
	function amavis_sql(){
		include_once(dirname(__FILE__).'/class.mysql.inc');
		include_once(dirname(__FILE__).'/class.templates.inc');
		
		
	}
	
	function CountReceived(){
		$sql="SELECT COUNT(*) AS TCOUNT FROM mails_events";
		$mysql=new mysql();
		$ligne=@mysql_fetch_array($mysql->QUERY_SQL($sql,"artica_events"));
		return $ligne["TCOUNT"];
	}
	
	function LastReceived(){
		$sql="SELECT * FROM mails_events ORDER BY ID DESC limit 0,100";
		$mysql=new mysql();
		$results=$mysql->QUERY_SQL($sql,"artica_events");
		$html="
		<br>
		<H5>100 {first_emails} (" . $this->CountReceived()." {total})</H5>
		<table style='width:100%'>
		<tr>
			<th>&nbsp;</th>
			<th>{date}</th>
			<th>{mail_from}</th>
			<th>{mail_to}</th>
			<th>{country}</th>
			<th>{region}</th>
			<th>{city}</th>
		</tr>
		
		";
		
		while($ligne=@mysql_fetch_array($results,MYSQL_ASSOC)){
			if($ligne["Region"]==null){$ligne["Region"]="undefined";}
			$ligne["org_mailfrom"]=$ligne["mailfrom"];
			$ligne["org_mailto"]=$ligne["rcpt_to"];
			if(strlen($ligne["mailfrom"])>33){$ligne["mailfrom"]=substr($ligne["mailfrom"],0,30)."...";}
			if(strlen($ligne["rcpt_to"])>33){$ligne["rcpt_to"]=substr($ligne["rcpt_to"],0,30)."...";}
			
			if($ligne["spam"]==0){$background='white';}else{$background="#F8D3C3";}
			
			$html=$html . "
				<tr " . CellRollOver(null,$this->__LastReceived_tooltip($ligne)).">
				<td width=1% style='background-color:$background;border-bottom:1px solid #CCCCCC'><img src='img/fw_bold.gif'></td>
				<td nowrap style='background-color:$background;border-bottom:1px solid #CCCCCC'>{$ligne["zDate"]}</td>
				<td style='background-color:$background;border-bottom:1px solid #CCCCCC'>{$ligne["mailfrom"]}</td>
				<td style='background-color:$background;border-bottom:1px solid #CCCCCC'>{$ligne["rcpt_to"]}</td>
				<td style='background-color:$background;border-bottom:1px solid #CCCCCC'>{$ligne["Country"]}</td>
				<td nowrap style='background-color:$background;border-bottom:1px solid #CCCCCC'>{$ligne["Region"]}</td>
				<td style='background-color:$background;border-bottom:1px solid #CCCCCC'>{$ligne["City"]}</td>
				</tr>
				
				";
			}
			
			$html="<div style='width:100%;height:400px;overflow:auto'>$html</table></div>";
			$tpl=new templates();
			return $tpl->_ENGINE_parse_body($html);
		
	}
	
	function __LastReceived_tooltip($array){
		$array["subject"]=ASCII_TO_HTML($array["subject"]);
		if($array["spam"]==0){$spam="{no}";}else{$spam="yes";}
		$html="<table style=width:100%>";
		$html=$html."<tr>";
		$html=$html."	<td style=background-color:#CCCCCC><strong>{host}</td>";
		$html=$html."<td>{$array["relayhost"]}</td>";
		$html=$html."<tr>";
		$html=$html."	<td style=background-color:#CCCCCC><strong>{mail_from}</td>";
		$html=$html."<td>{$array["org_mailfrom"]}</td>";		
		$html=$html."</tr>";
		$html=$html."<tr>";
		$html=$html."	<td style=background-color:#CCCCCC><strong>{mail_to}</td>";
		$html=$html."<td>{$array["org_mailto"]}</td>";		
		$html=$html."</tr>";		
		$html=$html."<tr>";
		$html=$html."<td style=background-color:#CCCCCC><strong>{message_id}</td>";
		$html=$html."<td>{$array["message_id"]}</td>";
		$html=$html."</tr>";
		$html=$html."<tr>";
		$html=$html." <td style=background-color:#CCCCCC><strong>{subject}</td>";
		$html=$html." <td>{$array["subject"]}</td>";
		$html=$html."</tr>	";
		$html=$html."<tr>";
		$html=$html." <td style=background-color:#CCCCCC><strong>{spam}</td>";
		$html=$html." <td>$spam</td>";
		$html=$html."</tr>	";		
	    $html=$html."</table>";
		return $html;
		
		
	}
	

	
	
}